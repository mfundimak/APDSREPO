{"ast":null,"code":"// src/avatar.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\");\nvar parts = anatomy.build();\n\n// src/avatar.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `avatar:${ctx.id}`,\n  getImageId: ctx => ctx.ids?.image ?? `avatar:${ctx.id}:image`,\n  getFallbackId: ctx => ctx.ids?.fallback ?? `avatar:${ctx.id}:fallback`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getImageEl: ctx => dom.getById(ctx, dom.getImageId(ctx))\n});\n\n// src/avatar.connect.ts\nfunction connect(state, send, normalize) {\n  const loaded = state.matches(\"loaded\");\n  return {\n    loaded,\n    setSrc(src) {\n      send({\n        type: \"SRC.SET\",\n        src\n      });\n    },\n    setLoaded() {\n      send({\n        type: \"IMG.LOADED\",\n        src: \"api\"\n      });\n    },\n    setError() {\n      send({\n        type: \"IMG.ERROR\",\n        src: \"api\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context)\n      });\n    },\n    getImageProps() {\n      return normalize.img({\n        ...parts.image.attrs,\n        hidden: !loaded,\n        dir: state.context.dir,\n        id: dom.getImageId(state.context),\n        \"data-state\": loaded ? \"visible\" : \"hidden\",\n        onLoad() {\n          send({\n            type: \"IMG.LOADED\",\n            src: \"element\"\n          });\n        },\n        onError() {\n          send({\n            type: \"IMG.ERROR\",\n            src: \"element\"\n          });\n        }\n      });\n    },\n    getFallbackProps() {\n      return normalize.element({\n        ...parts.fallback.attrs,\n        dir: state.context.dir,\n        id: dom.getFallbackId(state.context),\n        hidden: loaded,\n        \"data-state\": loaded ? \"hidden\" : \"visible\"\n      });\n    }\n  };\n}\n\n// src/avatar.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { observeAttributes, observeChildren } from \"@zag-js/dom-query\";\nimport { compact } from \"@zag-js/utils\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"avatar\",\n    initial: \"loading\",\n    activities: [\"trackImageRemoval\"],\n    context: ctx,\n    on: {\n      \"SRC.CHANGE\": {\n        target: \"loading\"\n      },\n      \"IMG.UNMOUNT\": {\n        target: \"error\"\n      }\n    },\n    states: {\n      loading: {\n        activities: [\"trackSrcChange\"],\n        entry: [\"checkImageStatus\"],\n        on: {\n          \"IMG.LOADED\": {\n            target: \"loaded\",\n            actions: [\"invokeOnLoad\"]\n          },\n          \"IMG.ERROR\": {\n            target: \"error\",\n            actions: [\"invokeOnError\"]\n          }\n        }\n      },\n      error: {\n        activities: [\"trackSrcChange\"],\n        on: {\n          \"IMG.LOADED\": {\n            target: \"loaded\",\n            actions: [\"invokeOnLoad\"]\n          }\n        }\n      },\n      loaded: {\n        activities: [\"trackSrcChange\"],\n        on: {\n          \"IMG.ERROR\": {\n            target: \"error\",\n            actions: [\"invokeOnError\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackSrcChange(ctx2, _evt, {\n        send\n      }) {\n        const imageEl = dom.getImageEl(ctx2);\n        return observeAttributes(imageEl, {\n          attributes: [\"src\", \"srcset\"],\n          callback() {\n            send({\n              type: \"SRC.CHANGE\"\n            });\n          }\n        });\n      },\n      trackImageRemoval(ctx2, _evt, {\n        send\n      }) {\n        const rootEl = dom.getRootEl(ctx2);\n        return observeChildren(rootEl, {\n          callback(records) {\n            const removedNodes = Array.from(records[0].removedNodes);\n            const removed = removedNodes.find(node => node.matches(\"[data-scope=avatar][data-part=image]\"));\n            if (removed) {\n              send({\n                type: \"IMG.UNMOUNT\"\n              });\n            }\n          }\n        });\n      }\n    },\n    actions: {\n      invokeOnLoad(ctx2) {\n        ctx2.onStatusChange?.({\n          status: \"loaded\"\n        });\n      },\n      invokeOnError(ctx2) {\n        ctx2.onStatusChange?.({\n          status: \"error\"\n        });\n      },\n      checkImageStatus(ctx2, _evt, {\n        send\n      }) {\n        const imageEl = dom.getImageEl(ctx2);\n        if (imageEl?.complete) {\n          const type = hasLoaded(imageEl) ? \"IMG.LOADED\" : \"IMG.ERROR\";\n          send({\n            type,\n            src: \"ssr\"\n          });\n        }\n      }\n    }\n  });\n}\nfunction hasLoaded(image) {\n  return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;\n}\n\n// src/avatar.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"dir\", \"id\", \"ids\", \"onStatusChange\", \"getRootNode\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","createScope","dom","getRootId","ctx","ids","root","id","getImageId","image","getFallbackId","fallback","getRootEl","getById","getImageEl","connect","state","send","normalize","loaded","matches","setSrc","src","type","setLoaded","setError","getRootProps","element","attrs","dir","context","getImageProps","img","hidden","onLoad","onError","getFallbackProps","createMachine","observeAttributes","observeChildren","compact","machine","userContext","initial","activities","on","target","states","loading","entry","actions","error","trackSrcChange","ctx2","_evt","imageEl","attributes","callback","trackImageRemoval","rootEl","records","removedNodes","Array","from","removed","find","node","invokeOnLoad","onStatusChange","status","invokeOnError","checkImageStatus","complete","hasLoaded","naturalWidth","naturalHeight","createProps","createSplitProps","props","splitProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\avatar\\src\\avatar.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\avatar\\src\\avatar.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\avatar\\src\\avatar.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\avatar\\src\\avatar.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\avatar\\src\\avatar.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\")\n\nexport const parts = anatomy.build()\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./avatar.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `avatar:${ctx.id}`,\n  getImageId: (ctx: Ctx) => ctx.ids?.image ?? `avatar:${ctx.id}:image`,\n  getFallbackId: (ctx: Ctx) => ctx.ids?.fallback ?? `avatar:${ctx.id}:fallback`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getImageEl: (ctx: Ctx) => dom.getById<HTMLImageElement>(ctx, dom.getImageId(ctx)),\n})\n","import type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./avatar.anatomy\"\nimport { dom } from \"./avatar.dom\"\nimport type { MachineApi, Send, State } from \"./avatar.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const loaded = state.matches(\"loaded\")\n  return {\n    loaded,\n    setSrc(src) {\n      send({ type: \"SRC.SET\", src })\n    },\n    setLoaded() {\n      send({ type: \"IMG.LOADED\", src: \"api\" })\n    },\n    setError() {\n      send({ type: \"IMG.ERROR\", src: \"api\" })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getImageProps() {\n      return normalize.img({\n        ...parts.image.attrs,\n        hidden: !loaded,\n        dir: state.context.dir,\n        id: dom.getImageId(state.context),\n        \"data-state\": loaded ? \"visible\" : \"hidden\",\n        onLoad() {\n          send({ type: \"IMG.LOADED\", src: \"element\" })\n        },\n        onError() {\n          send({ type: \"IMG.ERROR\", src: \"element\" })\n        },\n      })\n    },\n\n    getFallbackProps() {\n      return normalize.element({\n        ...parts.fallback.attrs,\n        dir: state.context.dir,\n        id: dom.getFallbackId(state.context),\n        hidden: loaded,\n        \"data-state\": loaded ? \"hidden\" : \"visible\",\n      })\n    },\n  }\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { observeAttributes, observeChildren } from \"@zag-js/dom-query\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./avatar.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./avatar.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"avatar\",\n      initial: \"loading\",\n      activities: [\"trackImageRemoval\"],\n\n      context: ctx,\n\n      on: {\n        \"SRC.CHANGE\": {\n          target: \"loading\",\n        },\n        \"IMG.UNMOUNT\": {\n          target: \"error\",\n        },\n      },\n\n      states: {\n        loading: {\n          activities: [\"trackSrcChange\"],\n          entry: [\"checkImageStatus\"],\n          on: {\n            \"IMG.LOADED\": {\n              target: \"loaded\",\n              actions: [\"invokeOnLoad\"],\n            },\n            \"IMG.ERROR\": {\n              target: \"error\",\n              actions: [\"invokeOnError\"],\n            },\n          },\n        },\n        error: {\n          activities: [\"trackSrcChange\"],\n          on: {\n            \"IMG.LOADED\": {\n              target: \"loaded\",\n              actions: [\"invokeOnLoad\"],\n            },\n          },\n        },\n        loaded: {\n          activities: [\"trackSrcChange\"],\n          on: {\n            \"IMG.ERROR\": {\n              target: \"error\",\n              actions: [\"invokeOnError\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackSrcChange(ctx, _evt, { send }) {\n          const imageEl = dom.getImageEl(ctx)\n          return observeAttributes(imageEl, {\n            attributes: [\"src\", \"srcset\"],\n            callback() {\n              send({ type: \"SRC.CHANGE\" })\n            },\n          })\n        },\n        trackImageRemoval(ctx, _evt, { send }) {\n          const rootEl = dom.getRootEl(ctx)\n          return observeChildren(rootEl, {\n            callback(records) {\n              const removedNodes = Array.from(records[0].removedNodes) as HTMLElement[]\n              const removed = removedNodes.find((node) => node.matches(\"[data-scope=avatar][data-part=image]\"))\n              if (removed) {\n                send({ type: \"IMG.UNMOUNT\" })\n              }\n            },\n          })\n        },\n      },\n      actions: {\n        invokeOnLoad(ctx) {\n          ctx.onStatusChange?.({ status: \"loaded\" })\n        },\n        invokeOnError(ctx) {\n          ctx.onStatusChange?.({ status: \"error\" })\n        },\n        checkImageStatus(ctx, _evt, { send }) {\n          const imageEl = dom.getImageEl(ctx)\n          if (imageEl?.complete) {\n            const type = hasLoaded(imageEl) ? \"IMG.LOADED\" : \"IMG.ERROR\"\n            send({ type, src: \"ssr\" })\n          }\n        },\n      },\n    },\n  )\n}\n\nfunction hasLoaded(image: HTMLImageElement) {\n  return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./avatar.types\"\n\nexport const props = createProps<UserDefinedContext>()([\"dir\", \"id\", \"ids\", \"onStatusChange\", \"getRootNode\"])\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":";AAAA,SAASA,aAAA,QAAqB;AAEvB,IAAMC,OAAA,GAAUD,aAAA,CAAc,QAAQ,EAAEE,KAAA,CAAM,QAAQ,SAAS,UAAU;AAEzE,IAAMA,KAAA,GAAQD,OAAA,CAAQE,KAAA,CAAM;;;ACJnC,SAASC,WAAA,QAAmB;AAGrB,IAAMC,GAAA,GAAMD,WAAA,CAAY;EAC7BE,SAAA,EAAYC,GAAA,IAAaA,GAAA,CAAIC,GAAA,EAAKC,IAAA,IAAQ,UAAUF,GAAA,CAAIG,EAAE;EAC1DC,UAAA,EAAaJ,GAAA,IAAaA,GAAA,CAAIC,GAAA,EAAKI,KAAA,IAAS,UAAUL,GAAA,CAAIG,EAAE;EAC5DG,aAAA,EAAgBN,GAAA,IAAaA,GAAA,CAAIC,GAAA,EAAKM,QAAA,IAAY,UAAUP,GAAA,CAAIG,EAAE;EAElEK,SAAA,EAAYR,GAAA,IAAaF,GAAA,CAAIW,OAAA,CAAQT,GAAA,EAAKF,GAAA,CAAIC,SAAA,CAAUC,GAAG,CAAC;EAC5DU,UAAA,EAAaV,GAAA,IAAaF,GAAA,CAAIW,OAAA,CAA0BT,GAAA,EAAKF,GAAA,CAAIM,UAAA,CAAWJ,GAAG,CAAC;AAClF,CAAC;;;ACLM,SAASW,QAA6BC,KAAA,EAAcC,IAAA,EAAYC,SAAA,EAA6C;EAClH,MAAMC,MAAA,GAASH,KAAA,CAAMI,OAAA,CAAQ,QAAQ;EACrC,OAAO;IACLD,MAAA;IACAE,OAAOC,GAAA,EAAK;MACVL,IAAA,CAAK;QAAEM,IAAA,EAAM;QAAWD;MAAI,CAAC;IAC/B;IACAE,UAAA,EAAY;MACVP,IAAA,CAAK;QAAEM,IAAA,EAAM;QAAcD,GAAA,EAAK;MAAM,CAAC;IACzC;IACAG,SAAA,EAAW;MACTR,IAAA,CAAK;QAAEM,IAAA,EAAM;QAAaD,GAAA,EAAK;MAAM,CAAC;IACxC;IAEAI,aAAA,EAAe;MACb,OAAOR,SAAA,CAAUS,OAAA,CAAQ;QACvB,GAAG5B,KAAA,CAAMO,IAAA,CAAKsB,KAAA;QACdC,GAAA,EAAKb,KAAA,CAAMc,OAAA,CAAQD,GAAA;QACnBtB,EAAA,EAAIL,GAAA,CAAIC,SAAA,CAAUa,KAAA,CAAMc,OAAO;MACjC,CAAC;IACH;IAEAC,cAAA,EAAgB;MACd,OAAOb,SAAA,CAAUc,GAAA,CAAI;QACnB,GAAGjC,KAAA,CAAMU,KAAA,CAAMmB,KAAA;QACfK,MAAA,EAAQ,CAACd,MAAA;QACTU,GAAA,EAAKb,KAAA,CAAMc,OAAA,CAAQD,GAAA;QACnBtB,EAAA,EAAIL,GAAA,CAAIM,UAAA,CAAWQ,KAAA,CAAMc,OAAO;QAChC,cAAcX,MAAA,GAAS,YAAY;QACnCe,OAAA,EAAS;UACPjB,IAAA,CAAK;YAAEM,IAAA,EAAM;YAAcD,GAAA,EAAK;UAAU,CAAC;QAC7C;QACAa,QAAA,EAAU;UACRlB,IAAA,CAAK;YAAEM,IAAA,EAAM;YAAaD,GAAA,EAAK;UAAU,CAAC;QAC5C;MACF,CAAC;IACH;IAEAc,iBAAA,EAAmB;MACjB,OAAOlB,SAAA,CAAUS,OAAA,CAAQ;QACvB,GAAG5B,KAAA,CAAMY,QAAA,CAASiB,KAAA;QAClBC,GAAA,EAAKb,KAAA,CAAMc,OAAA,CAAQD,GAAA;QACnBtB,EAAA,EAAIL,GAAA,CAAIQ,aAAA,CAAcM,KAAA,CAAMc,OAAO;QACnCG,MAAA,EAAQd,MAAA;QACR,cAAcA,MAAA,GAAS,WAAW;MACpC,CAAC;IACH;EACF;AACF;;;ACrDA,SAASkB,aAAA,QAAqB;AAC9B,SAASC,iBAAA,EAAmBC,eAAA,QAAuB;AACnD,SAASC,OAAA,QAAe;AAIjB,SAASC,QAAQC,WAAA,EAAiC;EACvD,MAAMtC,GAAA,GAAMoC,OAAA,CAAQE,WAAW;EAC/B,OAAOL,aAAA,CACL;IACE9B,EAAA,EAAI;IACJoC,OAAA,EAAS;IACTC,UAAA,EAAY,CAAC,mBAAmB;IAEhCd,OAAA,EAAS1B,GAAA;IAETyC,EAAA,EAAI;MACF,cAAc;QACZC,MAAA,EAAQ;MACV;MACA,eAAe;QACbA,MAAA,EAAQ;MACV;IACF;IAEAC,MAAA,EAAQ;MACNC,OAAA,EAAS;QACPJ,UAAA,EAAY,CAAC,gBAAgB;QAC7BK,KAAA,EAAO,CAAC,kBAAkB;QAC1BJ,EAAA,EAAI;UACF,cAAc;YACZC,MAAA,EAAQ;YACRI,OAAA,EAAS,CAAC,cAAc;UAC1B;UACA,aAAa;YACXJ,MAAA,EAAQ;YACRI,OAAA,EAAS,CAAC,eAAe;UAC3B;QACF;MACF;MACAC,KAAA,EAAO;QACLP,UAAA,EAAY,CAAC,gBAAgB;QAC7BC,EAAA,EAAI;UACF,cAAc;YACZC,MAAA,EAAQ;YACRI,OAAA,EAAS,CAAC,cAAc;UAC1B;QACF;MACF;MACA/B,MAAA,EAAQ;QACNyB,UAAA,EAAY,CAAC,gBAAgB;QAC7BC,EAAA,EAAI;UACF,aAAa;YACXC,MAAA,EAAQ;YACRI,OAAA,EAAS,CAAC,eAAe;UAC3B;QACF;MACF;IACF;EACF,GACA;IACEN,UAAA,EAAY;MACVQ,eAAeC,IAAA,EAAKC,IAAA,EAAM;QAAErC;MAAK,GAAG;QAClC,MAAMsC,OAAA,GAAUrD,GAAA,CAAIY,UAAA,CAAWuC,IAAG;QAClC,OAAOf,iBAAA,CAAkBiB,OAAA,EAAS;UAChCC,UAAA,EAAY,CAAC,OAAO,QAAQ;UAC5BC,SAAA,EAAW;YACTxC,IAAA,CAAK;cAAEM,IAAA,EAAM;YAAa,CAAC;UAC7B;QACF,CAAC;MACH;MACAmC,kBAAkBL,IAAA,EAAKC,IAAA,EAAM;QAAErC;MAAK,GAAG;QACrC,MAAM0C,MAAA,GAASzD,GAAA,CAAIU,SAAA,CAAUyC,IAAG;QAChC,OAAOd,eAAA,CAAgBoB,MAAA,EAAQ;UAC7BF,SAASG,OAAA,EAAS;YAChB,MAAMC,YAAA,GAAeC,KAAA,CAAMC,IAAA,CAAKH,OAAA,CAAQ,CAAC,EAAEC,YAAY;YACvD,MAAMG,OAAA,GAAUH,YAAA,CAAaI,IAAA,CAAMC,IAAA,IAASA,IAAA,CAAK9C,OAAA,CAAQ,sCAAsC,CAAC;YAChG,IAAI4C,OAAA,EAAS;cACX/C,IAAA,CAAK;gBAAEM,IAAA,EAAM;cAAc,CAAC;YAC9B;UACF;QACF,CAAC;MACH;IACF;IACA2B,OAAA,EAAS;MACPiB,aAAad,IAAA,EAAK;QAChBA,IAAA,CAAIe,cAAA,GAAiB;UAAEC,MAAA,EAAQ;QAAS,CAAC;MAC3C;MACAC,cAAcjB,IAAA,EAAK;QACjBA,IAAA,CAAIe,cAAA,GAAiB;UAAEC,MAAA,EAAQ;QAAQ,CAAC;MAC1C;MACAE,iBAAiBlB,IAAA,EAAKC,IAAA,EAAM;QAAErC;MAAK,GAAG;QACpC,MAAMsC,OAAA,GAAUrD,GAAA,CAAIY,UAAA,CAAWuC,IAAG;QAClC,IAAIE,OAAA,EAASiB,QAAA,EAAU;UACrB,MAAMjD,IAAA,GAAOkD,SAAA,CAAUlB,OAAO,IAAI,eAAe;UACjDtC,IAAA,CAAK;YAAEM,IAAA;YAAMD,GAAA,EAAK;UAAM,CAAC;QAC3B;MACF;IACF;EACF,CACF;AACF;AAEA,SAASmD,UAAUhE,KAAA,EAAyB;EAC1C,OAAOA,KAAA,CAAM+D,QAAA,IAAY/D,KAAA,CAAMiE,YAAA,KAAiB,KAAKjE,KAAA,CAAMkE,aAAA,KAAkB;AAC/E;;;ACzGA,SAASC,WAAA,QAAmB;AAC5B,SAASC,gBAAA,QAAwB;AAG1B,IAAMC,KAAA,GAAQF,WAAA,CAAgC,EAAE,CAAC,OAAO,MAAM,OAAO,kBAAkB,aAAa,CAAC;AACrG,IAAMG,UAAA,GAAaF,gBAAA,CAA8CC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}