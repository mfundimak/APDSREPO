{"ast":null,"code":"// src/switch.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"switch\").parts(\"root\", \"label\", \"control\", \"thumb\");\nvar parts = anatomy.build();\n\n// src/switch.connect.ts\nimport { dataAttr, visuallyHiddenStyle } from \"@zag-js/dom-query\";\n\n// src/switch.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `switch:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `switch:${ctx.id}:label`,\n  getThumbId: ctx => ctx.ids?.thumb ?? `switch:${ctx.id}:thumb`,\n  getControlId: ctx => ctx.ids?.control ?? `switch:${ctx.id}:control`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `switch:${ctx.id}:input`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx))\n});\n\n// src/switch.connect.ts\nfunction connect(state, send, normalize) {\n  const disabled = state.context.isDisabled;\n  const focused = !disabled && state.context.focused;\n  const checked = state.context.checked;\n  const readOnly = state.context.readOnly;\n  const dataAttrs = {\n    \"data-active\": dataAttr(state.context.active),\n    \"data-focus\": dataAttr(focused),\n    \"data-readonly\": dataAttr(readOnly),\n    \"data-hover\": dataAttr(state.context.hovered),\n    \"data-disabled\": dataAttr(disabled),\n    \"data-state\": state.context.checked ? \"checked\" : \"unchecked\",\n    \"data-invalid\": dataAttr(state.context.invalid)\n  };\n  return {\n    checked,\n    disabled,\n    focused,\n    setChecked(checked2) {\n      send({\n        type: \"CHECKED.SET\",\n        checked: checked2,\n        isTrusted: false\n      });\n    },\n    toggleChecked() {\n      send({\n        type: \"CHECKED.TOGGLE\",\n        checked,\n        isTrusted: false\n      });\n    },\n    getRootProps() {\n      return normalize.label({\n        ...parts.root.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onPointerMove() {\n          if (disabled) return;\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              hovered: true\n            }\n          });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              hovered: false\n            }\n          });\n        },\n        onClick(event) {\n          if (event.target === dom.getHiddenInputEl(state.context)) {\n            event.stopPropagation();\n          }\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context)\n      });\n    },\n    getThumbProps() {\n      return normalize.element({\n        ...parts.thumb.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getThumbId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"checkbox\",\n        required: state.context.required,\n        defaultChecked: checked,\n        disabled,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-invalid\": state.context.invalid,\n        name: state.context.name,\n        form: state.context.form,\n        value: state.context.value,\n        style: visuallyHiddenStyle,\n        onClick(event) {\n          if (readOnly) {\n            event.preventDefault();\n            return;\n          }\n          const checked2 = event.currentTarget.checked;\n          send({\n            type: \"CHECKED.SET\",\n            checked: checked2,\n            isTrusted: true\n          });\n        }\n      });\n    }\n  };\n}\n\n// src/switch.machine.ts\nimport { createMachine, guards } from \"@zag-js/core\";\nimport { trackFocusVisible, trackPress } from \"@zag-js/dom-event\";\nimport { dispatchInputCheckedEvent, trackFormControl } from \"@zag-js/form-utils\";\nimport { compact, isEqual } from \"@zag-js/utils\";\nvar {\n  not\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"switch\",\n    initial: \"ready\",\n    context: {\n      checked: false,\n      label: \"switch\",\n      value: \"on\",\n      disabled: false,\n      ...ctx,\n      fieldsetDisabled: false\n    },\n    computed: {\n      isDisabled: ctx2 => ctx2.disabled || ctx2.fieldsetDisabled\n    },\n    watch: {\n      disabled: \"removeFocusIfNeeded\",\n      checked: \"syncInputElement\"\n    },\n    activities: [\"trackFormControlState\", \"trackPressEvent\", \"trackFocusVisible\"],\n    on: {\n      \"CHECKED.TOGGLE\": [{\n        guard: not(\"isTrusted\"),\n        actions: [\"toggleChecked\", \"dispatchChangeEvent\"]\n      }, {\n        actions: [\"toggleChecked\"]\n      }],\n      \"CHECKED.SET\": [{\n        guard: not(\"isTrusted\"),\n        actions: [\"setChecked\", \"dispatchChangeEvent\"]\n      }, {\n        actions: [\"setChecked\"]\n      }],\n      \"CONTEXT.SET\": {\n        actions: [\"setContext\"]\n      }\n    },\n    states: {\n      ready: {}\n    }\n  }, {\n    guards: {\n      isTrusted: (_ctx, evt) => !!evt.isTrusted\n    },\n    activities: {\n      trackPressEvent(ctx2) {\n        if (ctx2.isDisabled) return;\n        return trackPress({\n          pointerNode: dom.getRootEl(ctx2),\n          keyboardNode: dom.getHiddenInputEl(ctx2),\n          isValidKey: event => event.key === \" \",\n          onPress: () => ctx2.active = false,\n          onPressStart: () => ctx2.active = true,\n          onPressEnd: () => ctx2.active = false\n        });\n      },\n      trackFocusVisible(ctx2) {\n        if (ctx2.isDisabled) return;\n        return trackFocusVisible(dom.getHiddenInputEl(ctx2), {\n          onFocus: () => ctx2.focused = true,\n          onBlur: () => ctx2.focused = false\n        });\n      },\n      trackFormControlState(ctx2, _evt, {\n        send,\n        initialContext\n      }) {\n        return trackFormControl(dom.getHiddenInputEl(ctx2), {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            send({\n              type: \"CHECKED.SET\",\n              checked: !!initialContext.checked,\n              src: \"form-reset\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      setContext(ctx2, evt) {\n        Object.assign(ctx2, evt.context);\n      },\n      syncInputElement(ctx2) {\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        if (!inputEl) return;\n        inputEl.checked = !!ctx2.checked;\n      },\n      removeFocusIfNeeded(ctx2) {\n        if (ctx2.disabled && ctx2.focused) {\n          ctx2.focused = false;\n        }\n      },\n      setChecked(ctx2, evt) {\n        set.checked(ctx2, evt.checked);\n      },\n      toggleChecked(ctx2, _evt) {\n        set.checked(ctx2, !ctx2.checked);\n      },\n      dispatchChangeEvent(ctx2) {\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        dispatchInputCheckedEvent(inputEl, {\n          checked: ctx2.checked\n        });\n      }\n    }\n  });\n}\nvar invoke = {\n  change: ctx => {\n    ctx.onCheckedChange?.({\n      checked: ctx.checked\n    });\n  }\n};\nvar set = {\n  checked: (ctx, checked) => {\n    if (isEqual(ctx.checked, checked)) return;\n    ctx.checked = checked;\n    invoke.change(ctx);\n  }\n};\n\n// src/switch.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"checked\", \"dir\", \"disabled\", \"form\", \"getRootNode\", \"id\", \"ids\", \"invalid\", \"label\", \"name\", \"onCheckedChange\", \"readOnly\", \"required\", \"value\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","dataAttr","visuallyHiddenStyle","createScope","dom","getRootId","ctx","ids","root","id","getLabelId","label","getThumbId","thumb","getControlId","control","getHiddenInputId","hiddenInput","getRootEl","getById","getHiddenInputEl","connect","state","send","normalize","disabled","context","isDisabled","focused","checked","readOnly","dataAttrs","active","hovered","invalid","setChecked","checked2","type","isTrusted","toggleChecked","getRootProps","attrs","dir","htmlFor","onPointerMove","onPointerLeave","onClick","event","target","stopPropagation","getLabelProps","element","getThumbProps","getControlProps","getHiddenInputProps","input","required","defaultChecked","name","form","value","style","preventDefault","currentTarget","createMachine","guards","trackFocusVisible","trackPress","dispatchInputCheckedEvent","trackFormControl","compact","isEqual","not","machine","userContext","initial","fieldsetDisabled","computed","ctx2","watch","activities","on","guard","actions","states","ready","_ctx","evt","trackPressEvent","pointerNode","keyboardNode","isValidKey","key","onPress","onPressStart","onPressEnd","onFocus","onBlur","trackFormControlState","_evt","initialContext","onFieldsetDisabledChange","onFormReset","src","setContext","Object","assign","syncInputElement","inputEl","removeFocusIfNeeded","set","dispatchChangeEvent","invoke","change","onCheckedChange","createProps","createSplitProps","props","splitProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\switch\\src\\switch.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\switch\\src\\switch.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\switch\\src\\switch.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\switch\\src\\switch.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\switch\\src\\switch.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"switch\").parts(\"root\", \"label\", \"control\", \"thumb\")\nexport const parts = anatomy.build()\n","import { dataAttr, visuallyHiddenStyle } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./switch.anatomy\"\nimport { dom } from \"./switch.dom\"\nimport type { MachineApi, Send, State } from \"./switch.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const disabled = state.context.isDisabled\n  const focused = !disabled && state.context.focused\n  const checked = state.context.checked\n  const readOnly = state.context.readOnly\n\n  const dataAttrs = {\n    \"data-active\": dataAttr(state.context.active),\n    \"data-focus\": dataAttr(focused),\n    \"data-readonly\": dataAttr(readOnly),\n    \"data-hover\": dataAttr(state.context.hovered),\n    \"data-disabled\": dataAttr(disabled),\n    \"data-state\": state.context.checked ? \"checked\" : \"unchecked\",\n    \"data-invalid\": dataAttr(state.context.invalid),\n  }\n\n  return {\n    checked: checked,\n    disabled: disabled,\n    focused: focused,\n    setChecked(checked) {\n      send({ type: \"CHECKED.SET\", checked, isTrusted: false })\n    },\n    toggleChecked() {\n      send({ type: \"CHECKED.TOGGLE\", checked: checked, isTrusted: false })\n    },\n\n    getRootProps() {\n      return normalize.label({\n        ...parts.root.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onPointerMove() {\n          if (disabled) return\n          send({ type: \"CONTEXT.SET\", context: { hovered: true } })\n        },\n        onPointerLeave() {\n          if (disabled) return\n          send({ type: \"CONTEXT.SET\", context: { hovered: false } })\n        },\n        onClick(event) {\n          if (event.target === dom.getHiddenInputEl(state.context)) {\n            event.stopPropagation()\n          }\n        },\n      })\n    },\n\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n      })\n    },\n\n    getThumbProps() {\n      return normalize.element({\n        ...parts.thumb.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getThumbId(state.context),\n        \"aria-hidden\": true,\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"aria-hidden\": true,\n      })\n    },\n\n    getHiddenInputProps() {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"checkbox\",\n        required: state.context.required,\n        defaultChecked: checked,\n        disabled: disabled,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-invalid\": state.context.invalid,\n        name: state.context.name,\n        form: state.context.form,\n        value: state.context.value,\n        style: visuallyHiddenStyle,\n        onClick(event) {\n          if (readOnly) {\n            event.preventDefault()\n            return\n          }\n\n          const checked = event.currentTarget.checked\n          send({ type: \"CHECKED.SET\", checked, isTrusted: true })\n        },\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./switch.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `switch:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `switch:${ctx.id}:label`,\n  getThumbId: (ctx: Ctx) => ctx.ids?.thumb ?? `switch:${ctx.id}:thumb`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `switch:${ctx.id}:control`,\n  getHiddenInputId: (ctx: Ctx) => ctx.ids?.hiddenInput ?? `switch:${ctx.id}:input`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getHiddenInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getHiddenInputId(ctx)),\n})\n","import { createMachine, guards } from \"@zag-js/core\"\nimport { trackFocusVisible, trackPress } from \"@zag-js/dom-event\"\nimport { dispatchInputCheckedEvent, trackFormControl } from \"@zag-js/form-utils\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport { dom } from \"./switch.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./switch.types\"\n\nconst { not } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"switch\",\n      initial: \"ready\",\n\n      context: {\n        checked: false,\n        label: \"switch\",\n        value: \"on\",\n        disabled: false,\n        ...ctx,\n        fieldsetDisabled: false,\n      },\n\n      computed: {\n        isDisabled: (ctx) => ctx.disabled || ctx.fieldsetDisabled,\n      },\n\n      watch: {\n        disabled: \"removeFocusIfNeeded\",\n        checked: \"syncInputElement\",\n      },\n\n      activities: [\"trackFormControlState\", \"trackPressEvent\", \"trackFocusVisible\"],\n\n      on: {\n        \"CHECKED.TOGGLE\": [\n          {\n            guard: not(\"isTrusted\"),\n            actions: [\"toggleChecked\", \"dispatchChangeEvent\"],\n          },\n          {\n            actions: [\"toggleChecked\"],\n          },\n        ],\n        \"CHECKED.SET\": [\n          {\n            guard: not(\"isTrusted\"),\n            actions: [\"setChecked\", \"dispatchChangeEvent\"],\n          },\n          {\n            actions: [\"setChecked\"],\n          },\n        ],\n        \"CONTEXT.SET\": {\n          actions: [\"setContext\"],\n        },\n      },\n\n      states: {\n        ready: {},\n      },\n    },\n    {\n      guards: {\n        isTrusted: (_ctx, evt) => !!evt.isTrusted,\n      },\n      activities: {\n        trackPressEvent(ctx) {\n          if (ctx.isDisabled) return\n          return trackPress({\n            pointerNode: dom.getRootEl(ctx),\n            keyboardNode: dom.getHiddenInputEl(ctx),\n            isValidKey: (event) => event.key === \" \",\n            onPress: () => (ctx.active = false),\n            onPressStart: () => (ctx.active = true),\n            onPressEnd: () => (ctx.active = false),\n          })\n        },\n        trackFocusVisible(ctx) {\n          if (ctx.isDisabled) return\n          return trackFocusVisible(dom.getHiddenInputEl(ctx), {\n            onFocus: () => (ctx.focused = true),\n            onBlur: () => (ctx.focused = false),\n          })\n        },\n        trackFormControlState(ctx, _evt, { send, initialContext }) {\n          return trackFormControl(dom.getHiddenInputEl(ctx), {\n            onFieldsetDisabledChange(disabled) {\n              ctx.fieldsetDisabled = disabled\n            },\n            onFormReset() {\n              send({ type: \"CHECKED.SET\", checked: !!initialContext.checked, src: \"form-reset\" })\n            },\n          })\n        },\n      },\n\n      actions: {\n        setContext(ctx, evt) {\n          Object.assign(ctx, evt.context)\n        },\n        syncInputElement(ctx) {\n          const inputEl = dom.getHiddenInputEl(ctx)\n          if (!inputEl) return\n          inputEl.checked = !!ctx.checked\n        },\n        removeFocusIfNeeded(ctx) {\n          if (ctx.disabled && ctx.focused) {\n            ctx.focused = false\n          }\n        },\n        setChecked(ctx, evt) {\n          set.checked(ctx, evt.checked)\n        },\n        toggleChecked(ctx, _evt) {\n          set.checked(ctx, !ctx.checked)\n        },\n        dispatchChangeEvent(ctx) {\n          const inputEl = dom.getHiddenInputEl(ctx)\n          dispatchInputCheckedEvent(inputEl, { checked: ctx.checked })\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  change: (ctx: MachineContext) => {\n    ctx.onCheckedChange?.({ checked: ctx.checked })\n  },\n}\n\nconst set = {\n  checked: (ctx: MachineContext, checked: boolean) => {\n    if (isEqual(ctx.checked, checked)) return\n    ctx.checked = checked\n    invoke.change(ctx)\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./switch.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"checked\",\n  \"dir\",\n  \"disabled\",\n  \"form\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"invalid\",\n  \"label\",\n  \"name\",\n  \"onCheckedChange\",\n  \"readOnly\",\n  \"required\",\n  \"value\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}