{"ast":null,"code":"// src/clipboard.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"clipboard\").parts(\"root\", \"control\", \"trigger\", \"indicator\", \"input\", \"label\");\nvar parts = anatomy.build();\n\n// src/clipboard.connect.ts\nimport { dataAttr } from \"@zag-js/dom-query\";\n\n// src/clipboard.dom.ts\nimport { createScope, getWindow } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `clip:${ctx.id}`,\n  getInputId: ctx => ctx.ids?.input ?? `clip:${ctx.id}:input`,\n  getLabelId: ctx => ctx.ids?.label ?? `clip:${ctx.id}:label`,\n  getInputEl: ctx => dom.getById(ctx, dom.getInputId(ctx)),\n  writeToClipboard: ctx => copyText(dom.getDoc(ctx), ctx.value)\n});\nfunction createNode(doc, text) {\n  const node = doc.createElement(\"pre\");\n  Object.assign(node.style, {\n    width: \"1px\",\n    height: \"1px\",\n    position: \"fixed\",\n    top: \"5px\"\n  });\n  node.textContent = text;\n  return node;\n}\nfunction copyNode(node) {\n  const win = getWindow(node);\n  const selection = win.getSelection();\n  if (selection == null) {\n    return Promise.reject(new Error());\n  }\n  selection.removeAllRanges();\n  const doc = node.ownerDocument;\n  const range = doc.createRange();\n  range.selectNodeContents(node);\n  selection.addRange(range);\n  doc.execCommand(\"copy\");\n  selection.removeAllRanges();\n  return Promise.resolve();\n}\nfunction copyText(doc, text) {\n  const win = doc.defaultView || window;\n  if (win.navigator.clipboard?.writeText !== void 0) {\n    return win.navigator.clipboard.writeText(text);\n  }\n  if (!doc.body) {\n    return Promise.reject(new Error());\n  }\n  const node = createNode(doc, text);\n  doc.body.appendChild(node);\n  copyNode(node);\n  doc.body.removeChild(node);\n  return Promise.resolve();\n}\n\n// src/clipboard.connect.ts\nfunction connect(state, send, normalize) {\n  const copied = state.matches(\"copied\");\n  return {\n    copied,\n    value: state.context.value,\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    copy() {\n      send({\n        type: \"COPY\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-copied\": dataAttr(copied),\n        id: dom.getRootId(state.context)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        htmlFor: dom.getInputId(state.context),\n        \"data-copied\": dataAttr(copied),\n        id: dom.getLabelId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        \"data-copied\": dataAttr(copied)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        defaultValue: state.context.value,\n        \"data-copied\": dataAttr(copied),\n        readOnly: true,\n        \"data-readonly\": \"true\",\n        id: dom.getInputId(state.context),\n        onFocus(event) {\n          event.currentTarget.select();\n        },\n        onCopy() {\n          send({\n            type: \"INPUT.COPY\"\n          });\n        }\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        \"aria-label\": copied ? \"Copied to clipboard\" : \"Copy to clipboard\",\n        \"data-copied\": dataAttr(copied),\n        onClick() {\n          send({\n            type: \"COPY\"\n          });\n        }\n      });\n    },\n    getIndicatorProps(props2) {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        hidden: props2.copied !== copied\n      });\n    }\n  };\n}\n\n// src/clipboard.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { compact } from \"@zag-js/utils\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"clipboard\",\n    initial: \"idle\",\n    context: {\n      value: \"\",\n      timeout: 3e3,\n      ...ctx\n    },\n    watch: {\n      value: [\"syncInputElement\"]\n    },\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      COPY: {\n        target: \"copied\",\n        actions: [\"copyToClipboard\", \"invokeOnCopy\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"INPUT.COPY\": {\n            target: \"copied\",\n            actions: [\"invokeOnCopy\"]\n          }\n        }\n      },\n      copied: {\n        after: {\n          COPY_TIMEOUT: \"idle\"\n        },\n        on: {\n          COPY: {\n            target: \"copied\",\n            actions: [\"copyToClipboard\", \"invokeOnCopy\"]\n          },\n          \"INPUT.COPY\": {\n            actions: [\"invokeOnCopy\"]\n          }\n        }\n      }\n    }\n  }, {\n    actions: {\n      setValue(ctx2, evt) {\n        ctx2.value = evt.value;\n      },\n      copyToClipboard(ctx2) {\n        dom.writeToClipboard(ctx2);\n      },\n      invokeOnCopy(ctx2) {\n        ctx2.onStatusChange?.({\n          copied: true\n        });\n      },\n      syncInputElement(ctx2) {\n        dom.setValue(dom.getInputEl(ctx2), ctx2.value);\n      }\n    },\n    delays: {\n      COPY_TIMEOUT: ctx2 => ctx2.timeout\n    }\n  });\n}\n\n// src/clipboard.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"getRootNode\", \"id\", \"ids\", \"value\", \"timeout\", \"onStatusChange\"]);\nvar contextProps = createSplitProps(props);\nvar indicatorProps = createProps()([\"copied\"]);\nvar splitIndicatorProps = createSplitProps(indicatorProps);\nexport { anatomy, connect, contextProps, indicatorProps, machine, props, splitIndicatorProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","dataAttr","createScope","getWindow","dom","getRootId","ctx","ids","root","id","getInputId","input","getLabelId","label","getInputEl","getById","writeToClipboard","copyText","getDoc","value","createNode","doc","text","node","createElement","Object","assign","style","width","height","position","top","textContent","copyNode","win","selection","getSelection","Promise","reject","Error","removeAllRanges","ownerDocument","range","createRange","selectNodeContents","addRange","execCommand","resolve","defaultView","window","navigator","clipboard","writeText","body","appendChild","removeChild","connect","state","send","normalize","copied","matches","context","setValue","type","copy","getRootProps","element","attrs","getLabelProps","htmlFor","getControlProps","control","getInputProps","defaultValue","readOnly","onFocus","event","currentTarget","select","onCopy","getTriggerProps","button","trigger","onClick","getIndicatorProps","props2","indicator","hidden","createMachine","compact","machine","userContext","initial","timeout","watch","on","actions","COPY","target","states","idle","after","COPY_TIMEOUT","ctx2","evt","copyToClipboard","invokeOnCopy","onStatusChange","syncInputElement","delays","createProps","createSplitProps","props","contextProps","indicatorProps","splitIndicatorProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\clipboard\\src\\clipboard.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\clipboard\\src\\clipboard.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\clipboard\\src\\clipboard.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\clipboard\\src\\clipboard.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\clipboard\\src\\clipboard.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"clipboard\").parts(\"root\", \"control\", \"trigger\", \"indicator\", \"input\", \"label\")\n\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./clipboard.anatomy\"\nimport type { MachineApi, Send, State } from \"./clipboard.types\"\nimport { dom } from \"./clipboard.dom\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const copied = state.matches(\"copied\")\n\n  return {\n    copied,\n    value: state.context.value,\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n    copy() {\n      send({ type: \"COPY\" })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-copied\": dataAttr(copied),\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        htmlFor: dom.getInputId(state.context),\n        \"data-copied\": dataAttr(copied),\n        id: dom.getLabelId(state.context),\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        \"data-copied\": dataAttr(copied),\n      })\n    },\n\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        defaultValue: state.context.value,\n        \"data-copied\": dataAttr(copied),\n        readOnly: true,\n        \"data-readonly\": \"true\",\n        id: dom.getInputId(state.context),\n        onFocus(event) {\n          event.currentTarget.select()\n        },\n        onCopy() {\n          send({ type: \"INPUT.COPY\" })\n        },\n      })\n    },\n\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        \"aria-label\": copied ? \"Copied to clipboard\" : \"Copy to clipboard\",\n        \"data-copied\": dataAttr(copied),\n        onClick() {\n          send({ type: \"COPY\" })\n        },\n      })\n    },\n\n    getIndicatorProps(props) {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        hidden: props.copied !== copied,\n      })\n    },\n  }\n}\n","import { createScope, getWindow } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./clipboard.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `clip:${ctx.id}`,\n  getInputId: (ctx: Ctx) => ctx.ids?.input ?? `clip:${ctx.id}:input`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `clip:${ctx.id}:label`,\n  getInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getInputId(ctx)),\n  writeToClipboard: (ctx: Ctx) => copyText(dom.getDoc(ctx), ctx.value),\n})\n\nfunction createNode(doc: Document, text: string): HTMLElement {\n  const node = doc.createElement(\"pre\")\n  Object.assign(node.style, {\n    width: \"1px\",\n    height: \"1px\",\n    position: \"fixed\",\n    top: \"5px\",\n  })\n  node.textContent = text\n  return node\n}\n\nfunction copyNode(node: HTMLElement): Promise<void> {\n  const win = getWindow(node)\n\n  const selection = win.getSelection()\n\n  if (selection == null) {\n    return Promise.reject(new Error())\n  }\n\n  selection.removeAllRanges()\n\n  const doc = node.ownerDocument\n\n  const range = doc.createRange()\n  range.selectNodeContents(node)\n  selection.addRange(range)\n\n  doc.execCommand(\"copy\")\n  selection.removeAllRanges()\n\n  return Promise.resolve()\n}\n\nfunction copyText(doc: Document, text: string): Promise<void> {\n  const win = doc.defaultView || window\n\n  if (win.navigator.clipboard?.writeText !== undefined) {\n    return win.navigator.clipboard.writeText(text)\n  }\n\n  if (!doc.body) {\n    return Promise.reject(new Error())\n  }\n\n  const node = createNode(doc, text)\n\n  doc.body.appendChild(node)\n  copyNode(node)\n  doc.body.removeChild(node)\n\n  return Promise.resolve()\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./clipboard.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./clipboard.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"clipboard\",\n      initial: \"idle\",\n      context: {\n        value: \"\",\n        timeout: 3000,\n        ...ctx,\n      },\n      watch: {\n        value: [\"syncInputElement\"],\n      },\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"],\n        },\n        COPY: {\n          target: \"copied\",\n          actions: [\"copyToClipboard\", \"invokeOnCopy\"],\n        },\n      },\n      states: {\n        idle: {\n          on: {\n            \"INPUT.COPY\": {\n              target: \"copied\",\n              actions: [\"invokeOnCopy\"],\n            },\n          },\n        },\n        copied: {\n          after: {\n            COPY_TIMEOUT: \"idle\",\n          },\n          on: {\n            COPY: {\n              target: \"copied\",\n              actions: [\"copyToClipboard\", \"invokeOnCopy\"],\n            },\n            \"INPUT.COPY\": {\n              actions: [\"invokeOnCopy\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      actions: {\n        setValue(ctx, evt) {\n          ctx.value = evt.value\n        },\n        copyToClipboard(ctx) {\n          dom.writeToClipboard(ctx)\n        },\n        invokeOnCopy(ctx) {\n          ctx.onStatusChange?.({ copied: true })\n        },\n        syncInputElement(ctx) {\n          dom.setValue(dom.getInputEl(ctx), ctx.value)\n        },\n      },\n      delays: {\n        COPY_TIMEOUT: (ctx) => ctx.timeout,\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport type { IndicatorProps, UserDefinedContext } from \"./clipboard.types\"\nimport { createSplitProps } from \"@zag-js/utils\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"value\",\n  \"timeout\",\n  \"onStatusChange\",\n])\nexport const contextProps = createSplitProps<UserDefinedContext>(props)\n\nexport const indicatorProps = createProps<IndicatorProps>()([\"copied\"])\nexport const splitIndicatorProps = createSplitProps<IndicatorProps>(indicatorProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}