{"ast":null,"code":"// src/tree-view.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"tree-view\").parts(\"root\", \"label\", \"tree\", \"item\", \"itemIndicator\", \"itemText\", \"branch\", \"branchControl\", \"branchTrigger\", \"branchContent\", \"branchText\", \"branchIndicator\");\nvar parts = anatomy.build();\n\n// src/tree-view.connect.ts\nimport { getEventKey, isModifierKey } from \"@zag-js/dom-event\";\nimport { contains, dataAttr, getEventTarget, isComposingEvent, isEditableElement } from \"@zag-js/dom-query\";\n\n// src/tree-view.dom.ts\nimport { createScope, getByTypeahead, isHTMLElement, isHiddenElement, query, queryAll } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `tree-root:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `tree-label:${ctx.id}`,\n  getTreeId: ctx => ctx.ids?.tree ?? `tree-tree:${ctx.id}`,\n  getNodeId(node) {\n    if (!isHTMLElement(node)) return null;\n    return node.dataset.branch ?? node.dataset.item ?? null;\n  },\n  getNodeEl(ctx, id) {\n    const node = dom.getItemEl(ctx, id) ?? dom.getBranchEl(ctx, id);\n    if (node?.dataset.part === \"branch\") {\n      return query(node, \"[data-part=branch-control]\");\n    }\n    return node;\n  },\n  getTreeEl(ctx) {\n    return dom.getById(ctx, dom.getTreeId(ctx));\n  },\n  getBranchEl(ctx, id) {\n    const selector = `[role=treeitem][data-branch=\"${id}\"]`;\n    return query(dom.getTreeEl(ctx), selector);\n  },\n  getItemEl(ctx, id) {\n    const selector = `[role=treeitem][data-item=\"${id}\"]`;\n    return query(dom.getTreeEl(ctx), selector);\n  },\n  getBranchControlEl(ctx, id) {\n    const selector = \"[data-part=branch-control]\";\n    return query(dom.getBranchEl(ctx, id), selector);\n  },\n  getFocusedEl(ctx) {\n    if (!ctx.focusedValue) return null;\n    return dom.getById(ctx, ctx.focusedValue);\n  },\n  focusNode(node, options) {\n    if (isHTMLElement(node)) node.focus(options);\n  },\n  getNodeDepth(node) {\n    return node?.dataset.depth ? Number(node.dataset.depth) : -1;\n  },\n  getTreeWalker(ctx, opts) {\n    const {\n      skipHidden = true,\n      root\n    } = opts ?? {};\n    const treeEl = root || dom.getTreeEl(ctx);\n    if (!treeEl) throw new Error(\"Tree or branch root not found\");\n    const doc = dom.getDoc(ctx);\n    return doc.createTreeWalker(treeEl, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node) {\n        if (skipHidden && isHiddenElement(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        if (node.role === \"treeitem\" && node.dataset.part !== \"branch\") {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        if (node.role === \"button\" && node.dataset.part === \"branch-control\") {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n      }\n    });\n  },\n  getMatchingEl(ctx, key) {\n    const walker = dom.getTreeWalker(ctx);\n    const elements = [];\n    let node = walker.firstChild();\n    while (node) {\n      if (isHTMLElement(node)) elements.push(node);\n      node = walker.nextNode();\n    }\n    return getByTypeahead(elements, {\n      state: ctx.typeaheadState,\n      key,\n      activeId: ctx.focusedValue,\n      itemToId: v => dom.getNodeId(v) ?? v.id\n    });\n  },\n  getTreeNodes(ctx, options = {}) {\n    const walker = dom.getTreeWalker(ctx, options);\n    const nodes = [];\n    let node = walker.firstChild();\n    while (node) {\n      if (isHTMLElement(node)) {\n        nodes.push(node);\n      }\n      node = walker.nextNode();\n    }\n    return nodes;\n  },\n  getBranchNodes(ctx, depth) {\n    if (depth === -1) return [];\n    return queryAll(dom.getTreeEl(ctx), `[role=treeitem][data-part=branch][data-depth=\"${depth}\"]`);\n  },\n  getNodesInRange(nodes, startNode, endNode) {\n    const nextSet = /* @__PURE__ */new Set();\n    nodes.forEach(node => {\n      const nodeId = dom.getNodeId(node);\n      if (nodeId == null) return;\n      if (node === startNode || node === endNode) {\n        nextSet.add(nodeId);\n        return;\n      }\n      const startPos = node.compareDocumentPosition(startNode);\n      const endPos = node.compareDocumentPosition(endNode);\n      if (startPos & Node.DOCUMENT_POSITION_FOLLOWING && endPos & Node.DOCUMENT_POSITION_PRECEDING) {\n        nextSet.add(nodeId);\n        return;\n      }\n      if (startPos & Node.DOCUMENT_POSITION_PRECEDING && endPos & Node.DOCUMENT_POSITION_FOLLOWING) {\n        nextSet.add(nodeId);\n        return;\n      }\n    });\n    return Array.from(nextSet);\n  }\n});\n\n// src/tree-view.connect.ts\nfunction connect(state, send, normalize) {\n  const expandedValue = Array.from(state.context.expandedValue);\n  const selectedValue = Array.from(state.context.selectedValue);\n  const isTypingAhead = state.context.isTypingAhead;\n  const focusedValue = state.context.focusedValue;\n  function getItemState(props) {\n    return {\n      value: props.value,\n      disabled: Boolean(props.disabled),\n      focused: focusedValue === props.value,\n      selected: selectedValue.includes(props.value)\n    };\n  }\n  function getBranchState(props) {\n    return {\n      value: props.value,\n      disabled: Boolean(props.disabled),\n      focused: focusedValue === props.value,\n      expanded: expandedValue.includes(props.value),\n      selected: selectedValue.includes(props.value)\n    };\n  }\n  return {\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      if (!value) {\n        send({\n          type: \"EXPANDED.ALL\"\n        });\n        return;\n      }\n      const nextValue = new Set(expandedValue);\n      value.forEach(id => nextValue.add(id));\n      send({\n        type: \"EXPANDED.SET\",\n        value: nextValue,\n        src: \"expand\"\n      });\n    },\n    collapse(value) {\n      if (!value) {\n        send({\n          type: \"EXPANDED.SET\",\n          value: /* @__PURE__ */new Set([]),\n          src: \"collapseAll\"\n        });\n        return;\n      }\n      const nextValue = new Set(expandedValue);\n      value.forEach(id => nextValue.delete(id));\n      send({\n        type: \"EXPANDED.SET\",\n        value: nextValue,\n        src: \"collapse\"\n      });\n    },\n    deselect(value) {\n      if (!value) {\n        send({\n          type: \"SELECTED.SET\",\n          value: /* @__PURE__ */new Set([]),\n          src: \"deselectAll\"\n        });\n        return;\n      }\n      const nextValue = new Set(selectedValue);\n      value.forEach(id => nextValue.delete(id));\n      send({\n        type: \"SELECTED.SET\",\n        value: nextValue,\n        src: \"deselect\"\n      });\n    },\n    select(value) {\n      if (!value) {\n        send({\n          type: \"SELECTED.ALL\"\n        });\n        return;\n      }\n      const nextValue = new Set(selectedValue);\n      value.forEach(id => nextValue.add(id));\n      send({\n        type: \"SELECTED.SET\",\n        value: nextValue,\n        src: \"select\"\n      });\n    },\n    focusBranch(id) {\n      dom.getBranchControlEl(state.context, id)?.focus();\n    },\n    focusItem(id) {\n      dom.getItemEl(state.context, id)?.focus();\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: dom.getTreeId(state.context),\n        dir: state.context.dir,\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.selectionMode === \"multiple\" || void 0,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[role=treeitem]\");\n          if (!node) return;\n          const nodeId = dom.getNodeId(node);\n          if (nodeId == null) {\n            console.warn(`Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = !!target?.dataset.branch;\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"ITEM.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"ITEM.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH.ARROW_LEFT\" : \"ITEM.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"ITEM.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"ITEM.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH.CLICK\" : \"ITEM.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"EXPAND.SIBLINGS\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                preventScroll: true,\n                moveFocus: true\n              });\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!state.context.typeahead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        },\n        onBlur(event) {\n          if (contains(event.currentTarget, event.relatedTarget)) return;\n          send({\n            type: \"TREE.BLUR\"\n          });\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props) {\n      const itemState = getItemState(props);\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-item\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": props.depth,\n        \"data-depth\": props.depth,\n        style: {\n          \"--depth\": props.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"ITEM.FOCUS\",\n            id: itemState.value\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"ITEM.CLICK\",\n            id: itemState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props) {\n      const itemState = getItemState(props);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props) {\n      const itemState = getItemState(props);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchState,\n    getBranchProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": props.depth,\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"aria-level\": props.depth,\n        \"aria-selected\": branchState.disabled ? void 0 : branchState.selected,\n        \"data-selected\": dataAttr(branchState.selected),\n        \"aria-expanded\": branchState.expanded,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": branchState.disabled,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        style: {\n          \"--depth\": props.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-selected\": dataAttr(branchState.selected),\n        \"data-focus\": dataAttr(branchState.focused)\n      });\n    },\n    getBranchTriggerProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        onClick(event) {\n          if (branchState.disabled) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: branchState.value\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        tabIndex: branchState.focused ? 0 : -1,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-selected\": dataAttr(branchState.selected),\n        \"data-branch\": branchState.value,\n        \"data-depth\": props.depth,\n        onFocus(event) {\n          send({\n            type: \"ITEM.FOCUS\",\n            id: branchState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (branchState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH.CLICK\",\n            id: branchState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\"\n      });\n    },\n    getBranchContentProps(props) {\n      const branchState = getBranchState(props);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        hidden: !branchState.expanded\n      });\n    }\n  };\n}\n\n// src/tree-view.machine.ts\nimport { createMachine, guards } from \"@zag-js/core\";\nimport { getByTypeahead as getByTypeahead2, isHTMLElement as isHTMLElement2, observeChildren } from \"@zag-js/dom-query\";\nimport { compact } from \"@zag-js/utils\";\nvar {\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"tree-view\",\n    initial: \"idle\",\n    context: {\n      expandedValue: [],\n      selectedValue: [],\n      focusedValue: null,\n      expandOnClick: true,\n      selectionMode: \"single\",\n      typeahead: true,\n      ...ctx,\n      typeaheadState: getByTypeahead2.defaultOptions\n    },\n    computed: {\n      isMultipleSelection: ctx2 => ctx2.selectionMode === \"multiple\"\n    },\n    on: {\n      \"EXPANDED.SET\": {\n        actions: [\"setExpanded\"]\n      },\n      \"SELECTED.SET\": {\n        actions: [\"setSelected\"]\n      },\n      \"SELECTED.ALL\": [{\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllItems\", \"focusTreeLastItem\"]\n      }, {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllItems\"]\n      }],\n      \"EXPANDED.ALL\": {\n        actions: [\"expandAllBranches\"]\n      }\n    },\n    activities: [\"trackChildrenMutation\"],\n    entry: [\"setFocusableNode\"],\n    states: {\n      idle: {\n        on: {\n          \"ITEM.FOCUS\": {\n            actions: [\"setFocusedItem\"]\n          },\n          \"ITEM.ARROW_DOWN\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreeNextItem\", \"extendSelectionToNextItem\"]\n          }, {\n            actions: [\"focusTreeNextItem\"]\n          }],\n          \"ITEM.ARROW_UP\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreePrevItem\", \"extendSelectionToPrevItem\"]\n          }, {\n            actions: [\"focusTreePrevItem\"]\n          }],\n          \"ITEM.ARROW_LEFT\": {\n            actions: [\"focusBranchControl\"]\n          },\n          \"BRANCH.ARROW_LEFT\": [{\n            guard: \"isBranchExpanded\",\n            actions: [\"collapseBranch\"]\n          }, {\n            actions: [\"focusBranchControl\"]\n          }],\n          \"BRANCH.ARROW_RIGHT\": [{\n            guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n            actions: [\"focusBranchFirstItem\"]\n          }, {\n            actions: [\"expandBranch\"]\n          }],\n          \"EXPAND.SIBLINGS\": {\n            actions: [\"expandSiblingBranches\"]\n          },\n          \"ITEM.HOME\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToFirstItem\", \"focusTreeFirstItem\"]\n          }, {\n            actions: [\"focusTreeFirstItem\"]\n          }],\n          \"ITEM.END\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToLastItem\", \"focusTreeLastItem\"]\n          }, {\n            actions: [\"focusTreeLastItem\"]\n          }],\n          \"ITEM.CLICK\": [{\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"addOrRemoveItemFromSelection\"]\n          }, {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToItem\"]\n          }, {\n            actions: [\"selectItem\"]\n          }],\n          \"BRANCH.CLICK\": [{\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"addOrRemoveItemFromSelection\"]\n          }, {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToItem\"]\n          }, {\n            guard: \"openOnClick\",\n            actions: [\"selectItem\", \"toggleBranch\"]\n          }, {\n            actions: [\"selectItem\"]\n          }],\n          \"BRANCH_TOGGLE.CLICK\": {\n            actions: [\"toggleBranch\"]\n          },\n          \"TREE.TYPEAHEAD\": {\n            actions: [\"focusMatchedItem\"]\n          },\n          \"TREE.BLUR\": {\n            actions: [\"clearFocusedItem\", \"setFocusableNode\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isBranchFocused: (ctx2, evt) => ctx2.focusedValue === evt.id,\n      isBranchExpanded: (ctx2, evt) => ctx2.expandedValue.includes(evt.id),\n      isShiftKey: (_ctx, evt) => evt.shiftKey,\n      isCtrlKey: (_ctx, evt) => evt.ctrlKey,\n      hasSelectedItems: ctx2 => ctx2.selectedValue.length > 0,\n      isMultipleSelection: ctx2 => ctx2.isMultipleSelection,\n      moveFocus: (_ctx, evt) => !!evt.moveFocus,\n      openOnClick: ctx2 => !!ctx2.expandOnClick\n    },\n    activities: {\n      trackChildrenMutation(ctx2, _evt, {\n        send\n      }) {\n        const treeEl = dom.getTreeEl(ctx2);\n        return observeChildren(treeEl, {\n          callback(records) {\n            const removedNodes = records.flatMap(r => Array.from(r.removedNodes)).filter(node => {\n              if (!isHTMLElement2(node)) return false;\n              return node.matches(\"[role=treeitem]\") || node.matches(\"[role=group]\");\n            });\n            if (!removedNodes.length) return;\n            let elementToFocus = null;\n            records.forEach(record => {\n              if (isHTMLElement2(record.nextSibling)) {\n                elementToFocus = record.nextSibling;\n              } else if (isHTMLElement2(record.previousSibling)) {\n                elementToFocus = record.previousSibling;\n              }\n            });\n            if (elementToFocus) {\n              dom.focusNode(elementToFocus);\n            }\n            const removedIds = /* @__PURE__ */new Set();\n            removedNodes.forEach(node => {\n              const nodeId = dom.getNodeId(node);\n              if (isHTMLElement2(node) && nodeId != null) {\n                removedIds.add(nodeId);\n              }\n            });\n            const nextSet = new Set(ctx2.selectedValue);\n            removedIds.forEach(id => nextSet.delete(id));\n            send({\n              type: \"SELECTED.SET\",\n              value: removedIds\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      setFocusableNode(ctx2) {\n        if (ctx2.focusedValue) return;\n        if (ctx2.selectedValue.length > 0) {\n          const firstSelectedId = Array.from(ctx2.selectedValue)[0];\n          ctx2.focusedValue = firstSelectedId;\n          return;\n        }\n        const walker = dom.getTreeWalker(ctx2);\n        const firstItem = walker.firstChild();\n        if (!isHTMLElement2(firstItem)) return;\n        ctx2.focusedValue = dom.getNodeId(firstItem);\n      },\n      selectItem(ctx2, evt) {\n        set.selected(ctx2, [evt.id]);\n      },\n      setFocusedItem(ctx2, evt) {\n        set.focused(ctx2, evt.id);\n      },\n      clearFocusedItem(ctx2) {\n        set.focused(ctx2, null);\n      },\n      clearSelectedItem(ctx2) {\n        set.selected(ctx2, []);\n      },\n      toggleBranch(ctx2, evt) {\n        const nextSet = new Set(ctx2.expandedValue);\n        if (nextSet.has(evt.id)) {\n          nextSet.delete(evt.id);\n        } else {\n          nextSet.add(evt.id);\n        }\n        set.expanded(ctx2, Array.from(nextSet));\n      },\n      expandBranch(ctx2, evt) {\n        const nextSet = new Set(ctx2.expandedValue);\n        nextSet.add(evt.id);\n        set.expanded(ctx2, Array.from(nextSet));\n      },\n      collapseBranch(ctx2, evt) {\n        const nextSet = new Set(ctx2.expandedValue);\n        nextSet.delete(evt.id);\n        set.expanded(ctx2, Array.from(nextSet));\n      },\n      setExpanded(ctx2, evt) {\n        set.expanded(ctx2, evt.value);\n      },\n      setSelected(ctx2, evt) {\n        set.selected(ctx2, evt.value);\n      },\n      focusTreeFirstItem(ctx2) {\n        const walker = dom.getTreeWalker(ctx2);\n        dom.focusNode(walker.firstChild());\n      },\n      focusTreeLastItem(ctx2, evt) {\n        const walker = dom.getTreeWalker(ctx2);\n        dom.focusNode(walker.lastChild(), {\n          preventScroll: evt.preventScroll\n        });\n      },\n      focusBranchFirstItem(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const walker = dom.getTreeWalker(ctx2);\n        walker.currentNode = focusedEl;\n        dom.focusNode(walker.nextNode());\n      },\n      focusTreeNextItem(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const walker = dom.getTreeWalker(ctx2);\n        if (ctx2.focusedValue) {\n          walker.currentNode = focusedEl;\n          const nextNode = walker.nextNode();\n          dom.focusNode(nextNode);\n        } else {\n          dom.focusNode(walker.firstChild());\n        }\n      },\n      focusTreePrevItem(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const walker = dom.getTreeWalker(ctx2);\n        if (ctx2.focusedValue) {\n          walker.currentNode = focusedEl;\n          const prevNode = walker.previousNode();\n          dom.focusNode(prevNode);\n        } else {\n          dom.focusNode(walker.lastChild());\n        }\n      },\n      focusBranchControl(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const parentDepth = Number(focusedEl.dataset.depth) - 1;\n        if (parentDepth < 0) return;\n        const branchSelector = `[data-part=branch][data-depth=\"${parentDepth}\"]`;\n        const closestBranch = focusedEl.closest(branchSelector);\n        const branchControl = closestBranch?.querySelector(\"[data-part=branch-control]\");\n        dom.focusNode(branchControl);\n      },\n      selectAllItems(ctx2) {\n        const nextSet = /* @__PURE__ */new Set();\n        const walker = dom.getTreeWalker(ctx2);\n        let node = walker.firstChild();\n        while (node) {\n          const nodeId = dom.getNodeId(node);\n          if (isHTMLElement2(node) && nodeId != null) {\n            nextSet.add(nodeId);\n          }\n          node = walker.nextNode();\n        }\n        set.selected(ctx2, Array.from(nextSet));\n      },\n      focusMatchedItem(ctx2, evt) {\n        dom.focusNode(dom.getMatchingEl(ctx2, evt.key));\n      },\n      addOrRemoveItemFromSelection(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const nextSet = new Set(ctx2.selectedValue);\n        const nodeId = dom.getNodeId(focusedEl);\n        if (nodeId == null) return;\n        if (nextSet.has(nodeId)) {\n          nextSet.delete(nodeId);\n        } else {\n          nextSet.add(nodeId);\n        }\n        set.selected(ctx2, Array.from(nextSet));\n      },\n      expandAllBranches(ctx2) {\n        const nextSet = /* @__PURE__ */new Set();\n        const walker = dom.getTreeWalker(ctx2, {\n          skipHidden: false\n        });\n        while (walker.nextNode()) {\n          const node = walker.currentNode;\n          const nodeId = dom.getNodeId(node);\n          if (isHTMLElement2(node) && node.dataset.part === \"branch-control\" && nodeId != null) {\n            nextSet.add(nodeId);\n          }\n        }\n        set.expanded(ctx2, Array.from(nextSet));\n      },\n      expandSiblingBranches(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        const nodes = dom.getBranchNodes(ctx2, dom.getNodeDepth(focusedEl));\n        const nextSet = /* @__PURE__ */new Set();\n        nodes.forEach(node => {\n          const nodeId = dom.getNodeId(node);\n          if (nodeId == null) return;\n          nextSet.add(nodeId);\n        });\n        set.expanded(ctx2, Array.from(nextSet));\n      },\n      extendSelectionToItem(ctx2, evt) {\n        const focusedEl = dom.getNodeEl(ctx2, evt.id);\n        if (!focusedEl) return;\n        const nodes = dom.getTreeNodes(ctx2);\n        const selectedIds = Array.from(ctx2.selectedValue);\n        const anchorEl = dom.getNodeEl(ctx2, selectedIds[0]) || nodes[0];\n        const nextSet = dom.getNodesInRange(nodes, anchorEl, focusedEl);\n        set.selected(ctx2, nextSet);\n      },\n      extendSelectionToNextItem(ctx2, evt) {\n        const nodeId = evt.id;\n        const currentNode = dom.getNodeEl(ctx2, nodeId);\n        if (!currentNode) return;\n        const walker = dom.getTreeWalker(ctx2);\n        walker.currentNode = currentNode;\n        const nextNode = walker.nextNode();\n        dom.focusNode(nextNode);\n        const selectedIds = new Set(ctx2.selectedValue);\n        const nextNodeId = dom.getNodeId(nextNode);\n        if (nextNodeId == null) return;\n        if (selectedIds.has(nodeId) && selectedIds.has(nextNodeId)) {\n          selectedIds.delete(nodeId);\n        } else if (!selectedIds.has(nextNodeId)) {\n          selectedIds.add(nextNodeId);\n        }\n        set.selected(ctx2, Array.from(selectedIds));\n      },\n      extendSelectionToPrevItem(ctx2, evt) {\n        const nodeId = evt.id;\n        const currentNode = dom.getNodeEl(ctx2, nodeId);\n        if (!currentNode) return;\n        const walker = dom.getTreeWalker(ctx2);\n        walker.currentNode = currentNode;\n        const prevNode = walker.previousNode();\n        dom.focusNode(prevNode);\n        const selectedIds = new Set(ctx2.selectedValue);\n        const prevNodeId = dom.getNodeId(prevNode);\n        if (prevNodeId == null) return;\n        if (selectedIds.has(nodeId) && selectedIds.has(prevNodeId)) {\n          selectedIds.delete(nodeId);\n        } else if (!selectedIds.has(prevNodeId)) {\n          selectedIds.add(prevNodeId);\n        }\n        set.selected(ctx2, Array.from(selectedIds));\n      },\n      extendSelectionToFirstItem(ctx2) {\n        const nodes = dom.getTreeNodes(ctx2);\n        const anchorEl = dom.getNodeEl(ctx2, [...ctx2.selectedValue][0]) || nodes[0];\n        const focusedEl = nodes[0];\n        const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl);\n        set.selected(ctx2, selectedIds);\n      },\n      extendSelectionToLastItem(ctx2) {\n        const nodes = dom.getTreeNodes(ctx2);\n        const anchorEl = dom.getNodeEl(ctx2, [...ctx2.selectedValue][0]) || nodes[0];\n        const focusedEl = nodes[nodes.length - 1];\n        const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl);\n        set.selected(ctx2, selectedIds);\n      }\n    }\n  });\n}\nvar invoke = {\n  focusChange(ctx) {\n    ctx.onFocusChange?.({\n      focusedValue: ctx.focusedValue\n    });\n  },\n  expandedChange(ctx) {\n    ctx.onExpandedChange?.({\n      expandedValue: Array.from(ctx.expandedValue),\n      focusedValue: ctx.focusedValue\n    });\n  },\n  selectionChange(ctx) {\n    ctx.onSelectionChange?.({\n      selectedValue: Array.from(ctx.selectedValue),\n      focusedValue: ctx.focusedValue\n    });\n  }\n};\nvar set = {\n  selected(ctx, value) {\n    ctx.selectedValue = value;\n    invoke.selectionChange(ctx);\n  },\n  focused(ctx, value) {\n    ctx.focusedValue = value;\n    invoke.focusChange(ctx);\n  },\n  expanded(ctx, value) {\n    ctx.expandedValue = value;\n    invoke.expandedChange(ctx);\n  }\n};\nexport { anatomy, connect, machine };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventKey","isModifierKey","contains","dataAttr","getEventTarget","isComposingEvent","isEditableElement","createScope","getByTypeahead","isHTMLElement","isHiddenElement","query","queryAll","dom","getRootId","ctx","ids","root","id","getLabelId","label","getTreeId","tree","getNodeId","node","dataset","branch","item","getNodeEl","getItemEl","getBranchEl","part","getTreeEl","getById","selector","getBranchControlEl","getFocusedEl","focusedValue","focusNode","options","focus","getNodeDepth","depth","Number","getTreeWalker","opts","skipHidden","treeEl","Error","doc","getDoc","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_REJECT","role","FILTER_ACCEPT","FILTER_SKIP","getMatchingEl","key","walker","elements","firstChild","push","nextNode","state","typeaheadState","activeId","itemToId","v","getTreeNodes","nodes","getBranchNodes","getNodesInRange","startNode","endNode","nextSet","Set","forEach","nodeId","add","startPos","compareDocumentPosition","endPos","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","Array","from","connect","send","normalize","expandedValue","context","selectedValue","isTypingAhead","getItemState","props","value","disabled","Boolean","focused","selected","includes","getBranchState","expanded","expand","type","nextValue","src","collapse","delete","deselect","select","focusBranch","focusItem","getRootProps","element","attrs","dir","getLabelProps","getTreeProps","selectionMode","onKeyDown","event","defaultPrevented","target","closest","console","warn","isBranchNode","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","Enter","isLink","*","a","metaKey","preventScroll","moveFocus","exec","typeahead","isValidTypeahead","length","onBlur","currentTarget","relatedTarget","getItemProps","itemState","tabIndex","style","onFocus","stopPropagation","onClick","isMetaKey","ctrlKey","matches","getItemTextProps","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","branchState","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","createMachine","guards","getByTypeahead2","isHTMLElement2","observeChildren","compact","and","machine","userContext","initial","expandOnClick","defaultOptions","computed","isMultipleSelection","ctx2","on","actions","guard","activities","entry","states","idle","isBranchFocused","evt","isBranchExpanded","isShiftKey","_ctx","isCtrlKey","hasSelectedItems","openOnClick","trackChildrenMutation","_evt","callback","records","removedNodes","flatMap","r","filter","elementToFocus","record","nextSibling","previousSibling","removedIds","setFocusableNode","firstSelectedId","firstItem","selectItem","set","setFocusedItem","clearFocusedItem","clearSelectedItem","toggleBranch","has","expandBranch","collapseBranch","setExpanded","setSelected","focusTreeFirstItem","focusTreeLastItem","lastChild","focusBranchFirstItem","focusedEl","currentNode","focusTreeNextItem","focusTreePrevItem","prevNode","previousNode","focusBranchControl","parentDepth","branchSelector","closestBranch","querySelector","selectAllItems","focusMatchedItem","addOrRemoveItemFromSelection","expandAllBranches","expandSiblingBranches","extendSelectionToItem","selectedIds","anchorEl","extendSelectionToNextItem","nextNodeId","extendSelectionToPrevItem","prevNodeId","extendSelectionToFirstItem","extendSelectionToLastItem","invoke","focusChange","onFocusChange","expandedChange","onExpandedChange","selectionChange","onSelectionChange"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tree-view\\src\\tree-view.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tree-view\\src\\tree-view.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tree-view\\src\\tree-view.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tree-view\\src\\tree-view.machine.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"tree-view\").parts(\n  \"root\",\n  \"label\",\n  \"tree\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"branch\",\n  \"branchControl\",\n  \"branchTrigger\",\n  \"branchContent\",\n  \"branchText\",\n  \"branchIndicator\",\n)\n\nexport const parts = anatomy.build()\n","import { getEventKey, isModifierKey, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { contains, dataAttr, getEventTarget, isComposingEvent, isEditableElement } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./tree-view.anatomy\"\nimport { dom } from \"./tree-view.dom\"\nimport type { BranchProps, BranchState, ItemProps, ItemState, MachineApi, Send, State } from \"./tree-view.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const expandedValue = Array.from(state.context.expandedValue)\n  const selectedValue = Array.from(state.context.selectedValue)\n  const isTypingAhead = state.context.isTypingAhead\n  const focusedValue = state.context.focusedValue\n\n  function getItemState(props: ItemProps): ItemState {\n    return {\n      value: props.value,\n      disabled: Boolean(props.disabled),\n      focused: focusedValue === props.value,\n      selected: selectedValue.includes(props.value),\n    }\n  }\n\n  function getBranchState(props: BranchProps): BranchState {\n    return {\n      value: props.value,\n      disabled: Boolean(props.disabled),\n      focused: focusedValue === props.value,\n      expanded: expandedValue.includes(props.value),\n      selected: selectedValue.includes(props.value),\n    }\n  }\n\n  return {\n    expandedValue: expandedValue,\n    selectedValue: selectedValue,\n    expand(value) {\n      if (!value) {\n        send({ type: \"EXPANDED.ALL\" })\n        return\n      }\n      const nextValue = new Set(expandedValue)\n      value.forEach((id) => nextValue.add(id))\n      send({ type: \"EXPANDED.SET\", value: nextValue, src: \"expand\" })\n    },\n    collapse(value) {\n      if (!value) {\n        send({ type: \"EXPANDED.SET\", value: new Set([]), src: \"collapseAll\" })\n        return\n      }\n      const nextValue = new Set(expandedValue)\n      value.forEach((id) => nextValue.delete(id))\n      send({ type: \"EXPANDED.SET\", value: nextValue, src: \"collapse\" })\n    },\n    deselect(value) {\n      if (!value) {\n        send({ type: \"SELECTED.SET\", value: new Set([]), src: \"deselectAll\" })\n        return\n      }\n      const nextValue = new Set(selectedValue)\n      value.forEach((id) => nextValue.delete(id))\n      send({ type: \"SELECTED.SET\", value: nextValue, src: \"deselect\" })\n    },\n    select(value) {\n      if (!value) {\n        send({ type: \"SELECTED.ALL\" })\n        return\n      }\n      const nextValue = new Set(selectedValue)\n      value.forEach((id) => nextValue.add(id))\n      send({ type: \"SELECTED.SET\", value: nextValue, src: \"select\" })\n    },\n    focusBranch(id) {\n      dom.getBranchControlEl(state.context, id)?.focus()\n    },\n    focusItem(id) {\n      dom.getItemEl(state.context, id)?.focus()\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n      })\n    },\n\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir,\n      })\n    },\n\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: dom.getTreeId(state.context),\n        dir: state.context.dir,\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.selectionMode === \"multiple\" || undefined,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (isComposingEvent(event)) return\n\n          const target = getEventTarget<HTMLElement>(event)\n          // allow typing in input elements within the tree\n          if (isEditableElement(target)) return\n\n          const node = target?.closest<HTMLElement>(\"[role=treeitem]\")\n          if (!node) return\n\n          const nodeId = dom.getNodeId(node)\n          if (nodeId == null) {\n            console.warn(`Node id not found for node`, node)\n            return\n          }\n\n          const isBranchNode = !!target?.dataset.branch\n\n          const keyMap: EventKeyMap = {\n            ArrowDown(event) {\n              if (isModifierKey(event)) return\n              event.preventDefault()\n              send({ type: \"ITEM.ARROW_DOWN\", id: nodeId, shiftKey: event.shiftKey })\n            },\n            ArrowUp(event) {\n              if (isModifierKey(event)) return\n              event.preventDefault()\n              send({ type: \"ITEM.ARROW_UP\", id: nodeId, shiftKey: event.shiftKey })\n            },\n            ArrowLeft(event) {\n              if (isModifierKey(event) || node.dataset.disabled) return\n              event.preventDefault()\n              send({ type: isBranchNode ? \"BRANCH.ARROW_LEFT\" : \"ITEM.ARROW_LEFT\", id: nodeId })\n            },\n            ArrowRight(event) {\n              if (!isBranchNode || node.dataset.disabled) return\n              event.preventDefault()\n              send({ type: \"BRANCH.ARROW_RIGHT\", id: nodeId })\n            },\n            Home(event) {\n              if (isModifierKey(event)) return\n              event.preventDefault()\n              send({ type: \"ITEM.HOME\", id: nodeId, shiftKey: event.shiftKey })\n            },\n            End(event) {\n              if (isModifierKey(event)) return\n              event.preventDefault()\n              send({ type: \"ITEM.END\", id: nodeId, shiftKey: event.shiftKey })\n            },\n            Space(event) {\n              if (node.dataset.disabled) return\n\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event.key })\n              } else {\n                keyMap.Enter?.(event)\n              }\n            },\n            Enter(event) {\n              if (node.dataset.disabled) return\n\n              const isLink = target?.closest(\"a[href]\")\n              if (!isLink) event.preventDefault()\n\n              send({ type: isBranchNode ? \"BRANCH.CLICK\" : \"ITEM.CLICK\", id: nodeId, src: \"keyboard\" })\n            },\n            \"*\"(event) {\n              if (node.dataset.disabled) return\n              event.preventDefault()\n              send({ type: \"EXPAND.SIBLINGS\", id: nodeId })\n            },\n            a(event) {\n              if (!event.metaKey || node.dataset.disabled) return\n              event.preventDefault()\n              send({ type: \"SELECTED.ALL\", preventScroll: true, moveFocus: true })\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keyMap[key]\n\n          if (exec) {\n            exec(event)\n            return\n          }\n\n          if (!state.context.typeahead) return\n\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event)\n          if (!isValidTypeahead) return\n\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId })\n          event.preventDefault()\n        },\n        onBlur(event) {\n          if (contains(event.currentTarget, event.relatedTarget)) return\n          send({ type: \"TREE.BLUR\" })\n        },\n      })\n    },\n\n    getItemState,\n    getItemProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-item\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : undefined,\n        \"aria-selected\": itemState.disabled ? undefined : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": props.depth,\n        \"data-depth\": props.depth,\n        style: {\n          \"--depth\": props.depth,\n        },\n        onFocus(event) {\n          event.stopPropagation()\n          send({ type: \"ITEM.FOCUS\", id: itemState.value })\n        },\n        onClick(event) {\n          if (itemState.disabled) return\n          const isMetaKey = event.metaKey || event.ctrlKey\n          send({ type: \"ITEM.CLICK\", id: itemState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey })\n          event.stopPropagation()\n\n          const isLink = event.currentTarget.matches(\"a[href]\")\n          if (!isLink) event.preventDefault()\n        },\n      })\n    },\n\n    getItemTextProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n      })\n    },\n\n    getItemIndicatorProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected,\n      })\n    },\n\n    getBranchState,\n    getBranchProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": props.depth,\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"aria-level\": props.depth,\n        \"aria-selected\": branchState.disabled ? undefined : branchState.selected,\n        \"data-selected\": dataAttr(branchState.selected),\n        \"aria-expanded\": branchState.expanded,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": branchState.disabled,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        style: {\n          \"--depth\": props.depth,\n        },\n      })\n    },\n\n    getBranchIndicatorProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-selected\": dataAttr(branchState.selected),\n        \"data-focus\": dataAttr(branchState.focused),\n      })\n    },\n\n    getBranchTriggerProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        onClick(event) {\n          if (branchState.disabled) return\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: branchState.value })\n          event.stopPropagation()\n        },\n      })\n    },\n\n    getBranchControlProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        tabIndex: branchState.focused ? 0 : -1,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-selected\": dataAttr(branchState.selected),\n        \"data-branch\": branchState.value,\n        \"data-depth\": props.depth,\n        onFocus(event) {\n          send({ type: \"ITEM.FOCUS\", id: branchState.value })\n          event.stopPropagation()\n        },\n        onClick(event) {\n          if (branchState.disabled) return\n\n          const isMetaKey = event.metaKey || event.ctrlKey\n          send({ type: \"BRANCH.CLICK\", id: branchState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey })\n\n          event.stopPropagation()\n        },\n      })\n    },\n\n    getBranchTextProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        \"data-disabled\": dataAttr(branchState.disabled),\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n      })\n    },\n\n    getBranchContentProps(props) {\n      const branchState = getBranchState(props)\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: state.context.dir,\n        \"data-branch\": branchState.value,\n        \"data-state\": branchState.expanded ? \"open\" : \"closed\",\n        hidden: !branchState.expanded,\n      })\n    },\n  }\n}\n","import { createScope, getByTypeahead, isHTMLElement, isHiddenElement, query, queryAll } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./tree-view.types\"\n\ninterface TreeWalkerOpts {\n  skipHidden?: boolean\n  root?: HTMLElement | null\n}\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `tree-root:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `tree-label:${ctx.id}`,\n  getTreeId: (ctx: Ctx) => ctx.ids?.tree ?? `tree-tree:${ctx.id}`,\n\n  getNodeId(node: Node | null | undefined) {\n    if (!isHTMLElement(node)) return null\n    return node.dataset.branch ?? node.dataset.item ?? null\n  },\n\n  getNodeEl(ctx: Ctx, id: string) {\n    const node = dom.getItemEl(ctx, id) ?? dom.getBranchEl(ctx, id)\n    if (node?.dataset.part === \"branch\") {\n      return query(node, \"[data-part=branch-control]\")\n    }\n    return node\n  },\n\n  getTreeEl(ctx: Ctx) {\n    return dom.getById(ctx, dom.getTreeId(ctx))\n  },\n\n  getBranchEl(ctx: Ctx, id: string) {\n    const selector = `[role=treeitem][data-branch=\"${id}\"]`\n    return query(dom.getTreeEl(ctx), selector)\n  },\n  getItemEl(ctx: Ctx, id: string) {\n    const selector = `[role=treeitem][data-item=\"${id}\"]`\n    return query(dom.getTreeEl(ctx), selector)\n  },\n  getBranchControlEl(ctx: Ctx, id: string) {\n    const selector = \"[data-part=branch-control]\"\n    return query(dom.getBranchEl(ctx, id), selector)\n  },\n\n  getFocusedEl(ctx: Ctx) {\n    if (!ctx.focusedValue) return null\n    return dom.getById(ctx, ctx.focusedValue)\n  },\n\n  focusNode(node: Node | Element | null | undefined, options?: FocusOptions) {\n    if (isHTMLElement(node)) node.focus(options)\n  },\n\n  getNodeDepth(node: HTMLElement | null) {\n    return node?.dataset.depth ? Number(node.dataset.depth) : -1\n  },\n\n  getTreeWalker(ctx: Ctx, opts?: TreeWalkerOpts) {\n    const { skipHidden = true, root } = opts ?? {}\n\n    const treeEl = root || dom.getTreeEl(ctx)\n    if (!treeEl) throw new Error(\"Tree or branch root not found\")\n\n    const doc = dom.getDoc(ctx)\n\n    return doc.createTreeWalker(treeEl, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node: HTMLElement) {\n        if (skipHidden && isHiddenElement(node)) {\n          return NodeFilter.FILTER_REJECT\n        }\n\n        if (node.role === \"treeitem\" && node.dataset.part !== \"branch\") {\n          return NodeFilter.FILTER_ACCEPT\n        }\n\n        if (node.role === \"button\" && node.dataset.part === \"branch-control\") {\n          return NodeFilter.FILTER_ACCEPT\n        }\n\n        return NodeFilter.FILTER_SKIP\n      },\n    })\n  },\n\n  getMatchingEl(ctx: Ctx, key: string) {\n    const walker = dom.getTreeWalker(ctx)\n\n    const elements: HTMLElement[] = []\n    let node = walker.firstChild()\n\n    while (node) {\n      if (isHTMLElement(node)) elements.push(node)\n      node = walker.nextNode()\n    }\n\n    return getByTypeahead(elements, {\n      state: ctx.typeaheadState,\n      key,\n      activeId: ctx.focusedValue,\n      itemToId: (v) => dom.getNodeId(v) ?? v.id,\n    })\n  },\n\n  getTreeNodes(ctx: Ctx, options: TreeWalkerOpts = {}) {\n    const walker = dom.getTreeWalker(ctx, options)\n\n    const nodes: HTMLElement[] = []\n    let node = walker.firstChild()\n\n    while (node) {\n      if (isHTMLElement(node)) {\n        nodes.push(node)\n      }\n      node = walker.nextNode()\n    }\n\n    return nodes\n  },\n\n  getBranchNodes(ctx: Ctx, depth: number | null) {\n    if (depth === -1) return []\n    return queryAll(dom.getTreeEl(ctx), `[role=treeitem][data-part=branch][data-depth=\"${depth}\"]`)\n  },\n\n  getNodesInRange(nodes: HTMLElement[], startNode: HTMLElement, endNode: HTMLElement) {\n    const nextSet = new Set<string>()\n\n    nodes.forEach((node) => {\n      const nodeId = dom.getNodeId(node)\n      if (nodeId == null) return\n\n      // compare node position with firstSelectedEl and focusedEl\n      // if node is between firstSelectedEl and focusedEl, add it to nextSet\n      if (node === startNode || node === endNode) {\n        nextSet.add(nodeId)\n        return\n      }\n\n      // use node.compareDocumentPosition to compare node position\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n\n      const startPos = node.compareDocumentPosition(startNode)\n      const endPos = node.compareDocumentPosition(endNode)\n\n      // if node is before firstSelectedEl and after focusedEl, add it to nextSet\n      if (startPos & Node.DOCUMENT_POSITION_FOLLOWING && endPos & Node.DOCUMENT_POSITION_PRECEDING) {\n        nextSet.add(nodeId)\n        return\n      }\n\n      // if node is after firstSelectedEl and before focusedEl, add it to nextSet\n      if (startPos & Node.DOCUMENT_POSITION_PRECEDING && endPos & Node.DOCUMENT_POSITION_FOLLOWING) {\n        nextSet.add(nodeId)\n        return\n      }\n    })\n\n    return Array.from(nextSet)\n  },\n})\n","import { createMachine, guards } from \"@zag-js/core\"\nimport { getByTypeahead, isHTMLElement, observeChildren } from \"@zag-js/dom-query\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./tree-view.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./tree-view.types\"\n\nconst { and } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"tree-view\",\n      initial: \"idle\",\n      context: {\n        expandedValue: [],\n        selectedValue: [],\n        focusedValue: null,\n        expandOnClick: true,\n        selectionMode: \"single\",\n        typeahead: true,\n        ...ctx,\n        typeaheadState: getByTypeahead.defaultOptions,\n      },\n\n      computed: {\n        isMultipleSelection: (ctx) => ctx.selectionMode === \"multiple\",\n      },\n\n      on: {\n        \"EXPANDED.SET\": {\n          actions: [\"setExpanded\"],\n        },\n        \"SELECTED.SET\": {\n          actions: [\"setSelected\"],\n        },\n        \"SELECTED.ALL\": [\n          {\n            guard: and(\"isMultipleSelection\", \"moveFocus\"),\n            actions: [\"selectAllItems\", \"focusTreeLastItem\"],\n          },\n          {\n            guard: \"isMultipleSelection\",\n            actions: [\"selectAllItems\"],\n          },\n        ],\n        \"EXPANDED.ALL\": {\n          actions: [\"expandAllBranches\"],\n        },\n      },\n\n      activities: [\"trackChildrenMutation\"],\n\n      entry: [\"setFocusableNode\"],\n\n      states: {\n        idle: {\n          on: {\n            \"ITEM.FOCUS\": {\n              actions: [\"setFocusedItem\"],\n            },\n            \"ITEM.ARROW_DOWN\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreeNextItem\", \"extendSelectionToNextItem\"],\n              },\n              {\n                actions: [\"focusTreeNextItem\"],\n              },\n            ],\n            \"ITEM.ARROW_UP\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreePrevItem\", \"extendSelectionToPrevItem\"],\n              },\n              {\n                actions: [\"focusTreePrevItem\"],\n              },\n            ],\n            \"ITEM.ARROW_LEFT\": {\n              actions: [\"focusBranchControl\"],\n            },\n            \"BRANCH.ARROW_LEFT\": [\n              {\n                guard: \"isBranchExpanded\",\n                actions: [\"collapseBranch\"],\n              },\n              {\n                actions: [\"focusBranchControl\"],\n              },\n            ],\n            \"BRANCH.ARROW_RIGHT\": [\n              {\n                guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n                actions: [\"focusBranchFirstItem\"],\n              },\n              {\n                actions: [\"expandBranch\"],\n              },\n            ],\n            \"EXPAND.SIBLINGS\": {\n              actions: [\"expandSiblingBranches\"],\n            },\n            \"ITEM.HOME\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToFirstItem\", \"focusTreeFirstItem\"],\n              },\n              {\n                actions: [\"focusTreeFirstItem\"],\n              },\n            ],\n            \"ITEM.END\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToLastItem\", \"focusTreeLastItem\"],\n              },\n              {\n                actions: [\"focusTreeLastItem\"],\n              },\n            ],\n            \"ITEM.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"addOrRemoveItemFromSelection\"],\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToItem\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            \"BRANCH.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"addOrRemoveItemFromSelection\"],\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToItem\"],\n              },\n              {\n                guard: \"openOnClick\",\n                actions: [\"selectItem\", \"toggleBranch\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            \"BRANCH_TOGGLE.CLICK\": {\n              actions: [\"toggleBranch\"],\n            },\n            \"TREE.TYPEAHEAD\": {\n              actions: [\"focusMatchedItem\"],\n            },\n            \"TREE.BLUR\": {\n              actions: [\"clearFocusedItem\", \"setFocusableNode\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isBranchFocused: (ctx, evt) => ctx.focusedValue === evt.id,\n        isBranchExpanded: (ctx, evt) => ctx.expandedValue.includes(evt.id),\n        isShiftKey: (_ctx, evt) => evt.shiftKey,\n        isCtrlKey: (_ctx, evt) => evt.ctrlKey,\n        hasSelectedItems: (ctx) => ctx.selectedValue.length > 0,\n        isMultipleSelection: (ctx) => ctx.isMultipleSelection,\n        moveFocus: (_ctx, evt) => !!evt.moveFocus,\n        openOnClick: (ctx) => !!ctx.expandOnClick,\n      },\n      activities: {\n        trackChildrenMutation(ctx, _evt, { send }) {\n          const treeEl = dom.getTreeEl(ctx)\n          return observeChildren(treeEl, {\n            callback(records) {\n              const removedNodes = records\n                .flatMap((r) => Array.from(r.removedNodes))\n                .filter((node) => {\n                  if (!isHTMLElement(node)) return false\n                  return node.matches(\"[role=treeitem]\") || node.matches(\"[role=group]\")\n                })\n\n              if (!removedNodes.length) return\n\n              let elementToFocus: HTMLElement | null = null\n              records.forEach((record) => {\n                if (isHTMLElement(record.nextSibling)) {\n                  elementToFocus = record.nextSibling\n                } else if (isHTMLElement(record.previousSibling)) {\n                  elementToFocus = record.previousSibling\n                }\n              })\n\n              if (elementToFocus) {\n                dom.focusNode(elementToFocus)\n              }\n\n              const removedIds: Set<string> = new Set()\n              removedNodes.forEach((node) => {\n                const nodeId = dom.getNodeId(node)\n                if (isHTMLElement(node) && nodeId != null) {\n                  removedIds.add(nodeId)\n                }\n              })\n\n              const nextSet = new Set(ctx.selectedValue)\n              removedIds.forEach((id) => nextSet.delete(id))\n              send({ type: \"SELECTED.SET\", value: removedIds })\n            },\n          })\n        },\n      },\n      actions: {\n        setFocusableNode(ctx) {\n          if (ctx.focusedValue) return\n\n          if (ctx.selectedValue.length > 0) {\n            const firstSelectedId = Array.from(ctx.selectedValue)[0]\n            ctx.focusedValue = firstSelectedId\n            return\n          }\n\n          const walker = dom.getTreeWalker(ctx)\n          const firstItem = walker.firstChild()\n\n          if (!isHTMLElement(firstItem)) return\n          // don't use set.focused here because it will trigger focusChange event\n          ctx.focusedValue = dom.getNodeId(firstItem)\n        },\n        selectItem(ctx, evt) {\n          set.selected(ctx, [evt.id])\n        },\n        setFocusedItem(ctx, evt) {\n          set.focused(ctx, evt.id)\n        },\n        clearFocusedItem(ctx) {\n          set.focused(ctx, null)\n        },\n        clearSelectedItem(ctx) {\n          set.selected(ctx, [])\n        },\n        toggleBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedValue)\n\n          if (nextSet.has(evt.id)) {\n            nextSet.delete(evt.id)\n            // collapseEffect(ctx, evt)\n          } else {\n            nextSet.add(evt.id)\n          }\n\n          set.expanded(ctx, Array.from(nextSet))\n        },\n        expandBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedValue)\n          nextSet.add(evt.id)\n          set.expanded(ctx, Array.from(nextSet))\n        },\n        collapseBranch(ctx, evt) {\n          const nextSet = new Set(ctx.expandedValue)\n          nextSet.delete(evt.id)\n          set.expanded(ctx, Array.from(nextSet))\n        },\n        setExpanded(ctx, evt) {\n          set.expanded(ctx, evt.value)\n        },\n        setSelected(ctx, evt) {\n          set.selected(ctx, evt.value)\n        },\n        focusTreeFirstItem(ctx) {\n          const walker = dom.getTreeWalker(ctx)\n          dom.focusNode(walker.firstChild())\n        },\n        focusTreeLastItem(ctx, evt) {\n          const walker = dom.getTreeWalker(ctx)\n          dom.focusNode(walker.lastChild(), { preventScroll: evt.preventScroll })\n        },\n        focusBranchFirstItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          walker.currentNode = focusedEl\n          dom.focusNode(walker.nextNode())\n        },\n        focusTreeNextItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          if (ctx.focusedValue) {\n            walker.currentNode = focusedEl\n            const nextNode = walker.nextNode()\n            dom.focusNode(nextNode)\n          } else {\n            dom.focusNode(walker.firstChild())\n          }\n        },\n        focusTreePrevItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const walker = dom.getTreeWalker(ctx)\n\n          if (ctx.focusedValue) {\n            walker.currentNode = focusedEl\n            const prevNode = walker.previousNode()\n            dom.focusNode(prevNode)\n          } else {\n            dom.focusNode(walker.lastChild())\n          }\n        },\n        focusBranchControl(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const parentDepth = Number(focusedEl.dataset.depth) - 1\n          if (parentDepth < 0) return\n\n          const branchSelector = `[data-part=branch][data-depth=\"${parentDepth}\"]`\n          const closestBranch = focusedEl.closest(branchSelector)\n\n          const branchControl = closestBranch?.querySelector(\"[data-part=branch-control]\")\n          dom.focusNode(branchControl)\n        },\n        selectAllItems(ctx) {\n          const nextSet = new Set<string>()\n          const walker = dom.getTreeWalker(ctx)\n          let node = walker.firstChild()\n          while (node) {\n            const nodeId = dom.getNodeId(node)\n            if (isHTMLElement(node) && nodeId != null) {\n              nextSet.add(nodeId)\n            }\n            node = walker.nextNode()\n          }\n          set.selected(ctx, Array.from(nextSet))\n        },\n        focusMatchedItem(ctx, evt) {\n          dom.focusNode(dom.getMatchingEl(ctx, evt.key))\n        },\n        addOrRemoveItemFromSelection(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const nextSet = new Set(ctx.selectedValue)\n\n          const nodeId = dom.getNodeId(focusedEl)\n          if (nodeId == null) return\n\n          if (nextSet.has(nodeId)) {\n            nextSet.delete(nodeId)\n          } else {\n            nextSet.add(nodeId)\n          }\n\n          set.selected(ctx, Array.from(nextSet))\n        },\n        expandAllBranches(ctx) {\n          const nextSet = new Set<string>()\n          const walker = dom.getTreeWalker(ctx, { skipHidden: false })\n          while (walker.nextNode()) {\n            const node = walker.currentNode\n            const nodeId = dom.getNodeId(node)\n            if (isHTMLElement(node) && node.dataset.part === \"branch-control\" && nodeId != null) {\n              nextSet.add(nodeId)\n            }\n          }\n          set.expanded(ctx, Array.from(nextSet))\n        },\n        expandSiblingBranches(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          const nodes = dom.getBranchNodes(ctx, dom.getNodeDepth(focusedEl))\n\n          const nextSet = new Set<string>()\n          nodes.forEach((node) => {\n            const nodeId = dom.getNodeId(node)\n            if (nodeId == null) return\n            nextSet.add(nodeId)\n          })\n\n          set.expanded(ctx, Array.from(nextSet))\n        },\n        extendSelectionToItem(ctx, evt) {\n          const focusedEl = dom.getNodeEl(ctx, evt.id)\n          if (!focusedEl) return\n\n          const nodes = dom.getTreeNodes(ctx)\n          const selectedIds = Array.from(ctx.selectedValue)\n          const anchorEl = dom.getNodeEl(ctx, selectedIds[0]) || nodes[0]\n\n          const nextSet = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n\n          set.selected(ctx, nextSet)\n        },\n        extendSelectionToNextItem(ctx, evt) {\n          const nodeId = evt.id\n\n          const currentNode = dom.getNodeEl(ctx, nodeId)\n          if (!currentNode) return\n\n          const walker = dom.getTreeWalker(ctx)\n          walker.currentNode = currentNode\n\n          const nextNode = walker.nextNode()\n          dom.focusNode(nextNode)\n\n          // extend selection to nextNode (preserve the anchor node)\n          const selectedIds = new Set(ctx.selectedValue)\n          const nextNodeId = dom.getNodeId(nextNode)\n\n          if (nextNodeId == null) return\n\n          if (selectedIds.has(nodeId) && selectedIds.has(nextNodeId)) {\n            selectedIds.delete(nodeId)\n          } else if (!selectedIds.has(nextNodeId)) {\n            selectedIds.add(nextNodeId)\n          }\n\n          set.selected(ctx, Array.from(selectedIds))\n        },\n        extendSelectionToPrevItem(ctx, evt) {\n          const nodeId = evt.id\n\n          const currentNode = dom.getNodeEl(ctx, nodeId)\n          if (!currentNode) return\n\n          const walker = dom.getTreeWalker(ctx)\n          walker.currentNode = currentNode\n\n          const prevNode = walker.previousNode()\n          dom.focusNode(prevNode)\n\n          // extend selection to prevNode (preserve the anchor node)\n          const selectedIds = new Set(ctx.selectedValue)\n          const prevNodeId = dom.getNodeId(prevNode)\n\n          if (prevNodeId == null) return\n\n          if (selectedIds.has(nodeId) && selectedIds.has(prevNodeId)) {\n            selectedIds.delete(nodeId)\n          } else if (!selectedIds.has(prevNodeId)) {\n            selectedIds.add(prevNodeId)\n          }\n\n          set.selected(ctx, Array.from(selectedIds))\n        },\n        extendSelectionToFirstItem(ctx) {\n          const nodes = dom.getTreeNodes(ctx)\n\n          const anchorEl = dom.getNodeEl(ctx, [...ctx.selectedValue][0]) || nodes[0]\n          const focusedEl = nodes[0]\n\n          const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n          set.selected(ctx, selectedIds)\n        },\n        extendSelectionToLastItem(ctx) {\n          const nodes = dom.getTreeNodes(ctx)\n\n          const anchorEl = dom.getNodeEl(ctx, [...ctx.selectedValue][0]) || nodes[0]\n          const focusedEl = nodes[nodes.length - 1]\n\n          const selectedIds = dom.getNodesInRange(nodes, anchorEl, focusedEl)\n          set.selected(ctx, selectedIds)\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  focusChange(ctx: MachineContext) {\n    ctx.onFocusChange?.({ focusedValue: ctx.focusedValue! })\n  },\n  expandedChange(ctx: MachineContext) {\n    ctx.onExpandedChange?.({\n      expandedValue: Array.from(ctx.expandedValue),\n      focusedValue: ctx.focusedValue!,\n    })\n  },\n  selectionChange(ctx: MachineContext) {\n    ctx.onSelectionChange?.({\n      selectedValue: Array.from(ctx.selectedValue),\n      focusedValue: ctx.focusedValue,\n    })\n  },\n}\n\nconst set = {\n  selected(ctx: MachineContext, value: string[]) {\n    ctx.selectedValue = value\n    invoke.selectionChange(ctx)\n  },\n  focused(ctx: MachineContext, value: string | null) {\n    ctx.focusedValue = value\n    invoke.focusChange(ctx)\n  },\n  expanded(ctx: MachineContext, value: string[]) {\n    ctx.expandedValue = value\n    invoke.expandedChange(ctx)\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}