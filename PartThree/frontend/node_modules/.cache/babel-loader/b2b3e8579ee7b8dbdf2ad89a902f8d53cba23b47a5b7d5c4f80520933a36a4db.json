{"ast":null,"code":"// src/tooltip.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"tooltip\").parts(\"trigger\", \"arrow\", \"arrowTip\", \"positioner\", \"content\");\nvar parts = anatomy.build();\n\n// src/tooltip.connect.ts\nimport { dataAttr } from \"@zag-js/dom-query\";\nimport { getPlacementStyles } from \"@zag-js/popper\";\n\n// src/tooltip.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getTriggerId: ctx => ctx.ids?.trigger ?? `tooltip:${ctx.id}:trigger`,\n  getContentId: ctx => ctx.ids?.content ?? `tooltip:${ctx.id}:content`,\n  getArrowId: ctx => ctx.ids?.arrow ?? `tooltip:${ctx.id}:arrow`,\n  getPositionerId: ctx => ctx.ids?.positioner ?? `tooltip:${ctx.id}:popper`,\n  getTriggerEl: ctx => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getContentEl: ctx => dom.getById(ctx, dom.getContentId(ctx)),\n  getPositionerEl: ctx => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getArrowEl: ctx => dom.getById(ctx, dom.getArrowId(ctx))\n});\n\n// src/tooltip.store.ts\nimport { proxy } from \"@zag-js/core\";\nvar store = proxy({\n  id: null,\n  prevId: null,\n  setId(val) {\n    this.prevId = this.id;\n    this.id = val;\n  }\n});\n\n// src/tooltip.connect.ts\nfunction connect(state, send, normalize) {\n  const id = state.context.id;\n  const hasAriaLabel = state.context.hasAriaLabel;\n  const open = state.hasTag(\"open\");\n  const triggerId = dom.getTriggerId(state.context);\n  const contentId = dom.getContentId(state.context);\n  const disabled = state.context.disabled;\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: state.context.currentPlacement\n  });\n  return {\n    open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send(nextOpen ? \"OPEN\" : \"CLOSE\");\n    },\n    reposition(options = {}) {\n      send({\n        type: \"POSITIONING.SET\",\n        options\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: triggerId,\n        dir: state.context.dir,\n        \"data-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-describedby\": open ? contentId : void 0,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (!state.context.closeOnClick) return;\n          send({\n            type: \"CLOSE\",\n            src: \"trigger.click\"\n          });\n        },\n        onFocus(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (state.event.src === \"trigger.pointerdown\") return;\n          send({\n            type: \"OPEN\",\n            src: \"trigger.focus\"\n          });\n        },\n        onBlur(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (id === store.id) {\n            send({\n              type: \"CLOSE\",\n              src: \"trigger.blur\"\n            });\n          }\n        },\n        onPointerDown(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (!state.context.closeOnPointerDown) return;\n          if (id === store.id) {\n            send({\n              type: \"CLOSE\",\n              src: \"trigger.pointerdown\"\n            });\n          }\n        },\n        onPointerMove(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"POINTER_MOVE\");\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send(\"POINTER_LEAVE\");\n        },\n        onPointerCancel() {\n          if (disabled) return;\n          send(\"POINTER_LEAVE\");\n        }\n      });\n    },\n    getArrowProps() {\n      return normalize.element({\n        id: dom.getArrowId(state.context),\n        ...parts.arrow.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrow\n      });\n    },\n    getArrowTipProps() {\n      return normalize.element({\n        ...parts.arrowTip.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrowTip\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        id: dom.getPositionerId(state.context),\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        role: hasAriaLabel ? void 0 : \"tooltip\",\n        id: hasAriaLabel ? void 0 : contentId,\n        \"data-placement\": state.context.currentPlacement,\n        onPointerEnter() {\n          send(\"CONTENT.POINTER_MOVE\");\n        },\n        onPointerLeave() {\n          send(\"CONTENT.POINTER_LEAVE\");\n        },\n        style: {\n          pointerEvents: state.context.interactive ? \"auto\" : \"none\"\n        }\n      });\n    }\n  };\n}\n\n// src/tooltip.machine.ts\nimport { createMachine, guards, subscribe } from \"@zag-js/core\";\nimport { addDomEvent } from \"@zag-js/dom-event\";\nimport { getOverflowAncestors } from \"@zag-js/dom-query\";\nimport { getPlacement } from \"@zag-js/popper\";\nimport { compact } from \"@zag-js/utils\";\nvar {\n  and,\n  not\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"tooltip\",\n    initial: ctx.open ? \"open\" : \"closed\",\n    context: {\n      openDelay: 1e3,\n      closeDelay: 500,\n      closeOnPointerDown: true,\n      closeOnEscape: true,\n      interactive: false,\n      closeOnScroll: true,\n      closeOnClick: true,\n      ...ctx,\n      currentPlacement: void 0,\n      hasPointerMoveOpened: false,\n      positioning: {\n        placement: \"bottom\",\n        ...ctx.positioning\n      }\n    },\n    computed: {\n      hasAriaLabel: ctx2 => !!ctx2[\"aria-label\"]\n    },\n    watch: {\n      disabled: [\"closeIfDisabled\"],\n      open: [\"toggleVisibility\"]\n    },\n    states: {\n      closed: {\n        tags: [\"closed\"],\n        entry: [\"clearGlobalId\"],\n        on: {\n          \"CONTROLLED.OPEN\": \"open\",\n          OPEN: {\n            target: \"open\",\n            actions: [\"invokeOnOpen\"]\n          },\n          POINTER_LEAVE: {\n            actions: [\"clearPointerMoveOpened\"]\n          },\n          POINTER_MOVE: [{\n            guard: and(\"noVisibleTooltip\", not(\"hasPointerMoveOpened\")),\n            target: \"opening\"\n          }, {\n            guard: not(\"hasPointerMoveOpened\"),\n            target: \"open\",\n            actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n          }]\n        }\n      },\n      opening: {\n        tags: [\"closed\"],\n        activities: [\"trackScroll\", \"trackPointerlockChange\"],\n        after: {\n          OPEN_DELAY: [{\n            guard: \"isOpenControlled\",\n            actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n          }]\n        },\n        on: {\n          \"CONTROLLED.OPEN\": \"open\",\n          \"CONTROLLED.CLOSE\": \"closed\",\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\"]\n          }],\n          POINTER_LEAVE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n          }],\n          CLOSE: {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          }\n        }\n      },\n      open: {\n        tags: [\"open\"],\n        activities: [\"trackEscapeKey\", \"trackScroll\", \"trackPointerlockChange\", \"trackPositioning\"],\n        entry: [\"setGlobalId\"],\n        on: {\n          \"CONTROLLED.CLOSE\": \"closed\",\n          CLOSE: {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          },\n          POINTER_LEAVE: [{\n            guard: \"isVisible\",\n            target: \"closing\",\n            actions: [\"clearPointerMoveOpened\"]\n          },\n          // == group ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n          }],\n          \"CONTENT.POINTER_LEAVE\": {\n            guard: \"isInteractive\",\n            target: \"closing\"\n          },\n          \"POSITIONING.SET\": {\n            actions: \"reposition\"\n          }\n        }\n      },\n      closing: {\n        tags: [\"open\"],\n        activities: [\"trackStore\", \"trackPositioning\"],\n        after: {\n          CLOSE_DELAY: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          }]\n        },\n        on: {\n          \"CONTROLLED.CLOSE\": \"closed\",\n          \"CONTROLLED.OPEN\": \"open\",\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"closed\",\n            actions: [\"invokeOnClose\"]\n          }],\n          POINTER_MOVE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n          }],\n          \"CONTENT.POINTER_MOVE\": {\n            guard: \"isInteractive\",\n            target: \"open\"\n          },\n          \"POSITIONING.SET\": {\n            actions: \"reposition\"\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackPositioning(ctx2) {\n        ctx2.currentPlacement = ctx2.positioning.placement;\n        const getPositionerEl = () => dom.getPositionerEl(ctx2);\n        return getPlacement(dom.getTriggerEl(ctx2), getPositionerEl, {\n          ...ctx2.positioning,\n          defer: true,\n          onComplete(data) {\n            ctx2.currentPlacement = data.placement;\n          }\n        });\n      },\n      trackPointerlockChange(ctx2, _evt, {\n        send\n      }) {\n        const onChange = () => send({\n          type: \"CLOSE\",\n          src: \"pointerlock:change\"\n        });\n        return addDomEvent(dom.getDoc(ctx2), \"pointerlockchange\", onChange, false);\n      },\n      trackScroll(ctx2, _evt, {\n        send\n      }) {\n        if (!ctx2.closeOnScroll) return;\n        const triggerEl = dom.getTriggerEl(ctx2);\n        if (!triggerEl) return;\n        const overflowParents = getOverflowAncestors(triggerEl);\n        const cleanups = overflowParents.map(overflowParent => {\n          const onScroll = () => {\n            send({\n              type: \"CLOSE\",\n              src: \"scroll\"\n            });\n          };\n          return addDomEvent(overflowParent, \"scroll\", onScroll, {\n            passive: true,\n            capture: true\n          });\n        });\n        return () => {\n          cleanups.forEach(fn => fn?.());\n        };\n      },\n      trackStore(ctx2, _evt, {\n        send\n      }) {\n        return subscribe(store, () => {\n          if (store.id !== ctx2.id) {\n            send({\n              type: \"CLOSE\",\n              src: \"id.change\"\n            });\n          }\n        });\n      },\n      trackEscapeKey(ctx2, _evt, {\n        send\n      }) {\n        if (!ctx2.closeOnEscape) return;\n        const doc = dom.getDoc(ctx2);\n        return addDomEvent(doc, \"keydown\", event => {\n          if (event.key === \"Escape\") {\n            send({\n              type: \"CLOSE\",\n              src: \"keydown.escape\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      setGlobalId(ctx2) {\n        store.setId(ctx2.id);\n      },\n      clearGlobalId(ctx2) {\n        if (ctx2.id === store.id) {\n          store.setId(null);\n        }\n      },\n      invokeOnOpen(ctx2) {\n        ctx2.onOpenChange?.({\n          open: true\n        });\n      },\n      invokeOnClose(ctx2) {\n        ctx2.onOpenChange?.({\n          open: false\n        });\n      },\n      closeIfDisabled(ctx2, _evt, {\n        send\n      }) {\n        if (!ctx2.disabled) return;\n        send({\n          type: \"CLOSE\",\n          src: \"disabled:change\"\n        });\n      },\n      reposition(ctx2, evt) {\n        const getPositionerEl = () => dom.getPositionerEl(ctx2);\n        getPlacement(dom.getTriggerEl(ctx2), getPositionerEl, {\n          ...ctx2.positioning,\n          ...evt.options,\n          defer: true,\n          listeners: false,\n          onComplete(data) {\n            ctx2.currentPlacement = data.placement;\n          }\n        });\n      },\n      toggleVisibility(ctx2, evt, {\n        send\n      }) {\n        send({\n          type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: evt\n        });\n      },\n      setPointerMoveOpened(ctx2) {\n        ctx2.hasPointerMoveOpened = true;\n      },\n      clearPointerMoveOpened(ctx2) {\n        ctx2.hasPointerMoveOpened = false;\n      }\n    },\n    guards: {\n      noVisibleTooltip: () => store.id === null,\n      isVisible: ctx2 => ctx2.id === store.id,\n      isInteractive: ctx2 => ctx2.interactive,\n      hasPointerMoveOpened: ctx2 => !!ctx2.hasPointerMoveOpened,\n      isOpenControlled: ctx2 => !!ctx2[\"open.controlled\"]\n    },\n    delays: {\n      OPEN_DELAY: ctx2 => ctx2.openDelay,\n      CLOSE_DELAY: ctx2 => ctx2.closeDelay\n    }\n  });\n}\n\n// src/tooltip.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"aria-label\", \"closeDelay\", \"closeOnEscape\", \"closeOnPointerDown\", \"closeOnScroll\", \"closeOnClick\", \"dir\", \"disabled\", \"getRootNode\", \"id\", \"ids\", \"interactive\", \"onOpenChange\", \"open.controlled\", \"open\", \"openDelay\", \"positioning\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","dataAttr","getPlacementStyles","createScope","dom","getTriggerId","ctx","ids","trigger","id","getContentId","content","getArrowId","arrow","getPositionerId","positioner","getTriggerEl","getById","getContentEl","getPositionerEl","getArrowEl","proxy","store","prevId","setId","val","connect","state","send","normalize","context","hasAriaLabel","open","hasTag","triggerId","contentId","disabled","popperStyles","positioning","placement","currentPlacement","setOpen","nextOpen","reposition","options","type","getTriggerProps","button","attrs","dir","onClick","event","defaultPrevented","closeOnClick","src","onFocus","onBlur","onPointerDown","closeOnPointerDown","onPointerMove","pointerType","onPointerLeave","onPointerCancel","getArrowProps","element","style","getArrowTipProps","arrowTip","getPositionerProps","floating","getContentProps","hidden","role","onPointerEnter","pointerEvents","interactive","createMachine","guards","subscribe","addDomEvent","getOverflowAncestors","getPlacement","compact","and","not","machine","userContext","initial","openDelay","closeDelay","closeOnEscape","closeOnScroll","hasPointerMoveOpened","computed","ctx2","watch","states","closed","tags","entry","on","OPEN","target","actions","POINTER_LEAVE","POINTER_MOVE","guard","opening","activities","after","OPEN_DELAY","CLOSE","closing","CLOSE_DELAY","trackPositioning","defer","onComplete","data","trackPointerlockChange","_evt","onChange","getDoc","trackScroll","triggerEl","overflowParents","cleanups","map","overflowParent","onScroll","passive","capture","forEach","fn","trackStore","trackEscapeKey","doc","key","setGlobalId","clearGlobalId","invokeOnOpen","onOpenChange","invokeOnClose","closeIfDisabled","evt","listeners","toggleVisibility","previousEvent","setPointerMoveOpened","clearPointerMoveOpened","noVisibleTooltip","isVisible","isInteractive","isOpenControlled","delays","createProps","createSplitProps","props","splitProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.store.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tooltip\\src\\tooltip.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"tooltip\").parts(\"trigger\", \"arrow\", \"arrowTip\", \"positioner\", \"content\")\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport { getPlacementStyles } from \"@zag-js/popper\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./tooltip.anatomy\"\nimport { dom } from \"./tooltip.dom\"\nimport { store } from \"./tooltip.store\"\nimport type { MachineApi, Send, State } from \"./tooltip.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const id = state.context.id\n  const hasAriaLabel = state.context.hasAriaLabel\n\n  const open = state.hasTag(\"open\")\n\n  const triggerId = dom.getTriggerId(state.context)\n  const contentId = dom.getContentId(state.context)\n\n  const disabled = state.context.disabled\n\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: state.context.currentPlacement,\n  })\n\n  return {\n    open: open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return\n      send(nextOpen ? \"OPEN\" : \"CLOSE\")\n    },\n    reposition(options = {}) {\n      send({ type: \"POSITIONING.SET\", options })\n    },\n\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: triggerId,\n        dir: state.context.dir,\n        \"data-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-describedby\": open ? contentId : undefined,\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          if (!state.context.closeOnClick) return\n          send({ type: \"CLOSE\", src: \"trigger.click\" })\n        },\n        onFocus(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          if (state.event.src === \"trigger.pointerdown\") return\n          send({ type: \"OPEN\", src: \"trigger.focus\" })\n        },\n        onBlur(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          if (id === store.id) {\n            send({ type: \"CLOSE\", src: \"trigger.blur\" })\n          }\n        },\n        onPointerDown(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          if (!state.context.closeOnPointerDown) return\n          if (id === store.id) {\n            send({ type: \"CLOSE\", src: \"trigger.pointerdown\" })\n          }\n        },\n        onPointerMove(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n          if (event.pointerType === \"touch\") return\n          send(\"POINTER_MOVE\")\n        },\n        onPointerLeave() {\n          if (disabled) return\n          send(\"POINTER_LEAVE\")\n        },\n        onPointerCancel() {\n          if (disabled) return\n          send(\"POINTER_LEAVE\")\n        },\n      })\n    },\n\n    getArrowProps() {\n      return normalize.element({\n        id: dom.getArrowId(state.context),\n        ...parts.arrow.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrow,\n      })\n    },\n\n    getArrowTipProps() {\n      return normalize.element({\n        ...parts.arrowTip.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrowTip,\n      })\n    },\n\n    getPositionerProps() {\n      return normalize.element({\n        id: dom.getPositionerId(state.context),\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        style: popperStyles.floating,\n      })\n    },\n\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        role: hasAriaLabel ? undefined : \"tooltip\",\n        id: hasAriaLabel ? undefined : contentId,\n        \"data-placement\": state.context.currentPlacement,\n        onPointerEnter() {\n          send(\"CONTENT.POINTER_MOVE\")\n        },\n        onPointerLeave() {\n          send(\"CONTENT.POINTER_LEAVE\")\n        },\n        style: {\n          pointerEvents: state.context.interactive ? \"auto\" : \"none\",\n        },\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./tooltip.types\"\n\nexport const dom = createScope({\n  getTriggerId: (ctx: Ctx) => ctx.ids?.trigger ?? `tooltip:${ctx.id}:trigger`,\n  getContentId: (ctx: Ctx) => ctx.ids?.content ?? `tooltip:${ctx.id}:content`,\n  getArrowId: (ctx: Ctx) => ctx.ids?.arrow ?? `tooltip:${ctx.id}:arrow`,\n  getPositionerId: (ctx: Ctx) => ctx.ids?.positioner ?? `tooltip:${ctx.id}:popper`,\n\n  getTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getContentEl: (ctx: Ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getPositionerEl: (ctx: Ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getArrowEl: (ctx: Ctx) => dom.getById(ctx, dom.getArrowId(ctx)),\n})\n","import { proxy } from \"@zag-js/core\"\n\ntype Id = string | null\n\ninterface TooltipStore {\n  id: Id\n  prevId: Id\n  setId: (val: Id) => void\n}\n\nexport const store = proxy<TooltipStore>({\n  id: null,\n  prevId: null,\n  setId(val) {\n    this.prevId = this.id\n    this.id = val\n  },\n})\n","import { createMachine, guards, subscribe } from \"@zag-js/core\"\nimport { addDomEvent } from \"@zag-js/dom-event\"\nimport { getOverflowAncestors } from \"@zag-js/dom-query\"\nimport { getPlacement } from \"@zag-js/popper\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./tooltip.dom\"\nimport { store } from \"./tooltip.store\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./tooltip.types\"\n\nconst { and, not } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"tooltip\",\n      initial: ctx.open ? \"open\" : \"closed\",\n\n      context: {\n        openDelay: 1000,\n        closeDelay: 500,\n        closeOnPointerDown: true,\n        closeOnEscape: true,\n        interactive: false,\n        closeOnScroll: true,\n        closeOnClick: true,\n        ...ctx,\n        currentPlacement: undefined,\n        hasPointerMoveOpened: false,\n        positioning: {\n          placement: \"bottom\",\n          ...ctx.positioning,\n        },\n      },\n\n      computed: {\n        hasAriaLabel: (ctx) => !!ctx[\"aria-label\"],\n      },\n\n      watch: {\n        disabled: [\"closeIfDisabled\"],\n        open: [\"toggleVisibility\"],\n      },\n\n      states: {\n        closed: {\n          tags: [\"closed\"],\n          entry: [\"clearGlobalId\"],\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: {\n              target: \"open\",\n              actions: [\"invokeOnOpen\"],\n            },\n            POINTER_LEAVE: {\n              actions: [\"clearPointerMoveOpened\"],\n            },\n            POINTER_MOVE: [\n              {\n                guard: and(\"noVisibleTooltip\", not(\"hasPointerMoveOpened\")),\n                target: \"opening\",\n              },\n              {\n                guard: not(\"hasPointerMoveOpened\"),\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"],\n              },\n            ],\n          },\n        },\n\n        opening: {\n          tags: [\"closed\"],\n          activities: [\"trackScroll\", \"trackPointerlockChange\"],\n          after: {\n            OPEN_DELAY: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"],\n              },\n            ],\n          },\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            \"CONTROLLED.CLOSE\": \"closed\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\"],\n              },\n            ],\n            POINTER_LEAVE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"],\n              },\n              {\n                target: \"closed\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"],\n              },\n            ],\n            CLOSE: {\n              target: \"closed\",\n              actions: [\"invokeOnClose\"],\n            },\n          },\n        },\n\n        open: {\n          tags: [\"open\"],\n          activities: [\"trackEscapeKey\", \"trackScroll\", \"trackPointerlockChange\", \"trackPositioning\"],\n          entry: [\"setGlobalId\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            CLOSE: {\n              target: \"closed\",\n              actions: [\"invokeOnClose\"],\n            },\n            POINTER_LEAVE: [\n              {\n                guard: \"isVisible\",\n                target: \"closing\",\n                actions: [\"clearPointerMoveOpened\"],\n              },\n              // == group ==\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"],\n              },\n              {\n                target: \"closed\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"],\n              },\n            ],\n            \"CONTENT.POINTER_LEAVE\": {\n              guard: \"isInteractive\",\n              target: \"closing\",\n            },\n            \"POSITIONING.SET\": {\n              actions: \"reposition\",\n            },\n          },\n        },\n\n        closing: {\n          tags: [\"open\"],\n          activities: [\"trackStore\", \"trackPositioning\"],\n          after: {\n            CLOSE_DELAY: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"closed\",\n                actions: [\"invokeOnClose\"],\n              },\n            ],\n          },\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            \"CONTROLLED.OPEN\": \"open\",\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"closed\",\n                actions: [\"invokeOnClose\"],\n              },\n            ],\n            POINTER_MOVE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"],\n              },\n            ],\n            \"CONTENT.POINTER_MOVE\": {\n              guard: \"isInteractive\",\n              target: \"open\",\n            },\n            \"POSITIONING.SET\": {\n              actions: \"reposition\",\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackPositioning(ctx) {\n          ctx.currentPlacement = ctx.positioning.placement\n          const getPositionerEl = () => dom.getPositionerEl(ctx)\n          return getPlacement(dom.getTriggerEl(ctx), getPositionerEl, {\n            ...ctx.positioning,\n            defer: true,\n            onComplete(data) {\n              ctx.currentPlacement = data.placement\n            },\n          })\n        },\n        trackPointerlockChange(ctx, _evt, { send }) {\n          const onChange = () => send({ type: \"CLOSE\", src: \"pointerlock:change\" })\n          return addDomEvent(dom.getDoc(ctx), \"pointerlockchange\", onChange, false)\n        },\n        trackScroll(ctx, _evt, { send }) {\n          if (!ctx.closeOnScroll) return\n\n          const triggerEl = dom.getTriggerEl(ctx)\n          if (!triggerEl) return\n\n          const overflowParents = getOverflowAncestors(triggerEl)\n\n          const cleanups = overflowParents.map((overflowParent) => {\n            const onScroll = () => {\n              send({ type: \"CLOSE\", src: \"scroll\" })\n            }\n            return addDomEvent(overflowParent, \"scroll\", onScroll, { passive: true, capture: true })\n          })\n\n          return () => {\n            cleanups.forEach((fn) => fn?.())\n          }\n        },\n        trackStore(ctx, _evt, { send }) {\n          return subscribe(store, () => {\n            if (store.id !== ctx.id) {\n              send({ type: \"CLOSE\", src: \"id.change\" })\n            }\n          })\n        },\n        trackEscapeKey(ctx, _evt, { send }) {\n          if (!ctx.closeOnEscape) return\n          const doc = dom.getDoc(ctx)\n          return addDomEvent(doc, \"keydown\", (event) => {\n            if (event.key === \"Escape\") {\n              send({ type: \"CLOSE\", src: \"keydown.escape\" })\n            }\n          })\n        },\n      },\n      actions: {\n        setGlobalId(ctx) {\n          store.setId(ctx.id)\n        },\n        clearGlobalId(ctx) {\n          if (ctx.id === store.id) {\n            store.setId(null)\n          }\n        },\n        invokeOnOpen(ctx) {\n          ctx.onOpenChange?.({ open: true })\n        },\n        invokeOnClose(ctx) {\n          ctx.onOpenChange?.({ open: false })\n        },\n        closeIfDisabled(ctx, _evt, { send }) {\n          if (!ctx.disabled) return\n          send({ type: \"CLOSE\", src: \"disabled:change\" })\n        },\n        reposition(ctx, evt) {\n          const getPositionerEl = () => dom.getPositionerEl(ctx)\n          getPlacement(dom.getTriggerEl(ctx), getPositionerEl, {\n            ...ctx.positioning,\n            ...evt.options,\n            defer: true,\n            listeners: false,\n            onComplete(data) {\n              ctx.currentPlacement = data.placement\n            },\n          })\n        },\n        toggleVisibility(ctx, evt, { send }) {\n          send({ type: ctx.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: evt })\n        },\n        setPointerMoveOpened(ctx) {\n          ctx.hasPointerMoveOpened = true\n        },\n        clearPointerMoveOpened(ctx) {\n          ctx.hasPointerMoveOpened = false\n        },\n      },\n      guards: {\n        noVisibleTooltip: () => store.id === null,\n        isVisible: (ctx) => ctx.id === store.id,\n        isInteractive: (ctx) => ctx.interactive,\n        hasPointerMoveOpened: (ctx) => !!ctx.hasPointerMoveOpened,\n        isOpenControlled: (ctx) => !!ctx[\"open.controlled\"],\n      },\n      delays: {\n        OPEN_DELAY: (ctx) => ctx.openDelay,\n        CLOSE_DELAY: (ctx) => ctx.closeDelay,\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./tooltip.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"aria-label\",\n  \"closeDelay\",\n  \"closeOnEscape\",\n  \"closeOnPointerDown\",\n  \"closeOnScroll\",\n  \"closeOnClick\",\n  \"dir\",\n  \"disabled\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"interactive\",\n  \"onOpenChange\",\n  \"open.controlled\",\n  \"open\",\n  \"openDelay\",\n  \"positioning\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}