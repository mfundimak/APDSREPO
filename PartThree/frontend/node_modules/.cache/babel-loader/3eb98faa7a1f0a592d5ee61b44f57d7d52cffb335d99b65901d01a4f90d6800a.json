{"ast":null,"code":"// src/pagination.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"pagination\").parts(\"root\", \"item\", \"ellipsis\", \"prevTrigger\", \"nextTrigger\");\nvar parts = anatomy.build();\n\n// src/pagination.connect.ts\nimport { dataAttr } from \"@zag-js/dom-query\";\n\n// src/pagination.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `pagination:${ctx.id}`,\n  getPrevTriggerId: ctx => ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`,\n  getNextTriggerId: ctx => ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`,\n  getEllipsisId: (ctx, index) => ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`,\n  getItemId: (ctx, page) => ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`\n});\n\n// src/pagination.utils.ts\nvar range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\nvar transform = items => {\n  return items.map(value => {\n    if (typeof value === \"number\") return {\n      type: \"page\",\n      value\n    };\n    return {\n      type: \"ellipsis\"\n    };\n  });\n};\nvar ELLIPSIS = \"ellipsis\";\nvar getRange = ctx => {\n  const totalPageNumbers = Math.min(2 * ctx.siblingCount + 5, ctx.totalPages);\n  const firstPageIndex = 1;\n  const lastPageIndex = ctx.totalPages;\n  const leftSiblingIndex = Math.max(ctx.page - ctx.siblingCount, firstPageIndex);\n  const rightSiblingIndex = Math.min(ctx.page + ctx.siblingCount, lastPageIndex);\n  const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1;\n  const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1;\n  const itemCount = totalPageNumbers - 2;\n  if (!showLeftEllipsis && showRightEllipsis) {\n    const leftRange = range(1, itemCount);\n    return [...leftRange, ELLIPSIS, lastPageIndex];\n  }\n  if (showLeftEllipsis && !showRightEllipsis) {\n    const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex);\n    return [firstPageIndex, ELLIPSIS, ...rightRange];\n  }\n  if (showLeftEllipsis && showRightEllipsis) {\n    const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n    return [firstPageIndex, ELLIPSIS, ...middleRange, ELLIPSIS, lastPageIndex];\n  }\n  const fullRange = range(firstPageIndex, lastPageIndex);\n  return fullRange;\n};\nvar getTransformedRange = ctx => transform(getRange(ctx));\n\n// src/pagination.connect.ts\nfunction connect(state, send, normalize) {\n  const totalPages = state.context.totalPages;\n  const page = state.context.page;\n  const translations = state.context.translations;\n  const previousPage = state.context.previousPage;\n  const nextPage = state.context.nextPage;\n  const pageRange = state.context.pageRange;\n  const type = state.context.type;\n  const isButton = type === \"button\";\n  const isFirstPage = page === 1;\n  const isLastPage = page === totalPages;\n  const pages = getTransformedRange(state.context);\n  return {\n    page,\n    pageSize: state.context.pageSize,\n    totalPages,\n    pages,\n    previousPage,\n    nextPage,\n    pageRange,\n    slice(data) {\n      return data.slice(pageRange.start, pageRange.end);\n    },\n    setCount(count) {\n      send({\n        type: \"SET_COUNT\",\n        count\n      });\n    },\n    setPageSize(size) {\n      send({\n        type: \"SET_PAGE_SIZE\",\n        size\n      });\n    },\n    setPage(page2) {\n      send({\n        type: \"SET_PAGE\",\n        page: page2\n      });\n    },\n    goToNextPage() {\n      send({\n        type: \"NEXT_PAGE\"\n      });\n    },\n    goToPrevPage() {\n      send({\n        type: \"PREVIOUS_PAGE\"\n      });\n    },\n    goToFirstPage() {\n      send({\n        type: \"FIRST_PAGE\"\n      });\n    },\n    goToLastPage() {\n      send({\n        type: \"LAST_PAGE\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        \"aria-label\": translations.rootLabel\n      });\n    },\n    getEllipsisProps(props2) {\n      return normalize.element({\n        id: dom.getEllipsisId(state.context, props2.index),\n        ...parts.ellipsis.attrs,\n        dir: state.context.dir\n      });\n    },\n    getItemProps(props2) {\n      const index = props2.value;\n      const isCurrentPage = index === state.context.page;\n      return normalize.element({\n        id: dom.getItemId(state.context, index),\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-index\": index,\n        \"data-selected\": dataAttr(isCurrentPage),\n        \"aria-current\": isCurrentPage ? \"page\" : void 0,\n        \"aria-label\": translations.itemLabel?.({\n          page: index,\n          totalPages\n        }),\n        onClick() {\n          send({\n            type: \"SET_PAGE\",\n            page: index\n          });\n        },\n        ...(isButton && {\n          type: \"button\"\n        })\n      });\n    },\n    getPrevTriggerProps() {\n      return normalize.element({\n        id: dom.getPrevTriggerId(state.context),\n        ...parts.prevTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isFirstPage),\n        \"aria-label\": translations.prevTriggerLabel,\n        onClick() {\n          send({\n            type: \"PREVIOUS_PAGE\"\n          });\n        },\n        ...(isButton && {\n          disabled: isFirstPage,\n          type: \"button\"\n        })\n      });\n    },\n    getNextTriggerProps() {\n      return normalize.element({\n        id: dom.getNextTriggerId(state.context),\n        ...parts.nextTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isLastPage),\n        \"aria-label\": translations.nextTriggerLabel,\n        onClick() {\n          send({\n            type: \"NEXT_PAGE\"\n          });\n        },\n        ...(isButton && {\n          disabled: isLastPage,\n          type: \"button\"\n        })\n      });\n    }\n  };\n}\n\n// src/pagination.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { compact, isEqual } from \"@zag-js/utils\";\nvar defaultTranslations = {\n  rootLabel: \"pagination\",\n  prevTriggerLabel: \"previous page\",\n  nextTriggerLabel: \"next page\",\n  itemLabel({\n    page,\n    totalPages\n  }) {\n    const isLastPage = totalPages > 1 && page === totalPages;\n    return `${isLastPage ? \"last page, \" : \"\"}page ${page}`;\n  }\n};\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"pagination\",\n    initial: \"idle\",\n    context: {\n      pageSize: 10,\n      siblingCount: 1,\n      page: 1,\n      type: \"button\",\n      translations: {\n        ...defaultTranslations,\n        ...ctx.translations\n      },\n      ...ctx\n    },\n    watch: {\n      pageSize: [\"setPageIfNeeded\"]\n    },\n    computed: {\n      totalPages: ctx2 => Math.ceil(ctx2.count / ctx2.pageSize),\n      previousPage: ctx2 => ctx2.page === 1 ? null : ctx2.page - 1,\n      nextPage: ctx2 => ctx2.page === ctx2.totalPages ? null : ctx2.page + 1,\n      pageRange: ctx2 => {\n        const start = (ctx2.page - 1) * ctx2.pageSize;\n        const end = start + ctx2.pageSize;\n        return {\n          start,\n          end\n        };\n      },\n      isValidPage: ctx2 => ctx2.page >= 1 && ctx2.page <= ctx2.totalPages\n    },\n    on: {\n      SET_COUNT: [{\n        guard: \"isValidCount\",\n        actions: [\"setCount\", \"goToFirstPage\"]\n      }, {\n        actions: \"setCount\"\n      }],\n      SET_PAGE: {\n        guard: \"isValidPage\",\n        actions: \"setPage\"\n      },\n      SET_PAGE_SIZE: {\n        actions: \"setPageSize\"\n      },\n      FIRST_PAGE: {\n        actions: \"goToFirstPage\"\n      },\n      LAST_PAGE: {\n        actions: \"goToLastPage\"\n      },\n      PREVIOUS_PAGE: {\n        guard: \"canGoToPrevPage\",\n        actions: \"goToPrevPage\"\n      },\n      NEXT_PAGE: {\n        guard: \"canGoToNextPage\",\n        actions: \"goToNextPage\"\n      }\n    },\n    states: {\n      idle: {}\n    }\n  }, {\n    guards: {\n      isValidPage: (ctx2, evt) => evt.page >= 1 && evt.page <= ctx2.totalPages,\n      isValidCount: (ctx2, evt) => ctx2.page > evt.count,\n      canGoToNextPage: ctx2 => ctx2.page < ctx2.totalPages,\n      canGoToPrevPage: ctx2 => ctx2.page > 1\n    },\n    actions: {\n      setCount(ctx2, evt) {\n        ctx2.count = evt.count;\n      },\n      setPage(ctx2, evt) {\n        set.page(ctx2, evt.page);\n      },\n      setPageSize(ctx2, evt) {\n        set.pageSize(ctx2, evt.size);\n      },\n      goToFirstPage(ctx2) {\n        set.page(ctx2, 1);\n      },\n      goToLastPage(ctx2) {\n        set.page(ctx2, ctx2.totalPages);\n      },\n      goToPrevPage(ctx2) {\n        set.page(ctx2, ctx2.page - 1);\n      },\n      goToNextPage(ctx2) {\n        set.page(ctx2, ctx2.page + 1);\n      },\n      setPageIfNeeded(ctx2, _evt) {\n        if (ctx2.isValidPage) return;\n        set.page(ctx2, 1);\n      }\n    }\n  });\n}\nvar clampPage = (page, totalPages) => Math.min(Math.max(page, 1), totalPages);\nvar set = {\n  pageSize: (ctx, value) => {\n    if (isEqual(ctx.pageSize, value)) return;\n    ctx.pageSize = value;\n    ctx.onPageSizeChange?.({\n      pageSize: ctx.pageSize\n    });\n  },\n  page: (ctx, value) => {\n    if (isEqual(ctx.page, value)) return;\n    ctx.page = clampPage(value, ctx.totalPages);\n    ctx.onPageChange?.({\n      page: ctx.page,\n      pageSize: ctx.pageSize\n    });\n  }\n};\n\n// src/pagination.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"count\", \"dir\", \"getRootNode\", \"id\", \"ids\", \"onPageChange\", \"onPageSizeChange\", \"page\", \"pageSize\", \"siblingCount\", \"translations\", \"type\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"value\", \"type\"]);\nvar splitItemProps = createSplitProps(itemProps);\nvar ellipsisProps = createProps()([\"index\"]);\nvar splitEllipsisProps = createSplitProps(ellipsisProps);\nexport { anatomy, connect, ellipsisProps, itemProps, machine, props, splitEllipsisProps, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","dataAttr","createScope","dom","getRootId","ctx","ids","root","id","getPrevTriggerId","prevTrigger","getNextTriggerId","nextTrigger","getEllipsisId","index","ellipsis","getItemId","page","item","range","start","end","length","Array","from","_","idx","transform","items","map","value","type","ELLIPSIS","getRange","totalPageNumbers","Math","min","siblingCount","totalPages","firstPageIndex","lastPageIndex","leftSiblingIndex","max","rightSiblingIndex","showLeftEllipsis","showRightEllipsis","itemCount","leftRange","rightRange","middleRange","fullRange","getTransformedRange","connect","state","send","normalize","context","translations","previousPage","nextPage","pageRange","isButton","isFirstPage","isLastPage","pages","pageSize","slice","data","setCount","count","setPageSize","size","setPage","page2","goToNextPage","goToPrevPage","goToFirstPage","goToLastPage","getRootProps","element","attrs","dir","rootLabel","getEllipsisProps","props2","getItemProps","isCurrentPage","itemLabel","onClick","getPrevTriggerProps","prevTriggerLabel","disabled","getNextTriggerProps","nextTriggerLabel","createMachine","compact","isEqual","defaultTranslations","machine","userContext","initial","watch","computed","ctx2","ceil","isValidPage","on","SET_COUNT","guard","actions","SET_PAGE","SET_PAGE_SIZE","FIRST_PAGE","LAST_PAGE","PREVIOUS_PAGE","NEXT_PAGE","states","idle","guards","evt","isValidCount","canGoToNextPage","canGoToPrevPage","set","setPageIfNeeded","_evt","clampPage","onPageSizeChange","onPageChange","createProps","createSplitProps","props","splitProps","itemProps","splitItemProps","ellipsisProps","splitEllipsisProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.utils.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\pagination\\src\\pagination.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"pagination\").parts(\"root\", \"item\", \"ellipsis\", \"prevTrigger\", \"nextTrigger\")\n\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./pagination.anatomy\"\nimport { dom } from \"./pagination.dom\"\nimport type { MachineApi, Send, State } from \"./pagination.types\"\nimport { getTransformedRange } from \"./pagination.utils\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const totalPages = state.context.totalPages\n  const page = state.context.page\n  const translations = state.context.translations\n\n  const previousPage = state.context.previousPage\n  const nextPage = state.context.nextPage\n  const pageRange = state.context.pageRange\n\n  const type = state.context.type\n  const isButton = type === \"button\"\n\n  const isFirstPage = page === 1\n  const isLastPage = page === totalPages\n  const pages = getTransformedRange(state.context)\n\n  return {\n    page,\n    pageSize: state.context.pageSize,\n    totalPages,\n    pages,\n    previousPage,\n    nextPage,\n    pageRange,\n    slice(data) {\n      return data.slice(pageRange.start, pageRange.end)\n    },\n    setCount(count) {\n      send({ type: \"SET_COUNT\", count })\n    },\n    setPageSize(size) {\n      send({ type: \"SET_PAGE_SIZE\", size })\n    },\n    setPage(page) {\n      send({ type: \"SET_PAGE\", page })\n    },\n    goToNextPage() {\n      send({ type: \"NEXT_PAGE\" })\n    },\n    goToPrevPage() {\n      send({ type: \"PREVIOUS_PAGE\" })\n    },\n    goToFirstPage() {\n      send({ type: \"FIRST_PAGE\" })\n    },\n    goToLastPage() {\n      send({ type: \"LAST_PAGE\" })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        \"aria-label\": translations.rootLabel,\n      })\n    },\n\n    getEllipsisProps(props) {\n      return normalize.element({\n        id: dom.getEllipsisId(state.context, props.index),\n        ...parts.ellipsis.attrs,\n        dir: state.context.dir,\n      })\n    },\n\n    getItemProps(props) {\n      const index = props.value\n      const isCurrentPage = index === state.context.page\n\n      return normalize.element({\n        id: dom.getItemId(state.context, index),\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-index\": index,\n        \"data-selected\": dataAttr(isCurrentPage),\n        \"aria-current\": isCurrentPage ? \"page\" : undefined,\n        \"aria-label\": translations.itemLabel?.({ page: index, totalPages }),\n        onClick() {\n          send({ type: \"SET_PAGE\", page: index })\n        },\n        ...(isButton && { type: \"button\" }),\n      })\n    },\n\n    getPrevTriggerProps() {\n      return normalize.element({\n        id: dom.getPrevTriggerId(state.context),\n        ...parts.prevTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isFirstPage),\n        \"aria-label\": translations.prevTriggerLabel,\n        onClick() {\n          send({ type: \"PREVIOUS_PAGE\" })\n        },\n        ...(isButton && { disabled: isFirstPage, type: \"button\" }),\n      })\n    },\n\n    getNextTriggerProps() {\n      return normalize.element({\n        id: dom.getNextTriggerId(state.context),\n        ...parts.nextTrigger.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(isLastPage),\n        \"aria-label\": translations.nextTriggerLabel,\n        onClick() {\n          send({ type: \"NEXT_PAGE\" })\n        },\n        ...(isButton && { disabled: isLastPage, type: \"button\" }),\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./pagination.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `pagination:${ctx.id}`,\n  getPrevTriggerId: (ctx: Ctx) => ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`,\n  getNextTriggerId: (ctx: Ctx) => ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`,\n  getEllipsisId: (ctx: Ctx, index: number) => ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`,\n  getItemId: (ctx: Ctx, page: number) => ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`,\n})\n","import type { MachineContext as Ctx, Pages } from \"./pagination.types\"\n\nexport const range = (start: number, end: number) => {\n  let length = end - start + 1\n  return Array.from({ length }, (_, idx) => idx + start)\n}\n\nexport const transform = (items: (string | number)[]): Pages => {\n  return items.map((value) => {\n    if (typeof value === \"number\") return { type: \"page\", value }\n    return { type: \"ellipsis\" }\n  })\n}\n\nconst ELLIPSIS = \"ellipsis\"\n\nexport type PageContext = Pick<Ctx, \"siblingCount\" | \"page\" | \"totalPages\">\n\nexport const getRange = (ctx: PageContext) => {\n  /**\n   * `2 * ctx.siblingCount + 5` explanation:\n   * 2 * ctx.siblingCount for left/right siblings\n   * 5 for 2x left/right ellipsis, 2x first/last page + 1x current page\n   *\n   * For some page counts (e.g. totalPages: 8, siblingCount: 2),\n   * calculated max page is higher than total pages,\n   * so we need to take the minimum of both.\n   */\n  const totalPageNumbers = Math.min(2 * ctx.siblingCount + 5, ctx.totalPages)\n\n  const firstPageIndex = 1\n  const lastPageIndex = ctx.totalPages\n\n  const leftSiblingIndex = Math.max(ctx.page - ctx.siblingCount, firstPageIndex)\n  const rightSiblingIndex = Math.min(ctx.page + ctx.siblingCount, lastPageIndex)\n\n  const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1\n  const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1\n\n  const itemCount = totalPageNumbers - 2 // 2 stands for one ellipsis and either first or last page\n\n  if (!showLeftEllipsis && showRightEllipsis) {\n    const leftRange = range(1, itemCount)\n    return [...leftRange, ELLIPSIS, lastPageIndex]\n  }\n\n  if (showLeftEllipsis && !showRightEllipsis) {\n    const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex)\n    return [firstPageIndex, ELLIPSIS, ...rightRange]\n  }\n\n  if (showLeftEllipsis && showRightEllipsis) {\n    const middleRange = range(leftSiblingIndex, rightSiblingIndex)\n    return [firstPageIndex, ELLIPSIS, ...middleRange, ELLIPSIS, lastPageIndex]\n  }\n\n  const fullRange = range(firstPageIndex, lastPageIndex)\n  return fullRange\n}\n\nexport const getTransformedRange = (ctx: PageContext) => transform(getRange(ctx))\n","import { createMachine } from \"@zag-js/core\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport type { IntlTranslations, MachineContext, MachineState, UserDefinedContext } from \"./pagination.types\"\n\nconst defaultTranslations: IntlTranslations = {\n  rootLabel: \"pagination\",\n  prevTriggerLabel: \"previous page\",\n  nextTriggerLabel: \"next page\",\n  itemLabel({ page, totalPages }) {\n    const isLastPage = totalPages > 1 && page === totalPages\n    return `${isLastPage ? \"last page, \" : \"\"}page ${page}`\n  },\n}\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"pagination\",\n      initial: \"idle\",\n      context: {\n        pageSize: 10,\n        siblingCount: 1,\n        page: 1,\n        type: \"button\",\n        translations: {\n          ...defaultTranslations,\n          ...ctx.translations,\n        },\n        ...ctx,\n      },\n\n      watch: {\n        pageSize: [\"setPageIfNeeded\"],\n      },\n\n      computed: {\n        totalPages: (ctx) => Math.ceil(ctx.count / ctx.pageSize),\n        previousPage: (ctx) => (ctx.page === 1 ? null : ctx.page - 1),\n        nextPage: (ctx) => (ctx.page === ctx.totalPages ? null : ctx.page + 1),\n        pageRange: (ctx) => {\n          const start = (ctx.page - 1) * ctx.pageSize\n          const end = start + ctx.pageSize\n          return { start, end }\n        },\n        isValidPage: (ctx) => ctx.page >= 1 && ctx.page <= ctx.totalPages,\n      },\n\n      on: {\n        SET_COUNT: [\n          {\n            guard: \"isValidCount\",\n            actions: [\"setCount\", \"goToFirstPage\"],\n          },\n          {\n            actions: \"setCount\",\n          },\n        ],\n        SET_PAGE: {\n          guard: \"isValidPage\",\n          actions: \"setPage\",\n        },\n        SET_PAGE_SIZE: {\n          actions: \"setPageSize\",\n        },\n        FIRST_PAGE: {\n          actions: \"goToFirstPage\",\n        },\n        LAST_PAGE: {\n          actions: \"goToLastPage\",\n        },\n        PREVIOUS_PAGE: {\n          guard: \"canGoToPrevPage\",\n          actions: \"goToPrevPage\",\n        },\n        NEXT_PAGE: {\n          guard: \"canGoToNextPage\",\n          actions: \"goToNextPage\",\n        },\n      },\n\n      states: {\n        idle: {},\n      },\n    },\n    {\n      guards: {\n        isValidPage: (ctx, evt) => evt.page >= 1 && evt.page <= ctx.totalPages,\n        isValidCount: (ctx, evt) => ctx.page > evt.count,\n        canGoToNextPage: (ctx) => ctx.page < ctx.totalPages,\n        canGoToPrevPage: (ctx) => ctx.page > 1,\n      },\n      actions: {\n        setCount(ctx, evt) {\n          ctx.count = evt.count\n        },\n        setPage(ctx, evt) {\n          set.page(ctx, evt.page)\n        },\n        setPageSize(ctx, evt) {\n          set.pageSize(ctx, evt.size)\n        },\n        goToFirstPage(ctx) {\n          set.page(ctx, 1)\n        },\n        goToLastPage(ctx) {\n          set.page(ctx, ctx.totalPages)\n        },\n        goToPrevPage(ctx) {\n          set.page(ctx, ctx.page - 1)\n        },\n        goToNextPage(ctx) {\n          set.page(ctx, ctx.page + 1)\n        },\n        setPageIfNeeded(ctx, _evt) {\n          if (ctx.isValidPage) return\n          set.page(ctx, 1)\n        },\n      },\n    },\n  )\n}\n\nconst clampPage = (page: number, totalPages: number) => Math.min(Math.max(page, 1), totalPages)\n\nconst set = {\n  pageSize: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.pageSize, value)) return\n    ctx.pageSize = value\n    ctx.onPageSizeChange?.({ pageSize: ctx.pageSize })\n  },\n  page: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.page, value)) return\n    ctx.page = clampPage(value, ctx.totalPages)\n    ctx.onPageChange?.({ page: ctx.page, pageSize: ctx.pageSize })\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { EllipsisProps, ItemProps, UserDefinedContext } from \"./pagination.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"count\",\n  \"dir\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onPageChange\",\n  \"onPageSizeChange\",\n  \"page\",\n  \"pageSize\",\n  \"siblingCount\",\n  \"translations\",\n  \"type\",\n])\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const itemProps = createProps<ItemProps>()([\"value\", \"type\"])\nexport const splitItemProps = createSplitProps<ItemProps>(itemProps)\n\nexport const ellipsisProps = createProps<EllipsisProps>()([\"index\"])\nexport const splitEllipsisProps = createSplitProps<EllipsisProps>(ellipsisProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}