{"ast":null,"code":"// src/create-anatomy.ts\nvar createAnatomy = (name, parts = []) => ({\n  parts: (...values) => {\n    if (isEmpty(parts)) {\n      return createAnatomy(name, values);\n    }\n    throw new Error(\"createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?\");\n  },\n  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),\n  rename: newName => createAnatomy(newName, parts),\n  keys: () => parts,\n  build: () => [...new Set(parts)].reduce((prev, part) => Object.assign(prev, {\n    [part]: {\n      selector: [`&[data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`, `& [data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`].join(\", \"),\n      attrs: {\n        \"data-scope\": toKebabCase(name),\n        \"data-part\": toKebabCase(part)\n      }\n    }\n  }), {})\n});\nvar toKebabCase = value => value.replace(/([A-Z])([A-Z])/g, \"$1-$2\").replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[\\s_]+/g, \"-\").toLowerCase();\nvar isEmpty = v => v.length === 0;\nexport { createAnatomy };","map":{"version":3,"names":["createAnatomy","name","parts","values","isEmpty","Error","extendWith","rename","newName","keys","build","Set","reduce","prev","part","Object","assign","selector","toKebabCase","join","attrs","value","replace","toLowerCase","v","length"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\anatomy\\src\\create-anatomy.ts"],"sourcesContent":["export interface AnatomyPart {\n  selector: string\n  attrs: Record<\"data-scope\" | \"data-part\", string>\n}\n\nexport type AnatomyInstance<T extends string> = Omit<Anatomy<T>, \"parts\">\n\nexport type AnatomyPartName<T> = T extends AnatomyInstance<infer U> ? U : never\n\nexport interface Anatomy<T extends string> {\n  parts: <U extends string>(...parts: U[]) => AnatomyInstance<U>\n  extendWith: <V extends string>(...parts: V[]) => AnatomyInstance<T | V>\n  build: () => Record<T, AnatomyPart>\n  rename: (newName: string) => Anatomy<T>\n  keys: () => T[]\n}\n\nexport const createAnatomy = <T extends string>(name: string, parts = [] as T[]): Anatomy<T> => ({\n  parts: (...values) => {\n    if (isEmpty(parts)) {\n      return createAnatomy(name, values)\n    }\n    throw new Error(\"createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?\")\n  },\n  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),\n  rename: (newName) => createAnatomy(newName, parts),\n  keys: () => parts,\n  build: () =>\n    [...new Set(parts)].reduce<Record<string, AnatomyPart>>(\n      (prev, part) =>\n        Object.assign(prev, {\n          [part]: {\n            selector: [\n              `&[data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`,\n              `& [data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`,\n            ].join(\", \"),\n            attrs: { \"data-scope\": toKebabCase(name), \"data-part\": toKebabCase(part) },\n          },\n        }),\n      {},\n    ),\n})\n\nconst toKebabCase = (value: string) =>\n  value\n    .replace(/([A-Z])([A-Z])/g, \"$1-$2\")\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/[\\s_]+/g, \"-\")\n    .toLowerCase()\n\nconst isEmpty = <T>(v: T[]): boolean => v.length === 0\n"],"mappings":";AAiBO,IAAMA,aAAA,GAAgBA,CAAmBC,IAAA,EAAcC,KAAA,GAAQ,EAAC,MAA0B;EAC/FA,KAAA,EAAOA,CAAA,GAAIC,MAAA,KAAW;IACpB,IAAIC,OAAA,CAAQF,KAAK,GAAG;MAClB,OAAOF,aAAA,CAAcC,IAAA,EAAME,MAAM;IACnC;IACA,MAAM,IAAIE,KAAA,CAAM,+FAA+F;EACjH;EACAC,UAAA,EAAYA,CAAA,GAAIH,MAAA,KAAWH,aAAA,CAAcC,IAAA,EAAM,CAAC,GAAGC,KAAA,EAAO,GAAGC,MAAM,CAAC;EACpEI,MAAA,EAASC,OAAA,IAAYR,aAAA,CAAcQ,OAAA,EAASN,KAAK;EACjDO,IAAA,EAAMA,CAAA,KAAMP,KAAA;EACZQ,KAAA,EAAOA,CAAA,KACL,CAAC,GAAG,IAAIC,GAAA,CAAIT,KAAK,CAAC,EAAEU,MAAA,CAClB,CAACC,IAAA,EAAMC,IAAA,KACLC,MAAA,CAAOC,MAAA,CAAOH,IAAA,EAAM;IAClB,CAACC,IAAI,GAAG;MACNG,QAAA,EAAU,CACR,iBAAiBC,WAAA,CAAYjB,IAAI,CAAC,iBAAiBiB,WAAA,CAAYJ,IAAI,CAAC,MACpE,kBAAkBI,WAAA,CAAYjB,IAAI,CAAC,iBAAiBiB,WAAA,CAAYJ,IAAI,CAAC,KACvE,CAAEK,IAAA,CAAK,IAAI;MACXC,KAAA,EAAO;QAAE,cAAcF,WAAA,CAAYjB,IAAI;QAAG,aAAaiB,WAAA,CAAYJ,IAAI;MAAE;IAC3E;EACF,CAAC,GACH,CAAC,CACH;AACJ;AAEA,IAAMI,WAAA,GAAeG,KAAA,IACnBA,KAAA,CACGC,OAAA,CAAQ,mBAAmB,OAAO,EAClCA,OAAA,CAAQ,mBAAmB,OAAO,EAClCA,OAAA,CAAQ,WAAW,GAAG,EACtBC,WAAA,CAAY;AAEjB,IAAMnB,OAAA,GAAcoB,CAAA,IAAoBA,CAAA,CAAEC,MAAA,KAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}