{"ast":null,"code":"// src/signature-pad.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"signature-pad\").parts(\"root\", \"control\", \"segment\", \"segmentPath\", \"guide\", \"clearTrigger\", \"label\");\nvar parts = anatomy.build();\n\n// src/signature-pad.connect.ts\nimport { getRelativePoint, isLeftClick, isModifierKey } from \"@zag-js/dom-event\";\nimport { dataAttr, getEventTarget } from \"@zag-js/dom-query\";\n\n// src/signature-pad.dom.ts\nimport { createScope, getDataUrl, query } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `signature-${ctx.id}`,\n  getControlId: ctx => ctx.ids?.control ?? `signature-control-${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `signature-label-${ctx.id}`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`,\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getSegmentEl: ctx => query(dom.getControlEl(ctx), \"[data-part=segment]\"),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  getDataUrl: (ctx, options) => {\n    if (ctx.isEmpty) return Promise.resolve(\"\");\n    return getDataUrl(dom.getSegmentEl(ctx), options);\n  }\n});\n\n// src/signature-pad.connect.ts\nvar defaultTranslations = {\n  control: \"signature pad\",\n  clearTrigger: \"clear signature\"\n};\nfunction connect(state, send, normalize) {\n  const drawing = state.matches(\"drawing\");\n  const empty = state.context.isEmpty;\n  const interactive = state.context.isInteractive;\n  const disabled = !!state.context.disabled;\n  const translations = state.context.translations || defaultTranslations;\n  return {\n    empty,\n    drawing,\n    currentPath: state.context.currentPath,\n    paths: state.context.paths,\n    clear() {\n      send({\n        type: \"CLEAR\"\n      });\n    },\n    getDataUrl(type, quality) {\n      return dom.getDataUrl(state.context, {\n        type,\n        quality\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (!interactive) return;\n          if (event.defaultPrevented) return;\n          const controlEl = dom.getControlEl(state.context);\n          controlEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getRootId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? void 0 : 0,\n        id: dom.getControlId(state.context),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          if (!interactive) return;\n          const target = getEventTarget(event);\n          if (target?.closest(\"[data-part=clear-trigger]\")) return;\n          event.currentTarget.setPointerCapture(event.pointerId);\n          const point = {\n            x: event.clientX,\n            y: event.clientY\n          };\n          const {\n            offset\n          } = getRelativePoint(point, dom.getControlEl(state.context));\n          send({\n            type: \"POINTER_DOWN\",\n            point: offset,\n            pressure: event.pressure\n          });\n        },\n        onPointerUp(event) {\n          if (!interactive) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: state.context.drawing.fill\n        }\n      });\n    },\n    getSegmentPathProps(props2) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props2.path\n      });\n    },\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled)\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !state.context.paths.length || drawing,\n        disabled,\n        onClick() {\n          send({\n            type: \"CLEAR\"\n          });\n        }\n      });\n    },\n    getHiddenInputProps(props2) {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: state.context.required,\n        readOnly: state.context.readOnly,\n        name: state.context.name,\n        value: props2.value\n      });\n    }\n  };\n}\n\n// src/signature-pad.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { getRelativePoint as getRelativePoint2, trackPointerMove } from \"@zag-js/dom-event\";\nimport { compact } from \"@zag-js/utils\";\nimport getStroke from \"perfect-freehand\";\n\n// src/get-svg-path.ts\nvar average = (a, b) => (a + b) / 2;\nfunction getSvgPathFromStroke(points, closed = true) {\n  const len = points.length;\n  if (len < 4) {\n    return \"\";\n  }\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(b[1], c[1]).toFixed(2)} T`;\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `;\n  }\n  if (closed) {\n    result += \"Z\";\n  }\n  return result;\n}\n\n// src/signature-pad.machine.ts\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"signature-pad\",\n    initial: \"idle\",\n    context: {\n      readOnly: false,\n      disabled: false,\n      ...ctx,\n      paths: [],\n      currentPoints: [],\n      currentPath: null,\n      drawing: {\n        size: 2,\n        simulatePressure: false,\n        thinning: 0.7,\n        smoothing: 0.4,\n        streamline: 0.6,\n        ...ctx.drawing\n      }\n    },\n    computed: {\n      isInteractive: ctx2 => !(ctx2.disabled || ctx2.readOnly),\n      isEmpty: ctx2 => ctx2.paths.length === 0\n    },\n    on: {\n      CLEAR: {\n        actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          POINTER_DOWN: {\n            target: \"drawing\",\n            actions: [\"addPoint\"]\n          }\n        }\n      },\n      drawing: {\n        activities: [\"trackPointerMove\"],\n        on: {\n          POINTER_MOVE: {\n            actions: [\"addPoint\", \"invokeOnDraw\"]\n          },\n          POINTER_UP: {\n            target: \"idle\",\n            actions: [\"endStroke\", \"invokeOnDrawEnd\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackPointerMove(ctx2, _evt, {\n        send\n      }) {\n        const doc = dom.getDoc(ctx2);\n        return trackPointerMove(doc, {\n          onPointerMove({\n            event,\n            point\n          }) {\n            const {\n              offset\n            } = getRelativePoint2(point, dom.getControlEl(ctx2));\n            send({\n              type: \"POINTER_MOVE\",\n              point: offset,\n              pressure: event.pressure\n            });\n          },\n          onPointerUp() {\n            send({\n              type: \"POINTER_UP\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      addPoint(ctx2, evt) {\n        ctx2.currentPoints.push(evt.point);\n        const stroke = getStroke(ctx2.currentPoints, ctx2.drawing);\n        ctx2.currentPath = getSvgPathFromStroke(stroke);\n      },\n      endStroke(ctx2) {\n        ctx2.paths.push(ctx2.currentPath);\n        ctx2.currentPoints = [];\n        ctx2.currentPath = null;\n      },\n      clearPoints(ctx2) {\n        ctx2.currentPoints = [];\n        ctx2.paths = [];\n      },\n      focusCanvasEl(ctx2) {\n        queueMicrotask(() => {\n          dom.getControlEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      invokeOnDraw(ctx2) {\n        ctx2.onDraw?.({\n          paths: [...ctx2.paths, ctx2.currentPath]\n        });\n      },\n      invokeOnDrawEnd(ctx2) {\n        ctx2.onDrawEnd?.({\n          paths: [...ctx2.paths],\n          getDataUrl(type, quality = 0.92) {\n            return dom.getDataUrl(ctx2, {\n              type,\n              quality\n            });\n          }\n        });\n      }\n    }\n  });\n}\n\n// src/signature-pad.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"dir\", \"disabled\", \"drawing\", \"getRootNode\", \"id\", \"ids\", \"name\", \"onDraw\", \"onDrawEnd\", \"readOnly\", \"required\", \"translations\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getRelativePoint","isLeftClick","isModifierKey","dataAttr","getEventTarget","createScope","getDataUrl","query","dom","getRootId","ctx","ids","root","id","getControlId","control","getLabelId","label","getHiddenInputId","hiddenInput","getControlEl","getById","getSegmentEl","getHiddenInputEl","options","isEmpty","Promise","resolve","defaultTranslations","clearTrigger","connect","state","send","normalize","drawing","matches","empty","context","interactive","isInteractive","disabled","translations","currentPath","paths","clear","type","quality","getLabelProps","attrs","htmlFor","onClick","event","defaultPrevented","controlEl","focus","preventScroll","getRootProps","element","getControlProps","tabIndex","role","onPointerDown","target","closest","currentTarget","setPointerCapture","pointerId","point","x","clientX","y","clientY","offset","pressure","onPointerUp","hasPointerCapture","releasePointerCapture","style","position","touchAction","userSelect","WebkitUserSelect","getSegmentProps","svg","segment","top","left","width","height","pointerEvents","fill","getSegmentPathProps","props2","path","segmentPath","d","getGuideProps","guide","getClearTriggerProps","button","hidden","length","getHiddenInputProps","input","required","readOnly","name","value","createMachine","getRelativePoint2","trackPointerMove","compact","getStroke","average","a","b","getSvgPathFromStroke","points","closed","len","c","result","toFixed","i","max","machine","userContext","initial","currentPoints","size","simulatePressure","thinning","smoothing","streamline","computed","ctx2","on","CLEAR","actions","states","idle","POINTER_DOWN","activities","POINTER_MOVE","POINTER_UP","_evt","doc","getDoc","onPointerMove","addPoint","evt","push","stroke","endStroke","clearPoints","focusCanvasEl","queueMicrotask","invokeOnDraw","onDraw","invokeOnDrawEnd","onDrawEnd","createProps","createSplitProps","props","splitProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\signature-pad.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\signature-pad.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\signature-pad.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\signature-pad.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\get-svg-path.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\signature-pad\\src\\signature-pad.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"signature-pad\").parts(\n  \"root\",\n  \"control\",\n  \"segment\",\n  \"segmentPath\",\n  \"guide\",\n  \"clearTrigger\",\n  \"label\",\n)\n\nexport const parts = anatomy.build()\n","import { getRelativePoint, isLeftClick, isModifierKey } from \"@zag-js/dom-event\"\nimport { dataAttr, getEventTarget } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./signature-pad.anatomy\"\nimport { dom } from \"./signature-pad.dom\"\nimport type { IntlTranslations, MachineApi, Send, State } from \"./signature-pad.types\"\n\nconst defaultTranslations: IntlTranslations = {\n  control: \"signature pad\",\n  clearTrigger: \"clear signature\",\n}\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const drawing = state.matches(\"drawing\")\n  const empty = state.context.isEmpty\n  const interactive = state.context.isInteractive\n  const disabled = !!state.context.disabled\n\n  const translations = state.context.translations || defaultTranslations\n\n  return {\n    empty: empty,\n    drawing: drawing,\n    currentPath: state.context.currentPath,\n    paths: state.context.paths,\n    clear() {\n      send({ type: \"CLEAR\" })\n    },\n\n    getDataUrl(type, quality) {\n      return dom.getDataUrl(state.context, { type, quality })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (!interactive) return\n          if (event.defaultPrevented) return\n          const controlEl = dom.getControlEl(state.context)\n          controlEl?.focus({ preventScroll: true })\n        },\n      })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? undefined : 0,\n        id: dom.getControlId(state.context),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return\n          if (isModifierKey(event)) return\n          if (!interactive) return\n\n          const target = getEventTarget<HTMLElement>(event)\n          if (target?.closest(\"[data-part=clear-trigger]\")) return\n\n          event.currentTarget.setPointerCapture(event.pointerId)\n\n          const point = { x: event.clientX, y: event.clientY }\n          const { offset } = getRelativePoint(point, dom.getControlEl(state.context)!)\n          send({ type: \"POINTER_DOWN\", point: offset, pressure: event.pressure })\n        },\n        onPointerUp(event) {\n          if (!interactive) return\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId)\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n        },\n      })\n    },\n\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: state.context.drawing.fill,\n        },\n      })\n    },\n\n    getSegmentPathProps(props) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props.path,\n      })\n    },\n\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled),\n      })\n    },\n\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !state.context.paths.length || drawing,\n        disabled,\n        onClick() {\n          send({ type: \"CLEAR\" })\n        },\n      })\n    },\n\n    getHiddenInputProps(props) {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: state.context.required,\n        readOnly: state.context.readOnly,\n        name: state.context.name,\n        value: props.value,\n      })\n    },\n  }\n}\n","import { createScope, getDataUrl, query } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx, DataUrlOptions } from \"./signature-pad.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `signature-${ctx.id}`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `signature-control-${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `signature-label-${ctx.id}`,\n  getHiddenInputId: (ctx: Ctx) => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`,\n\n  getControlEl: (ctx: Ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getSegmentEl: (ctx: Ctx) => query<SVGElement>(dom.getControlEl(ctx), \"[data-part=segment]\"),\n  getHiddenInputEl: (ctx: Ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n\n  getDataUrl: (ctx: Ctx, options: DataUrlOptions): Promise<string> => {\n    if (ctx.isEmpty) return Promise.resolve(\"\")\n    return getDataUrl(dom.getSegmentEl(ctx), options)\n  },\n})\n","import { createMachine } from \"@zag-js/core\"\nimport { getRelativePoint, trackPointerMove } from \"@zag-js/dom-event\"\nimport { compact } from \"@zag-js/utils\"\nimport getStroke from \"perfect-freehand\"\nimport { getSvgPathFromStroke } from \"./get-svg-path\"\nimport { dom } from \"./signature-pad.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./signature-pad.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"signature-pad\",\n      initial: \"idle\",\n      context: {\n        readOnly: false,\n        disabled: false,\n        ...ctx,\n        paths: [],\n        currentPoints: [],\n        currentPath: null,\n        drawing: {\n          size: 2,\n          simulatePressure: false,\n          thinning: 0.7,\n          smoothing: 0.4,\n          streamline: 0.6,\n          ...ctx.drawing,\n        },\n      },\n\n      computed: {\n        isInteractive: (ctx) => !(ctx.disabled || ctx.readOnly),\n        isEmpty: (ctx) => ctx.paths.length === 0,\n      },\n\n      on: {\n        CLEAR: {\n          actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"],\n        },\n      },\n\n      states: {\n        idle: {\n          on: {\n            POINTER_DOWN: {\n              target: \"drawing\",\n              actions: [\"addPoint\"],\n            },\n          },\n        },\n        drawing: {\n          activities: [\"trackPointerMove\"],\n          on: {\n            POINTER_MOVE: {\n              actions: [\"addPoint\", \"invokeOnDraw\"],\n            },\n            POINTER_UP: {\n              target: \"idle\",\n              actions: [\"endStroke\", \"invokeOnDrawEnd\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackPointerMove(ctx, _evt, { send }) {\n          const doc = dom.getDoc(ctx)\n          return trackPointerMove(doc, {\n            onPointerMove({ event, point }) {\n              const { offset } = getRelativePoint(point, dom.getControlEl(ctx)!)\n              send({ type: \"POINTER_MOVE\", point: offset, pressure: event.pressure })\n            },\n            onPointerUp() {\n              send({ type: \"POINTER_UP\" })\n            },\n          })\n        },\n      },\n      actions: {\n        addPoint(ctx, evt) {\n          ctx.currentPoints.push(evt.point)\n          const stroke = getStroke(ctx.currentPoints, ctx.drawing)\n          ctx.currentPath = getSvgPathFromStroke(stroke)\n        },\n        endStroke(ctx) {\n          ctx.paths.push(ctx.currentPath!)\n          ctx.currentPoints = []\n          ctx.currentPath = null\n        },\n        clearPoints(ctx) {\n          ctx.currentPoints = []\n          ctx.paths = []\n        },\n        focusCanvasEl(ctx) {\n          queueMicrotask(() => {\n            dom.getControlEl(ctx)?.focus({ preventScroll: true })\n          })\n        },\n        invokeOnDraw(ctx) {\n          ctx.onDraw?.({\n            paths: [...ctx.paths, ctx.currentPath!],\n          })\n        },\n        invokeOnDrawEnd(ctx) {\n          ctx.onDrawEnd?.({\n            paths: [...ctx.paths],\n            getDataUrl(type, quality = 0.92) {\n              return dom.getDataUrl(ctx, { type, quality })\n            },\n          })\n        },\n      },\n    },\n  )\n}\n","const average = (a: number, b: number) => (a + b) / 2\n\nexport function getSvgPathFromStroke(points: number[][], closed = true): string {\n  const len = points.length\n\n  if (len < 4) {\n    return \"\"\n  }\n\n  let a = points[0]\n  let b = points[1]\n  const c = points[2]\n\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(\n    b[1],\n    c[1],\n  ).toFixed(2)} T`\n\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i]\n    b = points[i + 1]\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `\n  }\n\n  if (closed) {\n    result += \"Z\"\n  }\n\n  return result\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./signature-pad.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"dir\",\n  \"disabled\",\n  \"drawing\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"name\",\n  \"onDraw\",\n  \"onDrawEnd\",\n  \"readOnly\",\n  \"required\",\n  \"translations\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}