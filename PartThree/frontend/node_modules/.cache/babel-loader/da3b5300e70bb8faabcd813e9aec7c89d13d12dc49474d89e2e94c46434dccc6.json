{"ast":null,"code":"// src/qr-code.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\");\nvar parts = anatomy.build();\n\n// src/qr-code.connect.ts\nimport { getDataUrl } from \"@zag-js/dom-query\";\n\n// src/qr-code.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `qrcode:${ctx.id}:root`,\n  getFrameId: ctx => ctx.ids?.frame ?? `qrcode:${ctx.id}:frame`,\n  getFrameEl: ctx => dom.getById(ctx, dom.getFrameId(ctx))\n});\n\n// src/qr-code.connect.ts\nfunction connect(state, send, normalize) {\n  const encoded = state.context.encoded;\n  const pixelSize = state.context.pixelSize;\n  const height = encoded.size * pixelSize;\n  const width = encoded.size * pixelSize;\n  const paths = [];\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n      }\n    }\n  }\n  return {\n    value: state.context.value,\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    getDataUrl(type, quality) {\n      const svgEl = dom.getFrameEl(state.context);\n      return getDataUrl(svgEl, {\n        type,\n        quality\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\"\n        }\n      });\n    },\n    getFrameProps() {\n      return normalize.svg({\n        id: dom.getFrameId(state.context),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`\n      });\n    },\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs\n      });\n    },\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\"\n        }\n      });\n    }\n  };\n}\n\n// src/qr-code.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { compact } from \"@zag-js/utils\";\nimport { memoize } from \"proxy-memoize\";\nimport { encode } from \"uqr\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"qr-code\",\n    initial: \"idle\",\n    context: {\n      value: \"\",\n      ...ctx,\n      pixelSize: 10\n    },\n    computed: {\n      encoded: memoize(ctx2 => encode(ctx2.value, ctx2.encoding))\n    },\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      }\n    }\n  }, {\n    actions: {\n      setValue: (ctx2, e) => {\n        ctx2.value = e.value;\n      }\n    }\n  });\n}\n\n// src/qr-code.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"ids\", \"value\", \"id\", \"encoding\", \"dir\", \"getRootNode\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getDataUrl","createScope","dom","getRootId","ctx","ids","root","id","getFrameId","frame","getFrameEl","getById","connect","state","send","normalize","encoded","context","pixelSize","height","size","width","paths","row","col","x","y","data","push","value","setValue","type","quality","svgEl","getRootProps","element","attrs","style","position","getFrameProps","svg","xmlns","viewBox","getPatternProps","path","d","join","pattern","getOverlayProps","overlay","top","left","translate","createMachine","compact","memoize","encode","machine","userContext","initial","computed","ctx2","encoding","on","actions","e","createProps","createSplitProps","props","splitProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\qr-code\\src\\qr-code.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\qr-code\\src\\qr-code.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\qr-code\\src\\qr-code.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\qr-code\\src\\qr-code.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\qr-code\\src\\qr-code.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\")\n\nexport const parts = anatomy.build()\n","import { getDataUrl } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./qr-code.anatomy\"\nimport { dom } from \"./qr-code.dom\"\nimport type { MachineApi, Send, State } from \"./qr-code.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const encoded = state.context.encoded\n  const pixelSize = state.context.pixelSize\n\n  const height = encoded.size * pixelSize\n  const width = encoded.size * pixelSize\n\n  const paths: string[] = []\n\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize\n      const y = row * pixelSize\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`)\n      }\n    }\n  }\n\n  return {\n    value: state.context.value,\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n    getDataUrl(type, quality) {\n      const svgEl = dom.getFrameEl(state.context)\n      return getDataUrl(svgEl, { type, quality })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\",\n        },\n      })\n    },\n\n    getFrameProps() {\n      return normalize.svg({\n        id: dom.getFrameId(state.context),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`,\n      })\n    },\n\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs,\n      })\n    },\n\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\",\n        },\n      })\n    },\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./qr-code.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `qrcode:${ctx.id}:root`,\n  getFrameId: (ctx: Ctx) => ctx.ids?.frame ?? `qrcode:${ctx.id}:frame`,\n  getFrameEl: (ctx: Ctx) => dom.getById<SVGElement>(ctx, dom.getFrameId(ctx)),\n})\n","import { createMachine } from \"@zag-js/core\"\nimport { compact } from \"@zag-js/utils\"\nimport { memoize } from \"proxy-memoize\"\nimport { encode } from \"uqr\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./qr-code.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"qr-code\",\n      initial: \"idle\",\n      context: {\n        value: \"\",\n        ...ctx,\n        pixelSize: 10,\n      },\n\n      computed: {\n        encoded: memoize((ctx) => encode(ctx.value, ctx.encoding)),\n      },\n\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"],\n        },\n      },\n    },\n    {\n      actions: {\n        setValue: (ctx, e) => {\n          ctx.value = e.value\n        },\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { UserDefinedContext } from \"./qr-code.types\"\n\nexport const props = createProps<UserDefinedContext>()([\"ids\", \"value\", \"id\", \"encoding\", \"dir\", \"getRootNode\"])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}