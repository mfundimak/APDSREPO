{"ast":null,"code":"// src/toggle-group.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"toggle-group\").parts(\"root\", \"item\");\nvar parts = anatomy.build();\n\n// src/toggle-group.connect.ts\nimport { getEventKey } from \"@zag-js/dom-event\";\nimport { dataAttr, isSafari, isSelfTarget } from \"@zag-js/dom-query\";\n\n// src/toggle-group.dom.ts\nimport { createScope, nextById, prevById, queryAll } from \"@zag-js/dom-query\";\nimport { first, last } from \"@zag-js/utils\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `toggle-group:${ctx.id}`,\n  getItemId: (ctx, value) => ctx.ids?.item?.(value) ?? `toggle-group:${ctx.id}:${value}`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getElements: ctx => {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    const selector = `[data-ownedby='${ownerId}']:not([data-disabled])`;\n    return queryAll(dom.getRootEl(ctx), selector);\n  },\n  getFirstEl: ctx => first(dom.getElements(ctx)),\n  getLastEl: ctx => last(dom.getElements(ctx)),\n  getNextEl: (ctx, id) => nextById(dom.getElements(ctx), id, ctx.currentLoopFocus),\n  getPrevEl: (ctx, id) => prevById(dom.getElements(ctx), id, ctx.currentLoopFocus)\n});\n\n// src/toggle-group.connect.ts\nfunction connect(state, send, normalize) {\n  const value = state.context.value;\n  const disabled = state.context.disabled;\n  const isSingle = !state.context.multiple;\n  const rovingFocus = state.context.rovingFocus;\n  const isHorizontal = state.context.orientation === \"horizontal\";\n  function getItemState(props2) {\n    const id = dom.getItemId(state.context, props2.value);\n    return {\n      id,\n      disabled: Boolean(props2.disabled || disabled),\n      pressed: !!value.includes(props2.value),\n      focused: state.context.focusedId === id\n    };\n  }\n  return {\n    value,\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: value2\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        role: isSingle ? \"radiogroup\" : \"group\",\n        tabIndex: state.context.isTabbingBackward ? -1 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": state.context.orientation,\n        \"data-focus\": dataAttr(state.context.focusedId != null),\n        style: {\n          outline: \"none\"\n        },\n        onMouseDown() {\n          if (disabled) return;\n          send(\"ROOT.MOUSE_DOWN\");\n        },\n        onFocus(event) {\n          if (disabled) return;\n          const evt = event.nativeEvent || event;\n          if (!isSelfTarget(evt) || !!state.context.isClickFocus || state.context.isTabbingBackward) return;\n          send(\"ROOT.FOCUS\");\n        },\n        onBlur() {\n          if (disabled) return;\n          send(\"ROOT.BLUR\");\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props2) {\n      const itemState = getItemState(props2);\n      const rovingTabIndex = itemState.focused ? 0 : -1;\n      return normalize.button({\n        ...parts.item.attrs,\n        id: itemState.id,\n        type: \"button\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        \"data-focus\": dataAttr(itemState.focused),\n        disabled: itemState.disabled,\n        tabIndex: rovingFocus ? rovingTabIndex : void 0,\n        // radio\n        role: isSingle ? \"radio\" : void 0,\n        \"aria-checked\": isSingle ? itemState.pressed : void 0,\n        \"aria-pressed\": isSingle ? void 0 : itemState.pressed,\n        //\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        \"data-state\": itemState.pressed ? \"on\" : \"off\",\n        onFocus() {\n          if (itemState.disabled) return;\n          send({\n            type: \"TOGGLE.FOCUS\",\n            id: itemState.id\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          send({\n            type: \"TOGGLE.CLICK\",\n            id: itemState.id,\n            value: props2.value\n          });\n          if (isSafari()) {\n            event.currentTarget.focus({\n              preventScroll: true\n            });\n          }\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!isSelfTarget(event)) return;\n          if (itemState.disabled) return;\n          const keyMap = {\n            Tab(event2) {\n              const isShiftTab = event2.shiftKey;\n              send({\n                type: \"TOGGLE.SHIFT_TAB\",\n                isShiftTab\n              });\n            },\n            ArrowLeft() {\n              if (!rovingFocus || !isHorizontal) return;\n              send(\"TOGGLE.FOCUS_PREV\");\n            },\n            ArrowRight() {\n              if (!rovingFocus || !isHorizontal) return;\n              send(\"TOGGLE.FOCUS_NEXT\");\n            },\n            ArrowUp() {\n              if (!rovingFocus || isHorizontal) return;\n              send(\"TOGGLE.FOCUS_PREV\");\n            },\n            ArrowDown() {\n              if (!rovingFocus || isHorizontal) return;\n              send(\"TOGGLE.FOCUS_NEXT\");\n            },\n            Home() {\n              if (!rovingFocus) return;\n              send(\"TOGGLE.FOCUS_FIRST\");\n            },\n            End() {\n              if (!rovingFocus) return;\n              send(\"TOGGLE.FOCUS_LAST\");\n            }\n          };\n          const exec = keyMap[getEventKey(event)];\n          if (exec) {\n            exec(event);\n            if (event.key !== \"Tab\") event.preventDefault();\n          }\n        }\n      });\n    }\n  };\n}\n\n// src/toggle-group.machine.ts\nimport { createMachine, guards } from \"@zag-js/core\";\nimport { raf } from \"@zag-js/dom-query\";\nimport { add, compact, isEqual, remove } from \"@zag-js/utils\";\nvar {\n  not,\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"toggle-group\",\n    initial: \"idle\",\n    context: {\n      value: [],\n      disabled: false,\n      orientation: \"horizontal\",\n      rovingFocus: true,\n      loopFocus: true,\n      ...ctx,\n      focusedId: null,\n      isTabbingBackward: false,\n      isClickFocus: false,\n      isWithinToolbar: false\n    },\n    computed: {\n      currentLoopFocus: ctx2 => ctx2.loopFocus && !ctx2.isWithinToolbar\n    },\n    entry: [\"checkIfWithinToolbar\"],\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      \"TOGGLE.CLICK\": {\n        actions: [\"setValue\"]\n      },\n      \"ROOT.MOUSE_DOWN\": {\n        actions: [\"setClickFocus\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"ROOT.FOCUS\": {\n            target: \"focused\",\n            guard: not(and(\"isClickFocus\", \"isTabbingBackward\")),\n            actions: [\"focusFirstToggle\", \"clearClickFocus\"]\n          },\n          \"TOGGLE.FOCUS\": {\n            target: \"focused\",\n            actions: [\"setFocusedId\"]\n          }\n        }\n      },\n      focused: {\n        on: {\n          \"ROOT.BLUR\": {\n            target: \"idle\",\n            actions: [\"clearIsTabbingBackward\"]\n          },\n          \"TOGGLE.FOCUS\": {\n            actions: [\"setFocusedId\"]\n          },\n          \"TOGGLE.FOCUS_NEXT\": {\n            actions: [\"focusNextToggle\"]\n          },\n          \"TOGGLE.FOCUS_PREV\": {\n            actions: [\"focusPrevToggle\"]\n          },\n          \"TOGGLE.FOCUS_FIRST\": {\n            actions: [\"focusFirstToggle\"]\n          },\n          \"TOGGLE.FOCUS_LAST\": {\n            actions: [\"focusLastToggle\"]\n          },\n          \"TOGGLE.SHIFT_TAB\": {\n            target: \"idle\",\n            actions: [\"setIsTabbingBackward\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isClickFocus: ctx2 => ctx2.isClickFocus,\n      isTabbingBackward: ctx2 => ctx2.isTabbingBackward\n    },\n    actions: {\n      setIsTabbingBackward(ctx2) {\n        ctx2.isTabbingBackward = true;\n      },\n      clearIsTabbingBackward(ctx2) {\n        ctx2.isTabbingBackward = false;\n      },\n      setClickFocus(ctx2) {\n        ctx2.isClickFocus = true;\n      },\n      clearClickFocus(ctx2) {\n        ctx2.isClickFocus = false;\n      },\n      checkIfWithinToolbar(ctx2) {\n        const closestToolbar = dom.getRootEl(ctx2)?.closest(\"[role=toolbar]\");\n        ctx2.isWithinToolbar = !!closestToolbar;\n      },\n      setFocusedId(ctx2, evt) {\n        ctx2.focusedId = evt.id;\n      },\n      clearFocusedId(ctx2) {\n        ctx2.focusedId = null;\n      },\n      setValue(ctx2, evt) {\n        if (!evt.value) return;\n        let next = Array.from(ctx2.value);\n        if (ctx2.multiple) {\n          next = next.includes(evt.value) ? remove(next, evt.value) : add(next, evt.value);\n        } else {\n          next = isEqual(ctx2.value, [evt.value]) ? [] : [evt.value];\n        }\n        set.value(ctx2, next);\n      },\n      focusNextToggle(ctx2) {\n        raf(() => {\n          if (!ctx2.focusedId) return;\n          dom.getNextEl(ctx2, ctx2.focusedId)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusPrevToggle(ctx2) {\n        raf(() => {\n          if (!ctx2.focusedId) return;\n          dom.getPrevEl(ctx2, ctx2.focusedId)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusFirstToggle(ctx2) {\n        raf(() => {\n          dom.getFirstEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusLastToggle(ctx2) {\n        raf(() => {\n          dom.getLastEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      }\n    }\n  });\n}\nvar invoke = {\n  change(ctx) {\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value)\n    });\n  }\n};\nvar set = {\n  value(ctx, value) {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.change(ctx);\n  }\n};\n\n// src/toggle-group.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"dir\", \"disabled\", \"getRootNode\", \"id\", \"ids\", \"loopFocus\", \"multiple\", \"onValueChange\", \"orientation\", \"rovingFocus\", \"value\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"value\", \"disabled\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventKey","dataAttr","isSafari","isSelfTarget","createScope","nextById","prevById","queryAll","first","last","dom","getRootId","ctx","ids","root","id","getItemId","value","item","getRootEl","getById","getElements","ownerId","CSS","escape","selector","getFirstEl","getLastEl","getNextEl","currentLoopFocus","getPrevEl","connect","state","send","normalize","context","disabled","isSingle","multiple","rovingFocus","isHorizontal","orientation","getItemState","props2","Boolean","pressed","includes","focused","focusedId","setValue","value2","type","getRootProps","element","attrs","dir","role","tabIndex","isTabbingBackward","style","outline","onMouseDown","onFocus","event","evt","nativeEvent","isClickFocus","onBlur","getItemProps","itemState","rovingTabIndex","button","onClick","currentTarget","focus","preventScroll","onKeyDown","defaultPrevented","keyMap","Tab","event2","isShiftTab","shiftKey","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Home","End","exec","key","preventDefault","createMachine","guards","raf","add","compact","isEqual","remove","not","and","machine","userContext","initial","loopFocus","isWithinToolbar","computed","ctx2","entry","on","actions","states","idle","target","guard","setIsTabbingBackward","clearIsTabbingBackward","setClickFocus","clearClickFocus","checkIfWithinToolbar","closestToolbar","closest","setFocusedId","clearFocusedId","next","Array","from","set","focusNextToggle","focusPrevToggle","focusFirstToggle","focusLastToggle","invoke","change","onValueChange","createProps","createSplitProps","props","splitProps","itemProps","splitItemProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\toggle-group\\src\\toggle-group.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\toggle-group\\src\\toggle-group.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\toggle-group\\src\\toggle-group.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\toggle-group\\src\\toggle-group.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\toggle-group\\src\\toggle-group.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"toggle-group\").parts(\"root\", \"item\")\nexport const parts = anatomy.build()\n","import { getEventKey, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { dataAttr, isSafari, isSelfTarget } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./toggle-group.anatomy\"\nimport { dom } from \"./toggle-group.dom\"\nimport type { ItemProps, ItemState, MachineApi, Send, State } from \"./toggle-group.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const value = state.context.value\n  const disabled = state.context.disabled\n  const isSingle = !state.context.multiple\n  const rovingFocus = state.context.rovingFocus\n  const isHorizontal = state.context.orientation === \"horizontal\"\n\n  function getItemState(props: ItemProps): ItemState {\n    const id = dom.getItemId(state.context, props.value)\n    return {\n      id,\n      disabled: Boolean(props.disabled || disabled),\n      pressed: !!value.includes(props.value),\n      focused: state.context.focusedId === id,\n    }\n  }\n\n  return {\n    value,\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        role: isSingle ? \"radiogroup\" : \"group\",\n        tabIndex: state.context.isTabbingBackward ? -1 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": state.context.orientation,\n        \"data-focus\": dataAttr(state.context.focusedId != null),\n        style: { outline: \"none\" },\n        onMouseDown() {\n          if (disabled) return\n          send(\"ROOT.MOUSE_DOWN\")\n        },\n        onFocus(event) {\n          if (disabled) return\n          const evt = event.nativeEvent || event\n          if (!isSelfTarget(evt) || !!state.context.isClickFocus || state.context.isTabbingBackward) return\n          send(\"ROOT.FOCUS\")\n        },\n        onBlur() {\n          if (disabled) return\n          send(\"ROOT.BLUR\")\n        },\n      })\n    },\n\n    getItemState,\n\n    getItemProps(props) {\n      const itemState = getItemState(props)\n      const rovingTabIndex = itemState.focused ? 0 : -1\n\n      return normalize.button({\n        ...parts.item.attrs,\n        id: itemState.id,\n        type: \"button\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        \"data-focus\": dataAttr(itemState.focused),\n        disabled: itemState.disabled,\n        tabIndex: rovingFocus ? rovingTabIndex : undefined,\n        // radio\n        role: isSingle ? \"radio\" : undefined,\n        \"aria-checked\": isSingle ? itemState.pressed : undefined,\n        \"aria-pressed\": isSingle ? undefined : itemState.pressed,\n        //\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        \"data-state\": itemState.pressed ? \"on\" : \"off\",\n        onFocus() {\n          if (itemState.disabled) return\n          send({ type: \"TOGGLE.FOCUS\", id: itemState.id })\n        },\n        onClick(event) {\n          if (itemState.disabled) return\n          send({ type: \"TOGGLE.CLICK\", id: itemState.id, value: props.value })\n          if (isSafari()) {\n            event.currentTarget.focus({ preventScroll: true })\n          }\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (!isSelfTarget(event)) return\n          if (itemState.disabled) return\n\n          const keyMap: EventKeyMap = {\n            Tab(event) {\n              const isShiftTab = event.shiftKey\n              send({ type: \"TOGGLE.SHIFT_TAB\", isShiftTab })\n            },\n            ArrowLeft() {\n              if (!rovingFocus || !isHorizontal) return\n              send(\"TOGGLE.FOCUS_PREV\")\n            },\n            ArrowRight() {\n              if (!rovingFocus || !isHorizontal) return\n              send(\"TOGGLE.FOCUS_NEXT\")\n            },\n            ArrowUp() {\n              if (!rovingFocus || isHorizontal) return\n              send(\"TOGGLE.FOCUS_PREV\")\n            },\n            ArrowDown() {\n              if (!rovingFocus || isHorizontal) return\n              send(\"TOGGLE.FOCUS_NEXT\")\n            },\n            Home() {\n              if (!rovingFocus) return\n              send(\"TOGGLE.FOCUS_FIRST\")\n            },\n            End() {\n              if (!rovingFocus) return\n              send(\"TOGGLE.FOCUS_LAST\")\n            },\n          }\n\n          const exec = keyMap[getEventKey(event)]\n\n          if (exec) {\n            exec(event)\n            if (event.key !== \"Tab\") event.preventDefault()\n          }\n        },\n      })\n    },\n  }\n}\n","import { createScope, nextById, prevById, queryAll } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./toggle-group.types\"\nimport { first, last } from \"@zag-js/utils\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `toggle-group:${ctx.id}`,\n  getItemId: (ctx: Ctx, value: string) => ctx.ids?.item?.(value) ?? `toggle-group:${ctx.id}:${value}`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getElements: (ctx: Ctx) => {\n    const ownerId = CSS.escape(dom.getRootId(ctx))\n    const selector = `[data-ownedby='${ownerId}']:not([data-disabled])`\n    return queryAll(dom.getRootEl(ctx), selector)\n  },\n  getFirstEl: (ctx: Ctx) => first(dom.getElements(ctx)),\n  getLastEl: (ctx: Ctx) => last(dom.getElements(ctx)),\n  getNextEl: (ctx: Ctx, id: string) => nextById(dom.getElements(ctx), id, ctx.currentLoopFocus),\n  getPrevEl: (ctx: Ctx, id: string) => prevById(dom.getElements(ctx), id, ctx.currentLoopFocus),\n})\n","import { createMachine, guards } from \"@zag-js/core\"\nimport { raf } from \"@zag-js/dom-query\"\nimport { add, compact, isEqual, remove } from \"@zag-js/utils\"\nimport { dom } from \"./toggle-group.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./toggle-group.types\"\n\nconst { not, and } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"toggle-group\",\n      initial: \"idle\",\n\n      context: {\n        value: [],\n        disabled: false,\n        orientation: \"horizontal\",\n        rovingFocus: true,\n        loopFocus: true,\n        ...ctx,\n        focusedId: null,\n        isTabbingBackward: false,\n        isClickFocus: false,\n        isWithinToolbar: false,\n      },\n\n      computed: {\n        currentLoopFocus: (ctx) => ctx.loopFocus && !ctx.isWithinToolbar,\n      },\n\n      entry: [\"checkIfWithinToolbar\"],\n\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"],\n        },\n        \"TOGGLE.CLICK\": {\n          actions: [\"setValue\"],\n        },\n        \"ROOT.MOUSE_DOWN\": {\n          actions: [\"setClickFocus\"],\n        },\n      },\n\n      states: {\n        idle: {\n          on: {\n            \"ROOT.FOCUS\": {\n              target: \"focused\",\n              guard: not(and(\"isClickFocus\", \"isTabbingBackward\")),\n              actions: [\"focusFirstToggle\", \"clearClickFocus\"],\n            },\n            \"TOGGLE.FOCUS\": {\n              target: \"focused\",\n              actions: [\"setFocusedId\"],\n            },\n          },\n        },\n\n        focused: {\n          on: {\n            \"ROOT.BLUR\": {\n              target: \"idle\",\n              actions: [\"clearIsTabbingBackward\"],\n            },\n            \"TOGGLE.FOCUS\": {\n              actions: [\"setFocusedId\"],\n            },\n            \"TOGGLE.FOCUS_NEXT\": {\n              actions: [\"focusNextToggle\"],\n            },\n            \"TOGGLE.FOCUS_PREV\": {\n              actions: [\"focusPrevToggle\"],\n            },\n            \"TOGGLE.FOCUS_FIRST\": {\n              actions: [\"focusFirstToggle\"],\n            },\n            \"TOGGLE.FOCUS_LAST\": {\n              actions: [\"focusLastToggle\"],\n            },\n            \"TOGGLE.SHIFT_TAB\": {\n              target: \"idle\",\n              actions: [\"setIsTabbingBackward\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isClickFocus: (ctx) => ctx.isClickFocus,\n        isTabbingBackward: (ctx) => ctx.isTabbingBackward,\n      },\n      actions: {\n        setIsTabbingBackward(ctx) {\n          ctx.isTabbingBackward = true\n        },\n        clearIsTabbingBackward(ctx) {\n          ctx.isTabbingBackward = false\n        },\n        setClickFocus(ctx) {\n          ctx.isClickFocus = true\n        },\n        clearClickFocus(ctx) {\n          ctx.isClickFocus = false\n        },\n        checkIfWithinToolbar(ctx) {\n          const closestToolbar = dom.getRootEl(ctx)?.closest(\"[role=toolbar]\")\n          ctx.isWithinToolbar = !!closestToolbar\n        },\n        setFocusedId(ctx, evt) {\n          ctx.focusedId = evt.id\n        },\n        clearFocusedId(ctx) {\n          ctx.focusedId = null\n        },\n        setValue(ctx, evt) {\n          if (!evt.value) return\n          let next = Array.from(ctx.value)\n          if (ctx.multiple) {\n            next = next.includes(evt.value) ? remove(next, evt.value) : add(next, evt.value)\n          } else {\n            next = isEqual(ctx.value, [evt.value]) ? [] : [evt.value]\n          }\n          set.value(ctx, next)\n        },\n        focusNextToggle(ctx) {\n          raf(() => {\n            if (!ctx.focusedId) return\n            dom.getNextEl(ctx, ctx.focusedId)?.focus({ preventScroll: true })\n          })\n        },\n        focusPrevToggle(ctx) {\n          raf(() => {\n            if (!ctx.focusedId) return\n            dom.getPrevEl(ctx, ctx.focusedId)?.focus({ preventScroll: true })\n          })\n        },\n        focusFirstToggle(ctx) {\n          raf(() => {\n            dom.getFirstEl(ctx)?.focus({ preventScroll: true })\n          })\n        },\n        focusLastToggle(ctx) {\n          raf(() => {\n            dom.getLastEl(ctx)?.focus({ preventScroll: true })\n          })\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  change(ctx: MachineContext) {\n    ctx.onValueChange?.({ value: Array.from(ctx.value) })\n  },\n}\n\nconst set = {\n  value(ctx: MachineContext, value: string[]) {\n    if (isEqual(ctx.value, value)) return\n    ctx.value = value\n    invoke.change(ctx)\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { ItemProps, UserDefinedContext } from \"./toggle-group.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"dir\",\n  \"disabled\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"loopFocus\",\n  \"multiple\",\n  \"onValueChange\",\n  \"orientation\",\n  \"rovingFocus\",\n  \"value\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const itemProps = createProps<ItemProps>()([\"value\", \"disabled\"])\n\nexport const splitItemProps = createSplitProps<ItemProps>(itemProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}