{"ast":null,"code":"// src/data-url-to-blob.ts\nfunction dataURItoBlob(uri) {\n  const binary = atob(uri.split(\",\")[1]);\n  const mimeString = uri.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  const buffer = new ArrayBuffer(binary.length);\n  const intArray = new Uint8Array(buffer);\n  for (let i = 0; i < binary.length; i++) {\n    intArray[i] = binary.charCodeAt(i);\n  }\n  return new Blob([buffer], {\n    type: mimeString\n  });\n}\n\n// src/download-file.ts\nfunction isMSEdge(win) {\n  return Boolean(win.navigator && win.navigator.msSaveOrOpenBlob);\n}\nfunction downloadFile(options) {\n  const {\n    file,\n    win,\n    type,\n    name\n  } = options;\n  const doc = win.document;\n  const obj = typeof file === \"string\" ? new Blob([file], {\n    type\n  }) : file;\n  const fileName = typeof file === \"string\" ? name : file instanceof File ? file.name : void 0;\n  if (isMSEdge(win)) {\n    win.navigator.msSaveOrOpenBlob(obj, fileName || \"file-download\");\n    return;\n  }\n  const url = win.URL.createObjectURL(obj);\n  const anchor = doc.createElement(\"a\");\n  anchor.style.display = \"none\";\n  anchor.href = url;\n  anchor.rel = \"noopener\";\n  anchor.download = fileName || \"file-download\";\n  doc.documentElement.appendChild(anchor);\n  anchor.click();\n  setTimeout(() => {\n    win.URL.revokeObjectURL(url);\n    anchor.remove();\n  }, 0);\n}\n\n// src/get-accept-attr.ts\nfunction isMIMEType(v) {\n  return v === \"audio/*\" || v === \"video/*\" || v === \"image/*\" || v === \"text/*\" || /\\w+\\/[-+.\\w]+/g.test(v);\n}\nfunction isExt(v) {\n  return /^.*\\.[\\w]+$/.test(v);\n}\nvar isValidMIME = v => isMIMEType(v) || isExt(v);\nfunction getAcceptAttrString(accept) {\n  if (!accept) return;\n  if (typeof accept === \"string\") {\n    return accept;\n  }\n  if (Array.isArray(accept)) {\n    return accept.filter(isValidMIME).join(\",\");\n  }\n  return Object.entries(accept).reduce((a, [mimeType, ext]) => [...a, mimeType, ...ext], []).filter(isValidMIME).join(\",\");\n}\n\n// src/get-file-data-url.ts\nvar getFileDataUrl = async file => {\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort();\n      reject(new Error(\"There was an error reading a file\"));\n    };\n    reader.onloadend = () => {\n      const {\n        result\n      } = reader;\n      if (result instanceof ArrayBuffer) {\n        reject(new Error(\"Expected DataURL as string from Blob/File, got ArrayBuffer\"));\n      } else {\n        resolve(result || void 0);\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n// src/get-total-file-size.ts\nvar getTotalFileSize = files => {\n  return files.reduce((acc, file) => acc + file.size, 0);\n};\n\n// src/is-file-equal.ts\nvar isFileEqual = (file1, file2) => {\n  return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type;\n};\n\n// src/is-valid-file-size.ts\nvar isDefined = v => v !== void 0 && v !== null;\nfunction isValidFileSize(file, minSize, maxSize) {\n  if (isDefined(file.size)) {\n    if (isDefined(minSize) && isDefined(maxSize)) {\n      if (file.size > maxSize) return [false, \"FILE_TOO_LARGE\"];\n      if (file.size < minSize) return [false, \"FILE_TOO_SMALL\"];\n    } else if (isDefined(minSize) && file.size < minSize) {\n      return [false, \"FILE_TOO_SMALL\"];\n    } else if (isDefined(maxSize) && file.size > maxSize) {\n      return [false, \"FILE_TOO_LARGE\"];\n    }\n  }\n  return [true, null];\n}\n\n// src/is-valid-file-type.ts\nfunction isFileAccepted(file, accept) {\n  if (file && accept) {\n    const types = Array.isArray(accept) ? accept : accept.split(\",\");\n    const fileName = file.name || \"\";\n    const mimeType = (file.type || \"\").toLowerCase();\n    const baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n    return types.some(type => {\n      const validType = type.trim().toLowerCase();\n      if (validType.charAt(0) === \".\") {\n        return fileName.toLowerCase().endsWith(validType);\n      }\n      if (validType.endsWith(\"/*\")) {\n        return baseMimeType === validType.replace(/\\/.*$/, \"\");\n      }\n      return mimeType === validType;\n    });\n  }\n  return true;\n}\nfunction isValidFileType(file, accept) {\n  const isAcceptable = file.type === \"application/x-moz-file\" || isFileAccepted(file, accept);\n  return [isAcceptable, isAcceptable ? null : \"FILE_INVALID_TYPE\"];\n}\nexport { dataURItoBlob, downloadFile, getAcceptAttrString, getFileDataUrl, getTotalFileSize, isFileEqual, isMSEdge, isValidFileSize, isValidFileType };","map":{"version":3,"names":["dataURItoBlob","uri","binary","atob","split","mimeString","buffer","ArrayBuffer","length","intArray","Uint8Array","i","charCodeAt","Blob","type","isMSEdge","win","Boolean","navigator","msSaveOrOpenBlob","downloadFile","options","file","name","doc","document","obj","fileName","File","url","URL","createObjectURL","anchor","createElement","style","display","href","rel","download","documentElement","appendChild","click","setTimeout","revokeObjectURL","remove","isMIMEType","v","test","isExt","isValidMIME","getAcceptAttrString","accept","Array","isArray","filter","join","Object","entries","reduce","a","mimeType","ext","getFileDataUrl","reader","FileReader","Promise","resolve","reject","onerror","abort","Error","onloadend","result","readAsDataURL","getTotalFileSize","files","acc","size","isFileEqual","file1","file2","isDefined","isValidFileSize","minSize","maxSize","isFileAccepted","types","toLowerCase","baseMimeType","replace","some","validType","trim","charAt","endsWith","isValidFileType","isAcceptable"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\data-url-to-blob.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\download-file.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\get-accept-attr.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\get-file-data-url.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\get-total-file-size.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\is-file-equal.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\is-valid-file-size.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\file-upload\\node_modules\\@zag-js\\file-utils\\src\\is-valid-file-type.ts"],"sourcesContent":["export function dataURItoBlob(uri: string): Blob {\n  const binary = atob(uri.split(\",\")[1])\n\n  // separate out the mime component\n  const mimeString = uri.split(\",\")[0].split(\":\")[1].split(\";\")[0]\n\n  // write the bytes of the string to an ArrayBuffer\n  const buffer = new ArrayBuffer(binary.length)\n\n  // create a view into the buffer\n  const intArray = new Uint8Array(buffer)\n\n  for (let i = 0; i < binary.length; i++) {\n    intArray[i] = binary.charCodeAt(i)\n  }\n\n  return new Blob([buffer], { type: mimeString })\n}\n","export function isMSEdge(win: Window): win is Window & { navigator: { msSaveOrOpenBlob: Function } } {\n  // @ts-ignore\n  return Boolean(win.navigator && win.navigator.msSaveOrOpenBlob)\n}\n\ninterface DownloadFileOptions {\n  /**\n   * The name of the file\n   */\n  name?: string\n  /**\n   * The MIME type of the file\n   */\n  type?: string\n  /**\n   * The file contents\n   */\n  file: File | Blob | string\n  /**\n   * The window environment\n   */\n  win: typeof window\n}\n\nexport function downloadFile(options: DownloadFileOptions) {\n  const { file, win, type, name } = options\n\n  const doc = win.document\n\n  const obj = typeof file === \"string\" ? new Blob([file], { type }) : file\n  const fileName = typeof file === \"string\" ? name : file instanceof File ? file.name : undefined\n\n  if (isMSEdge(win)) {\n    win.navigator.msSaveOrOpenBlob(obj, fileName || \"file-download\")\n    return\n  }\n\n  const url = win.URL.createObjectURL(obj)\n\n  const anchor = doc.createElement(\"a\")\n  anchor.style.display = \"none\"\n  anchor.href = url\n  anchor.rel = \"noopener\"\n  anchor.download = fileName || \"file-download\"\n\n  doc.documentElement.appendChild(anchor)\n  anchor.click()\n\n  setTimeout(() => {\n    win.URL.revokeObjectURL(url)\n    anchor.remove()\n  }, 0)\n}\n","function isMIMEType(v: string) {\n  return v === \"audio/*\" || v === \"video/*\" || v === \"image/*\" || v === \"text/*\" || /\\w+\\/[-+.\\w]+/g.test(v)\n}\n\nfunction isExt(v: string) {\n  return /^.*\\.[\\w]+$/.test(v)\n}\n\nconst isValidMIME = (v: string) => isMIMEType(v) || isExt(v)\n\nexport function getAcceptAttrString(accept: Record<string, string[]> | string | string[] | undefined) {\n  if (!accept) return\n\n  if (typeof accept === \"string\") {\n    return accept\n  }\n\n  if (Array.isArray(accept)) {\n    return accept.filter(isValidMIME).join(\",\")\n  }\n\n  return Object.entries(accept)\n    .reduce((a, [mimeType, ext]) => [...a, mimeType, ...ext], [] as string[])\n    .filter(isValidMIME)\n    .join(\",\")\n}\n","export const getFileDataUrl = async (file: File | Blob) => {\n  const reader = new FileReader()\n  return new Promise<string | undefined>((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort()\n      reject(new Error(\"There was an error reading a file\"))\n    }\n\n    reader.onloadend = () => {\n      const { result } = reader\n      if (result instanceof ArrayBuffer) {\n        reject(new Error(\"Expected DataURL as string from Blob/File, got ArrayBuffer\"))\n      } else {\n        resolve(result || undefined)\n      }\n    }\n\n    reader.readAsDataURL(file)\n  })\n}\n","export const getTotalFileSize = (files: File[]) => {\n  return files.reduce((acc, file) => acc + file.size, 0)\n}\n","export const isFileEqual = (file1: File, file2: File) => {\n  return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type\n}\n","import type { FileError } from \"./types\"\n\nconst isDefined = <T>(v: T | undefined): v is T => v !== undefined && v !== null\n\nexport function isValidFileSize(file: File, minSize?: number, maxSize?: number): [boolean, FileError | null] {\n  if (isDefined(file.size)) {\n    if (isDefined(minSize) && isDefined(maxSize)) {\n      if (file.size > maxSize) return [false, \"FILE_TOO_LARGE\"]\n      if (file.size < minSize) return [false, \"FILE_TOO_SMALL\"]\n    } else if (isDefined(minSize) && file.size < minSize) {\n      return [false, \"FILE_TOO_SMALL\"]\n    } else if (isDefined(maxSize) && file.size > maxSize) {\n      return [false, \"FILE_TOO_LARGE\"]\n    }\n  }\n  return [true, null]\n}\n","import type { FileError } from \"./types\"\n\nfunction isFileAccepted(file: File | null, accept: string[] | string | undefined) {\n  if (file && accept) {\n    const types = Array.isArray(accept) ? accept : accept.split(\",\")\n\n    const fileName = file.name || \"\"\n    const mimeType = (file.type || \"\").toLowerCase()\n    const baseMimeType = mimeType.replace(/\\/.*$/, \"\")\n\n    return types.some((type) => {\n      const validType = type.trim().toLowerCase()\n\n      if (validType.charAt(0) === \".\") {\n        return fileName.toLowerCase().endsWith(validType)\n      }\n\n      if (validType.endsWith(\"/*\")) {\n        return baseMimeType === validType.replace(/\\/.*$/, \"\")\n      }\n\n      return mimeType === validType\n    })\n  }\n  return true\n}\n\nexport function isValidFileType(file: File, accept: string | undefined): [boolean, FileError | null] {\n  const isAcceptable = file.type === \"application/x-moz-file\" || isFileAccepted(file, accept)\n  return [isAcceptable, isAcceptable ? null : \"FILE_INVALID_TYPE\"]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}