{"ast":null,"code":"// src/tags-input.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"tagsInput\").parts(\"root\", \"label\", \"control\", \"input\", \"clearTrigger\", \"item\", \"itemPreview\", \"itemInput\", \"itemText\", \"itemDeleteTrigger\");\nvar parts = anatomy.build();\n\n// src/tags-input.connect.ts\nimport { getEventKey, getNativeEvent } from \"@zag-js/dom-event\";\nimport { ariaAttr, dataAttr, isComposingEvent } from \"@zag-js/dom-query\";\n\n// src/tags-input.dom.ts\nimport { createScope, indexOfId, nextById, prevById, queryAll } from \"@zag-js/dom-query\";\nimport { dispatchInputValueEvent } from \"@zag-js/form-utils\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `tags-input:${ctx.id}`,\n  getInputId: ctx => ctx.ids?.input ?? `tags-input:${ctx.id}:input`,\n  getClearTriggerId: ctx => ctx.ids?.clearBtn ?? `tags-input:${ctx.id}:clear-btn`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `tags-input:${ctx.id}:hidden-input`,\n  getLabelId: ctx => ctx.ids?.label ?? `tags-input:${ctx.id}:label`,\n  getControlId: ctx => ctx.ids?.control ?? `tags-input:${ctx.id}:control`,\n  getItemId: (ctx, opt) => ctx.ids?.item?.(opt) ?? `tags-input:${ctx.id}:tag:${opt.value}:${opt.index}`,\n  getItemDeleteTriggerId: (ctx, opt) => ctx.ids?.itemDeleteTrigger?.(opt) ?? `${dom.getItemId(ctx, opt)}:delete-btn`,\n  getItemInputId: (ctx, opt) => ctx.ids?.itemInput?.(opt) ?? `${dom.getItemId(ctx, opt)}:input`,\n  getEditInputId: ctx => `${ctx.editedTagId}:input`,\n  getTagInputEl: (ctx, opt) => dom.getById(ctx, dom.getItemInputId(ctx, opt)),\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getInputEl: ctx => dom.getById(ctx, dom.getInputId(ctx)),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  getEditInputEl: ctx => dom.getById(ctx, dom.getEditInputId(ctx)),\n  getTagElements: ctx => queryAll(dom.getRootEl(ctx), `[data-part=item-preview]:not([data-disabled])`),\n  getFirstEl: ctx => dom.getTagElements(ctx)[0],\n  getLastEl: ctx => dom.getTagElements(ctx)[dom.getTagElements(ctx).length - 1],\n  getPrevEl: (ctx, id) => prevById(dom.getTagElements(ctx), id, false),\n  getNextEl: (ctx, id) => nextById(dom.getTagElements(ctx), id, false),\n  getTagElAtIndex: (ctx, index) => dom.getTagElements(ctx)[index],\n  getIndexOfId: (ctx, id) => indexOfId(dom.getTagElements(ctx), id),\n  isInputFocused: ctx => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),\n  getHighlightedTagValue: ctx => {\n    if (!ctx.highlightedTagId) return null;\n    const tagEl = dom.getById(ctx, ctx.highlightedTagId);\n    return tagEl?.dataset.value ?? null;\n  },\n  setHoverIntent: el => {\n    const tagEl = el.closest(\"[data-part=item-preview]\");\n    if (!tagEl) return;\n    tagEl.dataset.deleteIntent = \"\";\n  },\n  clearHoverIntent: el => {\n    const tagEl = el.closest(\"[data-part=item-preview]\");\n    if (!tagEl) return;\n    delete tagEl.dataset.deleteIntent;\n  },\n  dispatchInputEvent(ctx) {\n    const inputEl = dom.getHiddenInputEl(ctx);\n    if (!inputEl) return;\n    dispatchInputValueEvent(inputEl, {\n      value: ctx.valueAsString\n    });\n  }\n});\n\n// src/tags-input.connect.ts\nfunction connect(state, send, normalize) {\n  const interactive = state.context.isInteractive;\n  const disabled = state.context.disabled;\n  const readOnly = state.context.readOnly;\n  const invalid = state.context.invalid || state.context.isOverflowing;\n  const translations = state.context.translations;\n  const focused = state.hasTag(\"focused\");\n  const editingTag = state.matches(\"editing:tag\");\n  const empty = state.context.count === 0;\n  function getItemState(options) {\n    const id = dom.getItemId(state.context, options);\n    return {\n      id,\n      editing: editingTag && state.context.editedTagId === id,\n      highlighted: id === state.context.highlightedTagId,\n      disabled: Boolean(options.disabled || disabled)\n    };\n  }\n  return {\n    empty,\n    inputValue: state.context.trimmedInputValue,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    count: state.context.count,\n    atMax: state.context.isAtMax,\n    setValue(value) {\n      send({\n        type: \"SET_VALUE\",\n        value\n      });\n    },\n    clearValue(id) {\n      if (id) {\n        send({\n          type: \"CLEAR_TAG\",\n          id\n        });\n      } else {\n        send(\"CLEAR_VALUE\");\n      }\n    },\n    addValue(value) {\n      send({\n        type: \"ADD_TAG\",\n        value\n      });\n    },\n    setValueAtIndex(index, value) {\n      send({\n        type: \"SET_VALUE_AT_INDEX\",\n        index,\n        value\n      });\n    },\n    setInputValue(value) {\n      send({\n        type: \"SET_INPUT_VALUE\",\n        value\n      });\n    },\n    clearInputValue() {\n      send({\n        type: \"SET_INPUT_VALUE\",\n        value: \"\"\n      });\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus();\n    },\n    getItemState,\n    getRootProps() {\n      return normalize.element({\n        dir: state.context.dir,\n        ...parts.root.attrs,\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-empty\": dataAttr(empty),\n        id: dom.getRootId(state.context),\n        onPointerDown() {\n          if (!interactive) return;\n          send(\"POINTER_DOWN\");\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir,\n        htmlFor: dom.getInputId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        id: dom.getControlId(state.context),\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        tabIndex: readOnly ? 0 : void 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        maxLength: state.context.maxLength,\n        id: dom.getInputId(state.context),\n        defaultValue: state.context.inputValue,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"none\",\n        disabled: disabled || readOnly,\n        onChange(event) {\n          const evt = getNativeEvent(event);\n          const value = event.target.value;\n          if (evt.inputType === \"insertFromPaste\") {\n            send({\n              type: \"PASTE\",\n              value\n            });\n            return;\n          }\n          if (endsWith(value, state.context.delimiter)) {\n            send(\"DELIMITER_KEY\");\n            return;\n          }\n          send({\n            type: \"TYPE\",\n            value,\n            key: evt.inputType\n          });\n        },\n        onFocus() {\n          send(\"FOCUS\");\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = event.currentTarget;\n          const isCombobox = target.getAttribute(\"role\") === \"combobox\";\n          const isExpanded = target.ariaExpanded === \"true\";\n          const keyMap = {\n            ArrowDown() {\n              send(\"ARROW_DOWN\");\n            },\n            ArrowLeft() {\n              if (isCombobox && isExpanded) return;\n              send(\"ARROW_LEFT\");\n            },\n            ArrowRight(event2) {\n              if (state.context.highlightedTagId) {\n                event2.preventDefault();\n              }\n              if (isCombobox && isExpanded) return;\n              send(\"ARROW_RIGHT\");\n            },\n            Escape(event2) {\n              event2.preventDefault();\n              send(\"ESCAPE\");\n            },\n            Backspace() {\n              send(\"BACKSPACE\");\n            },\n            Delete() {\n              send(\"DELETE\");\n            },\n            Enter(event2) {\n              if (isCombobox && isExpanded) return;\n              send(\"ENTER\");\n              event2.preventDefault();\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        hidden: true,\n        name: state.context.name,\n        form: state.context.form,\n        disabled,\n        readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        defaultValue: state.context.valueAsString\n      });\n    },\n    getItemProps(props2) {\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-value\": props2.value,\n        \"data-disabled\": dataAttr(disabled)\n      });\n    },\n    getItemPreviewProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.itemPreview.attrs,\n        id: itemState.id,\n        dir: state.context.dir,\n        hidden: itemState.editing,\n        \"data-value\": props2.value,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        onPointerDown(event) {\n          if (!interactive || itemState.disabled) return;\n          event.preventDefault();\n          send({\n            type: \"POINTER_DOWN_TAG\",\n            id: itemState.id\n          });\n        },\n        onDoubleClick() {\n          if (!interactive || itemState.disabled) return;\n          send({\n            type: \"DOUBLE_CLICK_TAG\",\n            id: itemState.id\n          });\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted)\n      });\n    },\n    getItemInputProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.input({\n        ...parts.itemInput.attrs,\n        dir: state.context.dir,\n        \"aria-label\": translations.tagEdited(props2.value),\n        \"aria-hidden\": true,\n        disabled,\n        id: dom.getItemInputId(state.context, props2),\n        tabIndex: -1,\n        hidden: !itemState.editing,\n        defaultValue: itemState.editing ? state.context.editedTagValue : \"\",\n        onChange(event) {\n          send({\n            type: \"TAG_INPUT_TYPE\",\n            value: event.target.value\n          });\n        },\n        onBlur(event) {\n          send({\n            type: \"TAG_INPUT_BLUR\",\n            target: event.relatedTarget,\n            id: itemState.id\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const keyMap = {\n            Enter() {\n              send(\"TAG_INPUT_ENTER\");\n            },\n            Escape() {\n              send(\"TAG_INPUT_ESCAPE\");\n            }\n          };\n          const exec = keyMap[event.key];\n          if (exec) {\n            event.preventDefault();\n            exec(event);\n          }\n        }\n      });\n    },\n    getItemDeleteTriggerProps(props2) {\n      const id = dom.getItemId(state.context, props2);\n      return normalize.button({\n        ...parts.itemDeleteTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getItemDeleteTriggerId(state.context, props2),\n        type: \"button\",\n        disabled,\n        \"aria-label\": translations.deleteTagTriggerLabel(props2.value),\n        tabIndex: -1,\n        onPointerDown(event) {\n          if (!interactive) {\n            event.preventDefault();\n          }\n        },\n        onPointerMove(event) {\n          if (!interactive) return;\n          dom.setHoverIntent(event.currentTarget);\n        },\n        onPointerLeave(event) {\n          if (!interactive) return;\n          dom.clearHoverIntent(event.currentTarget);\n        },\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"CLICK_DELETE_TAG\",\n            id\n          });\n        }\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getClearTriggerId(state.context),\n        type: \"button\",\n        \"data-readonly\": dataAttr(readOnly),\n        disabled,\n        \"aria-label\": translations.clearTriggerLabel,\n        hidden: empty,\n        onClick() {\n          if (!interactive) return;\n          send(\"CLEAR_VALUE\");\n        }\n      });\n    }\n  };\n}\nfunction endsWith(str, del) {\n  if (!del) return false;\n  if (typeof del === \"string\") return str.endsWith(del);\n  return new RegExp(`${del.source}$`).test(str);\n}\n\n// src/tags-input.machine.ts\nimport { autoResizeInput } from \"@zag-js/auto-resize\";\nimport { createMachine, guards } from \"@zag-js/core\";\nimport { contains, raf } from \"@zag-js/dom-query\";\nimport { trackFormControl } from \"@zag-js/form-utils\";\nimport { trackInteractOutside } from \"@zag-js/interact-outside\";\nimport { createLiveRegion } from \"@zag-js/live-region\";\nimport { compact, isEqual, removeAt, uniq, warn } from \"@zag-js/utils\";\nvar {\n  and,\n  not,\n  or\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"tags-input\",\n    initial: ctx.autoFocus ? \"focused:input\" : \"idle\",\n    context: {\n      inputValue: \"\",\n      editedTagValue: \"\",\n      editedTagId: null,\n      highlightedTagId: null,\n      value: [],\n      dir: \"ltr\",\n      max: Infinity,\n      blurBehavior: void 0,\n      addOnPaste: false,\n      editable: true,\n      validate: () => true,\n      delimiter: \",\",\n      disabled: false,\n      readOnly: false,\n      ...ctx,\n      liveRegion: null,\n      log: {\n        current: null,\n        prev: null\n      },\n      fieldsetDisabled: false,\n      translations: {\n        clearTriggerLabel: \"Clear all tags\",\n        deleteTagTriggerLabel: value => `Delete tag ${value}`,\n        tagAdded: value => `Added tag ${value}`,\n        tagsPasted: values => `Pasted ${values.length} tags`,\n        tagEdited: value => `Editing tag ${value}. Press enter to save or escape to cancel.`,\n        tagUpdated: value => `Tag update to ${value}`,\n        tagDeleted: value => `Tag ${value} deleted`,\n        tagSelected: value => `Tag ${value} selected. Press enter to edit, delete or backspace to remove.`,\n        ...ctx.translations\n      }\n    },\n    computed: {\n      count: ctx2 => ctx2.value.length,\n      valueAsString: ctx2 => JSON.stringify(ctx2.value),\n      trimmedInputValue: ctx2 => ctx2.inputValue.trim(),\n      isDisabled: ctx2 => !!ctx2.disabled || ctx2.fieldsetDisabled,\n      isInteractive: ctx2 => !(ctx2.readOnly || ctx2.isDisabled),\n      isAtMax: ctx2 => ctx2.count === ctx2.max,\n      isOverflowing: ctx2 => ctx2.count > ctx2.max\n    },\n    watch: {\n      highlightedTagId: \"logHighlightedTag\",\n      isOverflowing: \"invokeOnInvalid\",\n      log: \"announceLog\",\n      inputValue: \"syncInputValue\",\n      editedTagValue: \"syncEditedTagInputValue\"\n    },\n    activities: [\"trackLiveRegion\", \"trackFormControlState\"],\n    exit: [\"clearLog\"],\n    on: {\n      DOUBLE_CLICK_TAG: {\n        internal: true,\n        guard: \"isTagEditable\",\n        target: \"editing:tag\",\n        actions: [\"setEditedId\", \"initializeEditedTagValue\"]\n      },\n      POINTER_DOWN_TAG: {\n        internal: true,\n        target: \"navigating:tag\",\n        actions: [\"highlightTag\", \"focusInput\"]\n      },\n      CLICK_DELETE_TAG: {\n        target: \"focused:input\",\n        actions: [\"deleteTag\"]\n      },\n      SET_INPUT_VALUE: {\n        actions: [\"setInputValue\"]\n      },\n      SET_VALUE: {\n        actions: [\"setValue\"]\n      },\n      CLEAR_TAG: {\n        actions: [\"deleteTag\"]\n      },\n      SET_VALUE_AT_INDEX: {\n        actions: [\"setValueAtIndex\"]\n      },\n      CLEAR_VALUE: {\n        actions: [\"clearTags\", \"clearInputValue\", \"focusInput\"]\n      },\n      ADD_TAG: {\n        // (!isAtMax || allowOverflow) && !inputValueIsEmpty\n        guard: and(or(not(\"isAtMax\"), \"allowOverflow\"), not(\"isInputValueEmpty\")),\n        actions: [\"addTag\", \"clearInputValue\"]\n      },\n      EXTERNAL_BLUR: [{\n        guard: \"addOnBlur\",\n        actions: \"raiseAddTagEvent\"\n      }, {\n        guard: \"clearOnBlur\",\n        actions: \"clearInputValue\"\n      }]\n    },\n    states: {\n      idle: {\n        on: {\n          FOCUS: \"focused:input\",\n          POINTER_DOWN: {\n            guard: not(\"hasHighlightedTag\"),\n            target: \"focused:input\"\n          }\n        }\n      },\n      \"focused:input\": {\n        tags: [\"focused\"],\n        entry: [\"focusInput\", \"clearHighlightedId\"],\n        activities: [\"trackInteractOutside\"],\n        on: {\n          TYPE: {\n            actions: \"setInputValue\"\n          },\n          BLUR: [{\n            guard: \"addOnBlur\",\n            target: \"idle\",\n            actions: \"raiseAddTagEvent\"\n          }, {\n            guard: \"clearOnBlur\",\n            target: \"idle\",\n            actions: \"clearInputValue\"\n          }, {\n            target: \"idle\"\n          }],\n          ENTER: {\n            actions: [\"raiseAddTagEvent\"]\n          },\n          DELIMITER_KEY: {\n            actions: [\"raiseAddTagEvent\"]\n          },\n          ARROW_LEFT: {\n            guard: and(\"hasTags\", \"isInputCaretAtStart\"),\n            target: \"navigating:tag\",\n            actions: \"highlightLastTag\"\n          },\n          BACKSPACE: {\n            target: \"navigating:tag\",\n            guard: and(\"hasTags\", \"isInputCaretAtStart\"),\n            actions: \"highlightLastTag\"\n          },\n          PASTE: [{\n            guard: \"addOnPaste\",\n            actions: [\"setInputValue\", \"addTagFromPaste\"]\n          }, {\n            actions: \"setInputValue\"\n          }]\n        }\n      },\n      \"navigating:tag\": {\n        tags: [\"focused\"],\n        activities: [\"trackInteractOutside\"],\n        on: {\n          ARROW_RIGHT: [{\n            guard: and(\"hasTags\", \"isInputCaretAtStart\", not(\"isLastTagHighlighted\")),\n            actions: \"highlightNextTag\"\n          }, {\n            target: \"focused:input\"\n          }],\n          ARROW_LEFT: {\n            actions: \"highlightPrevTag\"\n          },\n          BLUR: {\n            target: \"idle\",\n            actions: \"clearHighlightedId\"\n          },\n          ENTER: {\n            guard: and(\"isTagEditable\", \"hasHighlightedTag\"),\n            target: \"editing:tag\",\n            actions: [\"setEditedId\", \"initializeEditedTagValue\", \"focusEditedTagInput\"]\n          },\n          ARROW_DOWN: \"focused:input\",\n          ESCAPE: \"focused:input\",\n          TYPE: {\n            target: \"focused:input\",\n            actions: \"setInputValue\"\n          },\n          BACKSPACE: [{\n            guard: \"isFirstTagHighlighted\",\n            actions: [\"deleteHighlightedTag\", \"highlightFirstTag\"]\n          }, {\n            actions: [\"deleteHighlightedTag\", \"highlightPrevTag\"]\n          }],\n          DELETE: {\n            actions: [\"deleteHighlightedTag\", \"highlightTagAtIndex\"]\n          },\n          PASTE: [{\n            guard: \"addOnPaste\",\n            target: \"focused:input\",\n            actions: [\"setInputValue\", \"addTagFromPaste\"]\n          }, {\n            target: \"focused:input\",\n            actions: \"setInputValue\"\n          }]\n        }\n      },\n      \"editing:tag\": {\n        tags: [\"editing\", \"focused\"],\n        entry: \"focusEditedTagInput\",\n        activities: [\"autoResize\"],\n        on: {\n          TAG_INPUT_TYPE: {\n            actions: \"setEditedTagValue\"\n          },\n          TAG_INPUT_ESCAPE: {\n            target: \"navigating:tag\",\n            actions: [\"clearEditedTagValue\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"]\n          },\n          TAG_INPUT_BLUR: [{\n            guard: \"isInputRelatedTarget\",\n            target: \"navigating:tag\",\n            actions: [\"clearEditedTagValue\", \"clearHighlightedId\", \"clearEditedId\"]\n          }, {\n            target: \"idle\",\n            actions: [\"clearEditedTagValue\", \"clearHighlightedId\", \"clearEditedId\", \"raiseExternalBlurEvent\"]\n          }],\n          TAG_INPUT_ENTER: [{\n            guard: \"isEditedTagEmpty\",\n            target: \"navigating:tag\",\n            actions: [\"deleteHighlightedTag\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"]\n          }, {\n            target: \"navigating:tag\",\n            actions: [\"submitEditedTagValue\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"]\n          }]\n        }\n      }\n    }\n  }, {\n    guards: {\n      isInputRelatedTarget: (ctx2, evt) => evt.relatedTarget === dom.getInputEl(ctx2),\n      isAtMax: ctx2 => ctx2.isAtMax,\n      hasHighlightedTag: ctx2 => ctx2.highlightedTagId !== null,\n      isFirstTagHighlighted: ctx2 => {\n        const firstItemId = dom.getItemId(ctx2, {\n          value: ctx2.value[0],\n          index: 0\n        });\n        return firstItemId === ctx2.highlightedTagId;\n      },\n      isEditedTagEmpty: ctx2 => ctx2.editedTagValue.trim() === \"\",\n      isLastTagHighlighted: ctx2 => {\n        const lastIndex = ctx2.value.length - 1;\n        const lastItemId = dom.getItemId(ctx2, {\n          value: ctx2.value[lastIndex],\n          index: lastIndex\n        });\n        return lastItemId === ctx2.highlightedTagId;\n      },\n      isInputValueEmpty: ctx2 => ctx2.trimmedInputValue.length === 0,\n      hasTags: ctx2 => ctx2.value.length > 0,\n      allowOverflow: ctx2 => !!ctx2.allowOverflow,\n      autoFocus: ctx2 => !!ctx2.autoFocus,\n      addOnBlur: ctx2 => ctx2.blurBehavior === \"add\",\n      clearOnBlur: ctx2 => ctx2.blurBehavior === \"clear\",\n      addOnPaste: ctx2 => !!ctx2.addOnPaste,\n      isTagEditable: ctx2 => !!ctx2.editable,\n      isInputCaretAtStart(ctx2) {\n        const input = dom.getInputEl(ctx2);\n        if (!input) return false;\n        try {\n          return input.selectionStart === 0 && input.selectionEnd === 0;\n        } catch (e) {\n          return input.value === \"\";\n        }\n      }\n    },\n    activities: {\n      trackInteractOutside(ctx2, _evt, {\n        send\n      }) {\n        return trackInteractOutside(dom.getInputEl(ctx2), {\n          exclude(target) {\n            return contains(dom.getRootEl(ctx2), target);\n          },\n          onFocusOutside: ctx2.onFocusOutside,\n          onPointerDownOutside: ctx2.onPointerDownOutside,\n          onInteractOutside(event) {\n            ctx2.onInteractOutside?.(event);\n            if (event.defaultPrevented) return;\n            send({\n              type: \"BLUR\",\n              src: \"interact-outside\"\n            });\n          }\n        });\n      },\n      trackFormControlState(ctx2, _evt, {\n        send,\n        initialContext\n      }) {\n        return trackFormControl(dom.getHiddenInputEl(ctx2), {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            send({\n              type: \"SET_VALUE\",\n              value: initialContext.value,\n              src: \"form-reset\"\n            });\n          }\n        });\n      },\n      autoResize(ctx2) {\n        if (!ctx2.editedTagValue || ctx2.idx == null || !ctx2.editable) return;\n        const input = dom.getTagInputEl(ctx2, {\n          value: ctx2.editedTagValue,\n          index: ctx2.idx\n        });\n        return autoResizeInput(input);\n      },\n      trackLiveRegion(ctx2) {\n        ctx2.liveRegion = createLiveRegion({\n          level: \"assertive\",\n          document: dom.getDoc(ctx2)\n        });\n        return () => ctx2.liveRegion?.destroy();\n      }\n    },\n    actions: {\n      raiseAddTagEvent(_, __, {\n        self\n      }) {\n        self.send(\"ADD_TAG\");\n      },\n      raiseExternalBlurEvent(_, evt, {\n        self\n      }) {\n        self.send({\n          type: \"EXTERNAL_BLUR\",\n          id: evt.id\n        });\n      },\n      dispatchChangeEvent(ctx2) {\n        dom.dispatchInputEvent(ctx2);\n      },\n      highlightNextTag(ctx2) {\n        if (ctx2.highlightedTagId == null) return;\n        const next = dom.getNextEl(ctx2, ctx2.highlightedTagId);\n        set.highlightedId(ctx2, next?.id ?? null);\n      },\n      highlightFirstTag(ctx2) {\n        raf(() => {\n          const first = dom.getFirstEl(ctx2);\n          set.highlightedId(ctx2, first?.id ?? null);\n        });\n      },\n      highlightLastTag(ctx2) {\n        const last = dom.getLastEl(ctx2);\n        set.highlightedId(ctx2, last?.id ?? null);\n      },\n      highlightPrevTag(ctx2) {\n        if (ctx2.highlightedTagId == null) return;\n        const prev = dom.getPrevEl(ctx2, ctx2.highlightedTagId);\n        set.highlightedId(ctx2, prev?.id ?? null);\n      },\n      highlightTag(ctx2, evt) {\n        set.highlightedId(ctx2, evt.id);\n      },\n      highlightTagAtIndex(ctx2) {\n        raf(() => {\n          if (ctx2.idx == null) return;\n          const tagEl = dom.getTagElAtIndex(ctx2, ctx2.idx);\n          if (tagEl == null) return;\n          set.highlightedId(ctx2, tagEl.id);\n          ctx2.idx = void 0;\n        });\n      },\n      deleteTag(ctx2, evt) {\n        const index = dom.getIndexOfId(ctx2, evt.id);\n        const value = ctx2.value[index];\n        ctx2.log.prev = ctx2.log.current;\n        ctx2.log.current = {\n          type: \"delete\",\n          value\n        };\n        set.value(ctx2, removeAt(ctx2.value, index));\n      },\n      deleteHighlightedTag(ctx2) {\n        if (ctx2.highlightedTagId == null) return;\n        const index = dom.getIndexOfId(ctx2, ctx2.highlightedTagId);\n        ctx2.idx = index;\n        const value = ctx2.value[index];\n        ctx2.log.prev = ctx2.log.current;\n        ctx2.log.current = {\n          type: \"delete\",\n          value\n        };\n        set.value(ctx2, removeAt(ctx2.value, index));\n      },\n      setEditedId(ctx2, evt) {\n        ctx2.editedTagId = evt.id ?? ctx2.highlightedTagId;\n        ctx2.idx = dom.getIndexOfId(ctx2, ctx2.editedTagId);\n      },\n      clearEditedId(ctx2) {\n        ctx2.editedTagId = null;\n      },\n      clearEditedTagValue(ctx2) {\n        ctx2.editedTagValue = \"\";\n      },\n      setEditedTagValue(ctx2, evt) {\n        ctx2.editedTagValue = evt.value;\n      },\n      submitEditedTagValue(ctx2) {\n        if (!ctx2.editedTagId) return;\n        const index = dom.getIndexOfId(ctx2, ctx2.editedTagId);\n        set.valueAtIndex(ctx2, index, ctx2.editedTagValue ?? \"\");\n        ctx2.log.prev = ctx2.log.current;\n        ctx2.log.current = {\n          type: \"update\",\n          value: ctx2.editedTagValue\n        };\n      },\n      setValueAtIndex(ctx2, evt) {\n        if (evt.value) {\n          ctx2.value[evt.index] = evt.value;\n          ctx2.log.prev = ctx2.log.current;\n          ctx2.log.current = {\n            type: \"update\",\n            value: evt.value\n          };\n        } else {\n          warn(\"You need to provide a value for the tag\");\n        }\n      },\n      initializeEditedTagValue(ctx2) {\n        if (!ctx2.editedTagId) return;\n        const index = dom.getIndexOfId(ctx2, ctx2.editedTagId);\n        ctx2.editedTagValue = ctx2.value[index];\n      },\n      focusEditedTagInput(ctx2) {\n        raf(() => {\n          dom.getEditInputEl(ctx2)?.select();\n        });\n      },\n      setInputValue(ctx2, evt) {\n        set.inputValue(ctx2, evt.value);\n      },\n      clearHighlightedId(ctx2) {\n        ctx2.highlightedTagId = null;\n      },\n      focusInput(ctx2) {\n        raf(() => {\n          dom.getInputEl(ctx2)?.focus();\n        });\n      },\n      clearInputValue(ctx2) {\n        raf(() => {\n          set.inputValue(ctx2, \"\");\n        });\n      },\n      syncInputValue(ctx2) {\n        const inputEl = dom.getInputEl(ctx2);\n        dom.setValue(inputEl, ctx2.inputValue);\n      },\n      syncEditedTagInputValue(ctx2, evt) {\n        const id = ctx2.editedTagId || ctx2.highlightedTagId || evt.id;\n        if (id == null) return;\n        const editTagInputEl = dom.getById(ctx2, `${id}:input`);\n        dom.setValue(editTagInputEl, ctx2.editedTagValue);\n      },\n      addTag(ctx2, evt) {\n        const value = evt.value ?? ctx2.trimmedInputValue;\n        const guard = ctx2.validate?.({\n          inputValue: value,\n          value: Array.from(ctx2.value)\n        });\n        if (guard) {\n          const nextValue = uniq(ctx2.value.concat(value));\n          set.value(ctx2, nextValue);\n          ctx2.log.prev = ctx2.log.current;\n          ctx2.log.current = {\n            type: \"add\",\n            value\n          };\n        } else {\n          ctx2.onValueInvalid?.({\n            reason: \"invalidTag\"\n          });\n        }\n      },\n      addTagFromPaste(ctx2) {\n        raf(() => {\n          const value = ctx2.trimmedInputValue;\n          const guard = ctx2.validate?.({\n            inputValue: value,\n            value: Array.from(ctx2.value)\n          });\n          if (guard) {\n            const trimmedValue = ctx2.delimiter ? value.split(ctx2.delimiter).map(v => v.trim()) : [value];\n            const nextValue = uniq(ctx2.value.concat(...trimmedValue));\n            set.value(ctx2, nextValue);\n            ctx2.log.prev = ctx2.log.current;\n            ctx2.log.current = {\n              type: \"paste\",\n              values: trimmedValue\n            };\n          } else {\n            ctx2.onValueInvalid?.({\n              reason: \"invalidTag\"\n            });\n          }\n          set.inputValue(ctx2, \"\");\n        });\n      },\n      clearTags(ctx2) {\n        set.value(ctx2, []);\n        ctx2.log.prev = ctx2.log.current;\n        ctx2.log.current = {\n          type: \"clear\"\n        };\n      },\n      setValue(ctx2, evt) {\n        set.value(ctx2, evt.value);\n      },\n      invokeOnInvalid(ctx2) {\n        if (ctx2.isOverflowing) {\n          ctx2.onValueInvalid?.({\n            reason: \"rangeOverflow\"\n          });\n        }\n      },\n      clearLog(ctx2) {\n        ctx2.log = {\n          prev: null,\n          current: null\n        };\n      },\n      logHighlightedTag(ctx2) {\n        if (ctx2.highlightedTagId == null) return;\n        const index = dom.getIndexOfId(ctx2, ctx2.highlightedTagId);\n        ctx2.log.prev = ctx2.log.current;\n        ctx2.log.current = {\n          type: \"select\",\n          value: ctx2.value[index]\n        };\n      },\n      // queue logs with screen reader and get it announced\n      announceLog(ctx2) {\n        if (!ctx2.log.current || ctx2.liveRegion == null) return;\n        const region = ctx2.liveRegion;\n        const {\n          current,\n          prev\n        } = ctx2.log;\n        let msg;\n        switch (current.type) {\n          case \"add\":\n            msg = ctx2.translations.tagAdded(current.value);\n            break;\n          case \"delete\":\n            msg = ctx2.translations.tagDeleted(current.value);\n            break;\n          case \"update\":\n            msg = ctx2.translations.tagUpdated(current.value);\n            break;\n          case \"paste\":\n            msg = ctx2.translations.tagsPasted(current.values);\n            break;\n          case \"select\":\n            msg = ctx2.translations.tagSelected(current.value);\n            if (prev?.type === \"delete\") {\n              msg = `${ctx2.translations.tagDeleted(prev.value)}. ${msg}`;\n            } else if (prev?.type === \"update\") {\n              msg = `${ctx2.translations.tagUpdated(prev.value)}. ${msg}`;\n            }\n            break;\n          default:\n            break;\n        }\n        if (msg) region.announce(msg);\n      }\n    }\n  });\n}\nvar invoke = {\n  change: ctx => {\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value)\n    });\n    dom.dispatchInputEvent(ctx);\n  },\n  highlightChange: ctx => {\n    const highlightedValue = dom.getHighlightedTagValue(ctx);\n    ctx.onHighlightChange?.({\n      highlightedValue\n    });\n  },\n  valueChange: ctx => {\n    ctx.onInputValueChange?.({\n      inputValue: ctx.inputValue\n    });\n  }\n};\nvar set = {\n  value: (ctx, value) => {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.change(ctx);\n  },\n  valueAtIndex: (ctx, index, value) => {\n    if (isEqual(ctx.value[index], value)) return;\n    ctx.value[index] = value;\n    invoke.change(ctx);\n  },\n  highlightedId: (ctx, id) => {\n    if (isEqual(ctx.highlightedTagId, id)) return;\n    ctx.highlightedTagId = id;\n    invoke.highlightChange(ctx);\n  },\n  inputValue: (ctx, value) => {\n    if (isEqual(ctx.inputValue, value)) return;\n    ctx.inputValue = value;\n    invoke.valueChange(ctx);\n  }\n};\n\n// src/tags-input.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"addOnPaste\", \"allowOverflow\", \"autoFocus\", \"blurBehavior\", \"delimiter\", \"dir\", \"disabled\", \"editable\", \"form\", \"getRootNode\", \"id\", \"ids\", \"inputValue\", \"invalid\", \"max\", \"maxLength\", \"name\", \"onFocusOutside\", \"onHighlightChange\", \"onInputValueChange\", \"onInteractOutside\", \"onPointerDownOutside\", \"onValueChange\", \"onValueInvalid\", \"required\", \"readOnly\", \"translations\", \"validate\", \"value\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"index\", \"disabled\", \"value\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventKey","getNativeEvent","ariaAttr","dataAttr","isComposingEvent","createScope","indexOfId","nextById","prevById","queryAll","dispatchInputValueEvent","dom","getRootId","ctx","ids","root","id","getInputId","input","getClearTriggerId","clearBtn","getHiddenInputId","hiddenInput","getLabelId","label","getControlId","control","getItemId","opt","item","value","index","getItemDeleteTriggerId","itemDeleteTrigger","getItemInputId","itemInput","getEditInputId","editedTagId","getTagInputEl","getById","getRootEl","getInputEl","getHiddenInputEl","getEditInputEl","getTagElements","getFirstEl","getLastEl","length","getPrevEl","getNextEl","getTagElAtIndex","getIndexOfId","isInputFocused","getDoc","activeElement","getHighlightedTagValue","highlightedTagId","tagEl","dataset","setHoverIntent","el","closest","deleteIntent","clearHoverIntent","dispatchInputEvent","inputEl","valueAsString","connect","state","send","normalize","interactive","context","isInteractive","disabled","readOnly","invalid","isOverflowing","translations","focused","hasTag","editingTag","matches","empty","count","getItemState","options","editing","highlighted","Boolean","inputValue","trimmedInputValue","atMax","isAtMax","setValue","type","clearValue","addValue","setValueAtIndex","setInputValue","clearInputValue","focus","getRootProps","element","dir","attrs","onPointerDown","getLabelProps","htmlFor","getControlProps","tabIndex","getInputProps","maxLength","defaultValue","autoComplete","autoCorrect","autoCapitalize","onChange","event","evt","target","inputType","endsWith","delimiter","key","onFocus","onKeyDown","defaultPrevented","currentTarget","isCombobox","getAttribute","isExpanded","ariaExpanded","keyMap","ArrowDown","ArrowLeft","ArrowRight","event2","preventDefault","Escape","Backspace","Delete","Enter","exec","getHiddenInputProps","hidden","name","form","required","getItemProps","props2","getItemPreviewProps","itemState","itemPreview","onDoubleClick","getItemTextProps","itemText","getItemInputProps","tagEdited","editedTagValue","onBlur","relatedTarget","getItemDeleteTriggerProps","button","deleteTagTriggerLabel","onPointerMove","onPointerLeave","onClick","getClearTriggerProps","clearTrigger","clearTriggerLabel","str","del","RegExp","source","test","autoResizeInput","createMachine","guards","contains","raf","trackFormControl","trackInteractOutside","createLiveRegion","compact","isEqual","removeAt","uniq","warn","and","not","or","machine","userContext","initial","autoFocus","max","Infinity","blurBehavior","addOnPaste","editable","validate","liveRegion","log","current","prev","fieldsetDisabled","tagAdded","tagsPasted","values","tagUpdated","tagDeleted","tagSelected","computed","ctx2","JSON","stringify","trim","isDisabled","watch","activities","exit","on","DOUBLE_CLICK_TAG","internal","guard","actions","POINTER_DOWN_TAG","CLICK_DELETE_TAG","SET_INPUT_VALUE","SET_VALUE","CLEAR_TAG","SET_VALUE_AT_INDEX","CLEAR_VALUE","ADD_TAG","EXTERNAL_BLUR","states","idle","FOCUS","POINTER_DOWN","tags","entry","TYPE","BLUR","ENTER","DELIMITER_KEY","ARROW_LEFT","BACKSPACE","PASTE","ARROW_RIGHT","ARROW_DOWN","ESCAPE","DELETE","TAG_INPUT_TYPE","TAG_INPUT_ESCAPE","TAG_INPUT_BLUR","TAG_INPUT_ENTER","isInputRelatedTarget","hasHighlightedTag","isFirstTagHighlighted","firstItemId","isEditedTagEmpty","isLastTagHighlighted","lastIndex","lastItemId","isInputValueEmpty","hasTags","allowOverflow","addOnBlur","clearOnBlur","isTagEditable","isInputCaretAtStart","selectionStart","selectionEnd","e","_evt","exclude","onFocusOutside","onPointerDownOutside","onInteractOutside","src","trackFormControlState","initialContext","onFieldsetDisabledChange","onFormReset","autoResize","idx","trackLiveRegion","level","document","destroy","raiseAddTagEvent","_","__","self","raiseExternalBlurEvent","dispatchChangeEvent","highlightNextTag","next","set","highlightedId","highlightFirstTag","first","highlightLastTag","last","highlightPrevTag","highlightTag","highlightTagAtIndex","deleteTag","deleteHighlightedTag","setEditedId","clearEditedId","clearEditedTagValue","setEditedTagValue","submitEditedTagValue","valueAtIndex","initializeEditedTagValue","focusEditedTagInput","select","clearHighlightedId","focusInput","syncInputValue","syncEditedTagInputValue","editTagInputEl","addTag","Array","from","nextValue","concat","onValueInvalid","reason","addTagFromPaste","trimmedValue","split","map","v","clearTags","invokeOnInvalid","clearLog","logHighlightedTag","announceLog","region","msg","announce","invoke","change","onValueChange","highlightChange","highlightedValue","onHighlightChange","valueChange","onInputValueChange","createProps","createSplitProps","props","splitProps","itemProps","splitItemProps"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tags-input\\src\\tags-input.anatomy.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tags-input\\src\\tags-input.connect.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tags-input\\src\\tags-input.dom.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tags-input\\src\\tags-input.machine.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\tags-input\\src\\tags-input.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"tagsInput\").parts(\n  \"root\",\n  \"label\",\n  \"control\",\n  \"input\",\n  \"clearTrigger\",\n  \"item\",\n  \"itemPreview\",\n  \"itemInput\",\n  \"itemText\",\n  \"itemDeleteTrigger\",\n)\n\nexport const parts = anatomy.build()\n","import { getEventKey, getNativeEvent, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { ariaAttr, dataAttr, isComposingEvent } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./tags-input.anatomy\"\nimport { dom } from \"./tags-input.dom\"\nimport type { ItemProps, ItemState, MachineApi, Send, State } from \"./tags-input.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const interactive = state.context.isInteractive\n  const disabled = state.context.disabled\n  const readOnly = state.context.readOnly\n  const invalid = state.context.invalid || state.context.isOverflowing\n\n  const translations = state.context.translations\n\n  const focused = state.hasTag(\"focused\")\n  const editingTag = state.matches(\"editing:tag\")\n  const empty = state.context.count === 0\n\n  function getItemState(options: ItemProps): ItemState {\n    const id = dom.getItemId(state.context, options)\n    return {\n      id,\n      editing: editingTag && state.context.editedTagId === id,\n      highlighted: id === state.context.highlightedTagId,\n      disabled: Boolean(options.disabled || disabled),\n    }\n  }\n\n  return {\n    empty: empty,\n    inputValue: state.context.trimmedInputValue,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    count: state.context.count,\n    atMax: state.context.isAtMax,\n    setValue(value) {\n      send({ type: \"SET_VALUE\", value })\n    },\n    clearValue(id) {\n      if (id) {\n        send({ type: \"CLEAR_TAG\", id })\n      } else {\n        send(\"CLEAR_VALUE\")\n      }\n    },\n    addValue(value) {\n      send({ type: \"ADD_TAG\", value })\n    },\n    setValueAtIndex(index, value) {\n      send({ type: \"SET_VALUE_AT_INDEX\", index, value })\n    },\n    setInputValue(value) {\n      send({ type: \"SET_INPUT_VALUE\", value })\n    },\n    clearInputValue() {\n      send({ type: \"SET_INPUT_VALUE\", value: \"\" })\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus()\n    },\n    getItemState,\n\n    getRootProps() {\n      return normalize.element({\n        dir: state.context.dir,\n        ...parts.root.attrs,\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-empty\": dataAttr(empty),\n        id: dom.getRootId(state.context),\n        onPointerDown() {\n          if (!interactive) return\n          send(\"POINTER_DOWN\")\n        },\n      })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir,\n        htmlFor: dom.getInputId(state.context),\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        id: dom.getControlId(state.context),\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        tabIndex: readOnly ? 0 : undefined,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused),\n      })\n    },\n\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        maxLength: state.context.maxLength,\n        id: dom.getInputId(state.context),\n        defaultValue: state.context.inputValue,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"none\",\n        disabled: disabled || readOnly,\n        onChange(event) {\n          const evt = getNativeEvent(event)\n          const value = event.target.value\n\n          if (evt.inputType === \"insertFromPaste\") {\n            send({ type: \"PASTE\", value })\n            return\n          }\n\n          if (endsWith(value, state.context.delimiter)) {\n            send(\"DELIMITER_KEY\")\n            return\n          }\n\n          send({ type: \"TYPE\", value, key: evt.inputType })\n        },\n        onFocus() {\n          send(\"FOCUS\")\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (isComposingEvent(event)) return\n\n          // handle composition when used as combobox\n          const target = event.currentTarget as HTMLElement\n          const isCombobox = target.getAttribute(\"role\") === \"combobox\"\n          const isExpanded = target.ariaExpanded === \"true\"\n\n          const keyMap: EventKeyMap = {\n            ArrowDown() {\n              send(\"ARROW_DOWN\")\n            },\n            ArrowLeft() {\n              if (isCombobox && isExpanded) return\n              send(\"ARROW_LEFT\")\n            },\n            ArrowRight(event) {\n              if (state.context.highlightedTagId) {\n                event.preventDefault()\n              }\n              if (isCombobox && isExpanded) return\n              send(\"ARROW_RIGHT\")\n            },\n            Escape(event) {\n              event.preventDefault()\n              send(\"ESCAPE\")\n            },\n            Backspace() {\n              send(\"BACKSPACE\")\n            },\n            Delete() {\n              send(\"DELETE\")\n            },\n            Enter(event) {\n              if (isCombobox && isExpanded) return\n              send(\"ENTER\")\n              event.preventDefault()\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keyMap[key]\n\n          if (exec) {\n            exec(event)\n            return\n          }\n        },\n      })\n    },\n\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        hidden: true,\n        name: state.context.name,\n        form: state.context.form,\n        disabled,\n        readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        defaultValue: state.context.valueAsString,\n      })\n    },\n\n    getItemProps(props) {\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        \"data-value\": props.value,\n        \"data-disabled\": dataAttr(disabled),\n      })\n    },\n\n    getItemPreviewProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.itemPreview.attrs,\n        id: itemState.id,\n        dir: state.context.dir,\n        hidden: itemState.editing,\n        \"data-value\": props.value,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        onPointerDown(event) {\n          if (!interactive || itemState.disabled) return\n          event.preventDefault()\n          send({ type: \"POINTER_DOWN_TAG\", id: itemState.id })\n        },\n        onDoubleClick() {\n          if (!interactive || itemState.disabled) return\n          send({ type: \"DOUBLE_CLICK_TAG\", id: itemState.id })\n        },\n      })\n    },\n\n    getItemTextProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.itemText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n      })\n    },\n\n    getItemInputProps(props) {\n      const itemState = getItemState(props)\n      return normalize.input({\n        ...parts.itemInput.attrs,\n        dir: state.context.dir,\n        \"aria-label\": translations.tagEdited(props.value),\n        \"aria-hidden\": true,\n        disabled: disabled,\n        id: dom.getItemInputId(state.context, props),\n        tabIndex: -1,\n        hidden: !itemState.editing,\n        defaultValue: itemState.editing ? state.context.editedTagValue : \"\",\n        onChange(event) {\n          send({ type: \"TAG_INPUT_TYPE\", value: event.target.value })\n        },\n        onBlur(event) {\n          send({ type: \"TAG_INPUT_BLUR\", target: event.relatedTarget, id: itemState.id })\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (isComposingEvent(event)) return\n\n          const keyMap: EventKeyMap = {\n            Enter() {\n              send(\"TAG_INPUT_ENTER\")\n            },\n            Escape() {\n              send(\"TAG_INPUT_ESCAPE\")\n            },\n          }\n\n          const exec = keyMap[event.key]\n\n          if (exec) {\n            event.preventDefault()\n            exec(event)\n          }\n        },\n      })\n    },\n\n    getItemDeleteTriggerProps(props) {\n      const id = dom.getItemId(state.context, props)\n      return normalize.button({\n        ...parts.itemDeleteTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getItemDeleteTriggerId(state.context, props),\n        type: \"button\",\n        disabled: disabled,\n        \"aria-label\": translations.deleteTagTriggerLabel(props.value),\n        tabIndex: -1,\n        onPointerDown(event) {\n          if (!interactive) {\n            event.preventDefault()\n          }\n        },\n        onPointerMove(event) {\n          if (!interactive) return\n          dom.setHoverIntent(event.currentTarget)\n        },\n        onPointerLeave(event) {\n          if (!interactive) return\n          dom.clearHoverIntent(event.currentTarget)\n        },\n        onClick() {\n          if (!interactive) return\n          send({ type: \"CLICK_DELETE_TAG\", id })\n        },\n      })\n    },\n\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getClearTriggerId(state.context),\n        type: \"button\",\n        \"data-readonly\": dataAttr(readOnly),\n        disabled: disabled,\n        \"aria-label\": translations.clearTriggerLabel,\n        hidden: empty,\n        onClick() {\n          if (!interactive) return\n          send(\"CLEAR_VALUE\")\n        },\n      })\n    },\n  }\n}\n\nfunction endsWith(str: string, del: string | RegExp | undefined) {\n  if (!del) return false\n  if (typeof del === \"string\") return str.endsWith(del)\n  return new RegExp(`${del.source}$`).test(str)\n}\n","import { createScope, indexOfId, nextById, prevById, queryAll } from \"@zag-js/dom-query\"\nimport { dispatchInputValueEvent } from \"@zag-js/form-utils\"\nimport type { MachineContext as Ctx, ItemProps } from \"./tags-input.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `tags-input:${ctx.id}`,\n  getInputId: (ctx: Ctx) => ctx.ids?.input ?? `tags-input:${ctx.id}:input`,\n  getClearTriggerId: (ctx: Ctx) => ctx.ids?.clearBtn ?? `tags-input:${ctx.id}:clear-btn`,\n  getHiddenInputId: (ctx: Ctx) => ctx.ids?.hiddenInput ?? `tags-input:${ctx.id}:hidden-input`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `tags-input:${ctx.id}:label`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `tags-input:${ctx.id}:control`,\n  getItemId: (ctx: Ctx, opt: ItemProps) => ctx.ids?.item?.(opt) ?? `tags-input:${ctx.id}:tag:${opt.value}:${opt.index}`,\n  getItemDeleteTriggerId: (ctx: Ctx, opt: ItemProps) =>\n    ctx.ids?.itemDeleteTrigger?.(opt) ?? `${dom.getItemId(ctx, opt)}:delete-btn`,\n  getItemInputId: (ctx: Ctx, opt: ItemProps) => ctx.ids?.itemInput?.(opt) ?? `${dom.getItemId(ctx, opt)}:input`,\n  getEditInputId: (ctx: Ctx) => `${ctx.editedTagId}:input`,\n\n  getTagInputEl: (ctx: Ctx, opt: ItemProps) => dom.getById<HTMLInputElement>(ctx, dom.getItemInputId(ctx, opt)),\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getInputId(ctx)),\n  getHiddenInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getHiddenInputId(ctx)),\n  getEditInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getEditInputId(ctx)),\n  getTagElements: (ctx: Ctx) => queryAll(dom.getRootEl(ctx), `[data-part=item-preview]:not([data-disabled])`),\n  getFirstEl: (ctx: Ctx) => dom.getTagElements(ctx)[0],\n  getLastEl: (ctx: Ctx) => dom.getTagElements(ctx)[dom.getTagElements(ctx).length - 1],\n  getPrevEl: (ctx: Ctx, id: string) => prevById(dom.getTagElements(ctx), id, false),\n  getNextEl: (ctx: Ctx, id: string) => nextById(dom.getTagElements(ctx), id, false),\n  getTagElAtIndex: (ctx: Ctx, index: number) => dom.getTagElements(ctx)[index],\n\n  getIndexOfId: (ctx: Ctx, id: string) => indexOfId(dom.getTagElements(ctx), id),\n  isInputFocused: (ctx: Ctx) => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),\n\n  getHighlightedTagValue: (ctx: Ctx) => {\n    if (!ctx.highlightedTagId) return null\n    const tagEl = dom.getById(ctx, ctx.highlightedTagId)\n    return tagEl?.dataset.value ?? null\n  },\n  setHoverIntent: (el: Element) => {\n    const tagEl = el.closest<HTMLElement>(\"[data-part=item-preview]\")\n    if (!tagEl) return\n    tagEl.dataset.deleteIntent = \"\"\n  },\n  clearHoverIntent: (el: Element) => {\n    const tagEl = el.closest<HTMLElement>(\"[data-part=item-preview]\")\n    if (!tagEl) return\n    delete tagEl.dataset.deleteIntent\n  },\n  dispatchInputEvent(ctx: Ctx) {\n    const inputEl = dom.getHiddenInputEl(ctx)\n    if (!inputEl) return\n    dispatchInputValueEvent(inputEl, { value: ctx.valueAsString })\n  },\n})\n","import { autoResizeInput } from \"@zag-js/auto-resize\"\nimport { createMachine, guards } from \"@zag-js/core\"\nimport { contains, raf } from \"@zag-js/dom-query\"\nimport { trackFormControl } from \"@zag-js/form-utils\"\nimport { trackInteractOutside } from \"@zag-js/interact-outside\"\nimport { createLiveRegion } from \"@zag-js/live-region\"\nimport { compact, isEqual, removeAt, uniq, warn } from \"@zag-js/utils\"\nimport { dom } from \"./tags-input.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./tags-input.types\"\n\nconst { and, not, or } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"tags-input\",\n      initial: ctx.autoFocus ? \"focused:input\" : \"idle\",\n      context: {\n        inputValue: \"\",\n        editedTagValue: \"\",\n        editedTagId: null,\n        highlightedTagId: null,\n        value: [],\n        dir: \"ltr\",\n        max: Infinity,\n        blurBehavior: undefined,\n        addOnPaste: false,\n        editable: true,\n        validate: () => true,\n        delimiter: \",\",\n        disabled: false,\n        readOnly: false,\n        ...ctx,\n        liveRegion: null,\n        log: { current: null, prev: null },\n        fieldsetDisabled: false,\n        translations: {\n          clearTriggerLabel: \"Clear all tags\",\n          deleteTagTriggerLabel: (value) => `Delete tag ${value}`,\n          tagAdded: (value) => `Added tag ${value}`,\n          tagsPasted: (values) => `Pasted ${values.length} tags`,\n          tagEdited: (value) => `Editing tag ${value}. Press enter to save or escape to cancel.`,\n          tagUpdated: (value) => `Tag update to ${value}`,\n          tagDeleted: (value) => `Tag ${value} deleted`,\n          tagSelected: (value) => `Tag ${value} selected. Press enter to edit, delete or backspace to remove.`,\n          ...ctx.translations,\n        },\n      },\n      computed: {\n        count: (ctx) => ctx.value.length,\n        valueAsString: (ctx) => JSON.stringify(ctx.value),\n        trimmedInputValue: (ctx) => ctx.inputValue.trim(),\n        isDisabled: (ctx) => !!ctx.disabled || ctx.fieldsetDisabled,\n        isInteractive: (ctx) => !(ctx.readOnly || ctx.isDisabled),\n        isAtMax: (ctx) => ctx.count === ctx.max,\n        isOverflowing: (ctx) => ctx.count > ctx.max,\n      },\n      watch: {\n        highlightedTagId: \"logHighlightedTag\",\n        isOverflowing: \"invokeOnInvalid\",\n        log: \"announceLog\",\n        inputValue: \"syncInputValue\",\n        editedTagValue: \"syncEditedTagInputValue\",\n      },\n\n      activities: [\"trackLiveRegion\", \"trackFormControlState\"],\n\n      exit: [\"clearLog\"],\n\n      on: {\n        DOUBLE_CLICK_TAG: {\n          internal: true,\n          guard: \"isTagEditable\",\n          target: \"editing:tag\",\n          actions: [\"setEditedId\", \"initializeEditedTagValue\"],\n        },\n        POINTER_DOWN_TAG: {\n          internal: true,\n          target: \"navigating:tag\",\n          actions: [\"highlightTag\", \"focusInput\"],\n        },\n        CLICK_DELETE_TAG: {\n          target: \"focused:input\",\n          actions: [\"deleteTag\"],\n        },\n        SET_INPUT_VALUE: {\n          actions: [\"setInputValue\"],\n        },\n        SET_VALUE: {\n          actions: [\"setValue\"],\n        },\n        CLEAR_TAG: {\n          actions: [\"deleteTag\"],\n        },\n        SET_VALUE_AT_INDEX: {\n          actions: [\"setValueAtIndex\"],\n        },\n        CLEAR_VALUE: {\n          actions: [\"clearTags\", \"clearInputValue\", \"focusInput\"],\n        },\n        ADD_TAG: {\n          // (!isAtMax || allowOverflow) && !inputValueIsEmpty\n          guard: and(or(not(\"isAtMax\"), \"allowOverflow\"), not(\"isInputValueEmpty\")),\n          actions: [\"addTag\", \"clearInputValue\"],\n        },\n        EXTERNAL_BLUR: [\n          { guard: \"addOnBlur\", actions: \"raiseAddTagEvent\" },\n          { guard: \"clearOnBlur\", actions: \"clearInputValue\" },\n        ],\n      },\n\n      states: {\n        idle: {\n          on: {\n            FOCUS: \"focused:input\",\n            POINTER_DOWN: {\n              guard: not(\"hasHighlightedTag\"),\n              target: \"focused:input\",\n            },\n          },\n        },\n\n        \"focused:input\": {\n          tags: [\"focused\"],\n          entry: [\"focusInput\", \"clearHighlightedId\"],\n          activities: [\"trackInteractOutside\"],\n          on: {\n            TYPE: {\n              actions: \"setInputValue\",\n            },\n            BLUR: [\n              {\n                guard: \"addOnBlur\",\n                target: \"idle\",\n                actions: \"raiseAddTagEvent\",\n              },\n              {\n                guard: \"clearOnBlur\",\n                target: \"idle\",\n                actions: \"clearInputValue\",\n              },\n              { target: \"idle\" },\n            ],\n            ENTER: {\n              actions: [\"raiseAddTagEvent\"],\n            },\n            DELIMITER_KEY: {\n              actions: [\"raiseAddTagEvent\"],\n            },\n            ARROW_LEFT: {\n              guard: and(\"hasTags\", \"isInputCaretAtStart\"),\n              target: \"navigating:tag\",\n              actions: \"highlightLastTag\",\n            },\n            BACKSPACE: {\n              target: \"navigating:tag\",\n              guard: and(\"hasTags\", \"isInputCaretAtStart\"),\n              actions: \"highlightLastTag\",\n            },\n            PASTE: [\n              {\n                guard: \"addOnPaste\",\n                actions: [\"setInputValue\", \"addTagFromPaste\"],\n              },\n              {\n                actions: \"setInputValue\",\n              },\n            ],\n          },\n        },\n\n        \"navigating:tag\": {\n          tags: [\"focused\"],\n          activities: [\"trackInteractOutside\"],\n          on: {\n            ARROW_RIGHT: [\n              {\n                guard: and(\"hasTags\", \"isInputCaretAtStart\", not(\"isLastTagHighlighted\")),\n                actions: \"highlightNextTag\",\n              },\n              { target: \"focused:input\" },\n            ],\n            ARROW_LEFT: {\n              actions: \"highlightPrevTag\",\n            },\n            BLUR: {\n              target: \"idle\",\n              actions: \"clearHighlightedId\",\n            },\n            ENTER: {\n              guard: and(\"isTagEditable\", \"hasHighlightedTag\"),\n              target: \"editing:tag\",\n              actions: [\"setEditedId\", \"initializeEditedTagValue\", \"focusEditedTagInput\"],\n            },\n            ARROW_DOWN: \"focused:input\",\n            ESCAPE: \"focused:input\",\n            TYPE: {\n              target: \"focused:input\",\n              actions: \"setInputValue\",\n            },\n            BACKSPACE: [\n              {\n                guard: \"isFirstTagHighlighted\",\n                actions: [\"deleteHighlightedTag\", \"highlightFirstTag\"],\n              },\n              {\n                actions: [\"deleteHighlightedTag\", \"highlightPrevTag\"],\n              },\n            ],\n            DELETE: {\n              actions: [\"deleteHighlightedTag\", \"highlightTagAtIndex\"],\n            },\n            PASTE: [\n              {\n                guard: \"addOnPaste\",\n                target: \"focused:input\",\n                actions: [\"setInputValue\", \"addTagFromPaste\"],\n              },\n              {\n                target: \"focused:input\",\n                actions: \"setInputValue\",\n              },\n            ],\n          },\n        },\n\n        \"editing:tag\": {\n          tags: [\"editing\", \"focused\"],\n          entry: \"focusEditedTagInput\",\n          activities: [\"autoResize\"],\n          on: {\n            TAG_INPUT_TYPE: {\n              actions: \"setEditedTagValue\",\n            },\n            TAG_INPUT_ESCAPE: {\n              target: \"navigating:tag\",\n              actions: [\"clearEditedTagValue\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"],\n            },\n            TAG_INPUT_BLUR: [\n              {\n                guard: \"isInputRelatedTarget\",\n                target: \"navigating:tag\",\n                actions: [\"clearEditedTagValue\", \"clearHighlightedId\", \"clearEditedId\"],\n              },\n              {\n                target: \"idle\",\n                actions: [\"clearEditedTagValue\", \"clearHighlightedId\", \"clearEditedId\", \"raiseExternalBlurEvent\"],\n              },\n            ],\n            TAG_INPUT_ENTER: [\n              {\n                guard: \"isEditedTagEmpty\",\n                target: \"navigating:tag\",\n                actions: [\"deleteHighlightedTag\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"],\n              },\n              {\n                target: \"navigating:tag\",\n                actions: [\"submitEditedTagValue\", \"focusInput\", \"clearEditedId\", \"highlightTagAtIndex\"],\n              },\n            ],\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isInputRelatedTarget: (ctx, evt) => evt.relatedTarget === dom.getInputEl(ctx),\n        isAtMax: (ctx) => ctx.isAtMax,\n        hasHighlightedTag: (ctx) => ctx.highlightedTagId !== null,\n        isFirstTagHighlighted: (ctx) => {\n          const firstItemId = dom.getItemId(ctx, { value: ctx.value[0], index: 0 })\n          return firstItemId === ctx.highlightedTagId\n        },\n        isEditedTagEmpty: (ctx) => ctx.editedTagValue.trim() === \"\",\n        isLastTagHighlighted: (ctx) => {\n          const lastIndex = ctx.value.length - 1\n          const lastItemId = dom.getItemId(ctx, { value: ctx.value[lastIndex], index: lastIndex })\n          return lastItemId === ctx.highlightedTagId\n        },\n        isInputValueEmpty: (ctx) => ctx.trimmedInputValue.length === 0,\n        hasTags: (ctx) => ctx.value.length > 0,\n        allowOverflow: (ctx) => !!ctx.allowOverflow,\n        autoFocus: (ctx) => !!ctx.autoFocus,\n        addOnBlur: (ctx) => ctx.blurBehavior === \"add\",\n        clearOnBlur: (ctx) => ctx.blurBehavior === \"clear\",\n        addOnPaste: (ctx) => !!ctx.addOnPaste,\n        isTagEditable: (ctx) => !!ctx.editable,\n        isInputCaretAtStart(ctx) {\n          const input = dom.getInputEl(ctx)\n          if (!input) return false\n          try {\n            return input.selectionStart === 0 && input.selectionEnd === 0\n          } catch (e) {\n            return input.value === \"\"\n          }\n        },\n      },\n\n      activities: {\n        trackInteractOutside(ctx, _evt, { send }) {\n          return trackInteractOutside(dom.getInputEl(ctx), {\n            exclude(target) {\n              return contains(dom.getRootEl(ctx), target)\n            },\n            onFocusOutside: ctx.onFocusOutside,\n            onPointerDownOutside: ctx.onPointerDownOutside,\n            onInteractOutside(event) {\n              ctx.onInteractOutside?.(event)\n              if (event.defaultPrevented) return\n              send({ type: \"BLUR\", src: \"interact-outside\" })\n            },\n          })\n        },\n        trackFormControlState(ctx, _evt, { send, initialContext }) {\n          return trackFormControl(dom.getHiddenInputEl(ctx), {\n            onFieldsetDisabledChange(disabled) {\n              ctx.fieldsetDisabled = disabled\n            },\n            onFormReset() {\n              send({ type: \"SET_VALUE\", value: initialContext.value, src: \"form-reset\" })\n            },\n          })\n        },\n        autoResize(ctx) {\n          if (!ctx.editedTagValue || ctx.idx == null || !ctx.editable) return\n          const input = dom.getTagInputEl(ctx, { value: ctx.editedTagValue, index: ctx.idx })\n          return autoResizeInput(input)\n        },\n        trackLiveRegion(ctx) {\n          ctx.liveRegion = createLiveRegion({\n            level: \"assertive\",\n            document: dom.getDoc(ctx),\n          })\n          return () => ctx.liveRegion?.destroy()\n        },\n      },\n\n      actions: {\n        raiseAddTagEvent(_, __, { self }) {\n          self.send(\"ADD_TAG\")\n        },\n        raiseExternalBlurEvent(_, evt, { self }) {\n          self.send({ type: \"EXTERNAL_BLUR\", id: evt.id })\n        },\n        dispatchChangeEvent(ctx) {\n          dom.dispatchInputEvent(ctx)\n        },\n        highlightNextTag(ctx) {\n          if (ctx.highlightedTagId == null) return\n          const next = dom.getNextEl(ctx, ctx.highlightedTagId)\n          set.highlightedId(ctx, next?.id ?? null)\n        },\n        highlightFirstTag(ctx) {\n          raf(() => {\n            const first = dom.getFirstEl(ctx)\n            set.highlightedId(ctx, first?.id ?? null)\n          })\n        },\n        highlightLastTag(ctx) {\n          const last = dom.getLastEl(ctx)\n          set.highlightedId(ctx, last?.id ?? null)\n        },\n        highlightPrevTag(ctx) {\n          if (ctx.highlightedTagId == null) return\n          const prev = dom.getPrevEl(ctx, ctx.highlightedTagId)\n          set.highlightedId(ctx, prev?.id ?? null)\n        },\n        highlightTag(ctx, evt) {\n          set.highlightedId(ctx, evt.id)\n        },\n        highlightTagAtIndex(ctx) {\n          raf(() => {\n            if (ctx.idx == null) return\n\n            const tagEl = dom.getTagElAtIndex(ctx, ctx.idx)\n            if (tagEl == null) return\n\n            set.highlightedId(ctx, tagEl.id)\n            ctx.idx = undefined\n          })\n        },\n        deleteTag(ctx, evt) {\n          const index = dom.getIndexOfId(ctx, evt.id)\n          const value = ctx.value[index]\n\n          // log\n          ctx.log.prev = ctx.log.current\n          ctx.log.current = { type: \"delete\", value }\n\n          set.value(ctx, removeAt(ctx.value, index))\n        },\n        deleteHighlightedTag(ctx) {\n          if (ctx.highlightedTagId == null) return\n          const index = dom.getIndexOfId(ctx, ctx.highlightedTagId)\n          ctx.idx = index\n          const value = ctx.value[index]\n\n          // log\n          ctx.log.prev = ctx.log.current\n          ctx.log.current = { type: \"delete\", value }\n\n          set.value(ctx, removeAt(ctx.value, index))\n        },\n        setEditedId(ctx, evt) {\n          ctx.editedTagId = evt.id ?? ctx.highlightedTagId\n          ctx.idx = dom.getIndexOfId(ctx, ctx.editedTagId!)\n        },\n        clearEditedId(ctx) {\n          ctx.editedTagId = null\n        },\n        clearEditedTagValue(ctx) {\n          ctx.editedTagValue = \"\"\n        },\n        setEditedTagValue(ctx, evt) {\n          ctx.editedTagValue = evt.value\n        },\n        submitEditedTagValue(ctx) {\n          if (!ctx.editedTagId) return\n\n          const index = dom.getIndexOfId(ctx, ctx.editedTagId)\n          set.valueAtIndex(ctx, index, ctx.editedTagValue ?? \"\")\n\n          // log\n          ctx.log.prev = ctx.log.current\n          ctx.log.current = { type: \"update\", value: ctx.editedTagValue! }\n        },\n        setValueAtIndex(ctx, evt) {\n          if (evt.value) {\n            ctx.value[evt.index] = evt.value\n            // log\n            ctx.log.prev = ctx.log.current\n            ctx.log.current = { type: \"update\", value: evt.value }\n          } else {\n            warn(\"You need to provide a value for the tag\")\n          }\n        },\n        initializeEditedTagValue(ctx) {\n          if (!ctx.editedTagId) return\n          const index = dom.getIndexOfId(ctx, ctx.editedTagId)\n          ctx.editedTagValue = ctx.value[index]\n        },\n        focusEditedTagInput(ctx) {\n          raf(() => {\n            dom.getEditInputEl(ctx)?.select()\n          })\n        },\n        setInputValue(ctx, evt) {\n          set.inputValue(ctx, evt.value)\n        },\n        clearHighlightedId(ctx) {\n          ctx.highlightedTagId = null\n        },\n        focusInput(ctx) {\n          raf(() => {\n            dom.getInputEl(ctx)?.focus()\n          })\n        },\n        clearInputValue(ctx) {\n          raf(() => {\n            set.inputValue(ctx, \"\")\n          })\n        },\n        syncInputValue(ctx) {\n          const inputEl = dom.getInputEl(ctx)\n          dom.setValue(inputEl, ctx.inputValue)\n        },\n        syncEditedTagInputValue(ctx, evt) {\n          const id = ctx.editedTagId || ctx.highlightedTagId || evt.id\n          if (id == null) return\n          const editTagInputEl = dom.getById<HTMLInputElement>(ctx, `${id}:input`)\n          dom.setValue(editTagInputEl, ctx.editedTagValue)\n        },\n        addTag(ctx, evt) {\n          const value = evt.value ?? ctx.trimmedInputValue\n          const guard = ctx.validate?.({ inputValue: value, value: Array.from(ctx.value) })\n          if (guard) {\n            const nextValue = uniq(ctx.value.concat(value))\n            set.value(ctx, nextValue)\n            // log\n            ctx.log.prev = ctx.log.current\n            ctx.log.current = { type: \"add\", value }\n          } else {\n            ctx.onValueInvalid?.({ reason: \"invalidTag\" })\n          }\n        },\n        addTagFromPaste(ctx) {\n          raf(() => {\n            const value = ctx.trimmedInputValue\n            const guard = ctx.validate?.({ inputValue: value, value: Array.from(ctx.value) })\n            if (guard) {\n              const trimmedValue = ctx.delimiter ? value.split(ctx.delimiter).map((v) => v.trim()) : [value]\n              const nextValue = uniq(ctx.value.concat(...trimmedValue))\n              set.value(ctx, nextValue)\n              // log\n              ctx.log.prev = ctx.log.current\n              ctx.log.current = { type: \"paste\", values: trimmedValue }\n            } else {\n              ctx.onValueInvalid?.({ reason: \"invalidTag\" })\n            }\n            set.inputValue(ctx, \"\")\n          })\n        },\n        clearTags(ctx) {\n          set.value(ctx, [])\n          // log\n          ctx.log.prev = ctx.log.current\n          ctx.log.current = { type: \"clear\" }\n        },\n        setValue(ctx, evt) {\n          set.value(ctx, evt.value)\n        },\n        invokeOnInvalid(ctx) {\n          if (ctx.isOverflowing) {\n            ctx.onValueInvalid?.({ reason: \"rangeOverflow\" })\n          }\n        },\n        clearLog(ctx) {\n          ctx.log = { prev: null, current: null }\n        },\n        logHighlightedTag(ctx) {\n          if (ctx.highlightedTagId == null) return\n          const index = dom.getIndexOfId(ctx, ctx.highlightedTagId)\n\n          // log\n          ctx.log.prev = ctx.log.current\n          ctx.log.current = { type: \"select\", value: ctx.value[index] }\n        },\n        // queue logs with screen reader and get it announced\n        announceLog(ctx) {\n          if (!ctx.log.current || ctx.liveRegion == null) return\n\n          const region = ctx.liveRegion\n          const { current, prev } = ctx.log\n          let msg: string | undefined\n\n          switch (current.type) {\n            case \"add\":\n              msg = ctx.translations.tagAdded(current.value)\n              break\n            case \"delete\":\n              msg = ctx.translations.tagDeleted(current.value)\n              break\n            case \"update\":\n              msg = ctx.translations.tagUpdated(current.value)\n              break\n            case \"paste\":\n              msg = ctx.translations.tagsPasted(current.values)\n              break\n            case \"select\":\n              msg = ctx.translations.tagSelected(current.value)\n              if (prev?.type === \"delete\") {\n                msg = `${ctx.translations.tagDeleted(prev.value)}. ${msg}`\n              } else if (prev?.type === \"update\") {\n                msg = `${ctx.translations.tagUpdated(prev.value)}. ${msg}`\n              }\n              break\n            default:\n              break\n          }\n\n          if (msg) region.announce(msg)\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  change: (ctx: MachineContext) => {\n    ctx.onValueChange?.({ value: Array.from(ctx.value) })\n    dom.dispatchInputEvent(ctx)\n  },\n  highlightChange: (ctx: MachineContext) => {\n    const highlightedValue = dom.getHighlightedTagValue(ctx)\n    ctx.onHighlightChange?.({ highlightedValue })\n  },\n  valueChange: (ctx: MachineContext) => {\n    ctx.onInputValueChange?.({ inputValue: ctx.inputValue })\n  },\n}\n\nconst set = {\n  value: (ctx: MachineContext, value: string[]) => {\n    if (isEqual(ctx.value, value)) return\n    ctx.value = value\n    invoke.change(ctx)\n  },\n  valueAtIndex: (ctx: MachineContext, index: number, value: string) => {\n    if (isEqual(ctx.value[index], value)) return\n    ctx.value[index] = value\n    invoke.change(ctx)\n  },\n  highlightedId: (ctx: MachineContext, id: string | null) => {\n    if (isEqual(ctx.highlightedTagId, id)) return\n    ctx.highlightedTagId = id\n    invoke.highlightChange(ctx)\n  },\n  inputValue: (ctx: MachineContext, value: string) => {\n    if (isEqual(ctx.inputValue, value)) return\n    ctx.inputValue = value\n    invoke.valueChange(ctx)\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { ItemProps, UserDefinedContext } from \"./tags-input.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"addOnPaste\",\n  \"allowOverflow\",\n  \"autoFocus\",\n  \"blurBehavior\",\n  \"delimiter\",\n  \"dir\",\n  \"disabled\",\n  \"editable\",\n  \"form\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"inputValue\",\n  \"invalid\",\n  \"max\",\n  \"maxLength\",\n  \"name\",\n  \"onFocusOutside\",\n  \"onHighlightChange\",\n  \"onInputValueChange\",\n  \"onInteractOutside\",\n  \"onPointerDownOutside\",\n  \"onValueChange\",\n  \"onValueInvalid\",\n  \"required\",\n  \"readOnly\",\n  \"translations\",\n  \"validate\",\n  \"value\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const itemProps = createProps<ItemProps>()([\"index\", \"disabled\", \"value\"])\n\nexport const splitItemProps = createSplitProps<ItemProps>(itemProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}