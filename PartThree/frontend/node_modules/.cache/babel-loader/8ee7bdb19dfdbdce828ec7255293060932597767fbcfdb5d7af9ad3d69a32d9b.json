{"ast":null,"code":"// src/input-event.ts\nvar getWindow = el => el.ownerDocument.defaultView || window;\nfunction getDescriptor(el, options) {\n  const {\n    type = \"HTMLInputElement\",\n    property = \"value\"\n  } = options;\n  const proto = getWindow(el)[type].prototype;\n  return Object.getOwnPropertyDescriptor(proto, property) ?? {};\n}\nfunction setElementValue(el, value, option = {}) {\n  const descriptor = getDescriptor(el, option);\n  descriptor.set?.call(el, value);\n  el.setAttribute(\"value\", value);\n}\nfunction setElementChecked(el, checked) {\n  const descriptor = getDescriptor(el, {\n    type: \"HTMLInputElement\",\n    property: \"checked\"\n  });\n  descriptor.set?.call(el, checked);\n  if (checked) el.setAttribute(\"checked\", \"\");else el.removeAttribute(\"checked\");\n}\nfunction dispatchInputValueEvent(el, options) {\n  const {\n    value,\n    bubbles = true\n  } = options;\n  if (!el) return;\n  const win = getWindow(el);\n  if (!(el instanceof win.HTMLInputElement)) return;\n  setElementValue(el, `${value}`);\n  el.dispatchEvent(new win.Event(\"input\", {\n    bubbles\n  }));\n}\nfunction dispatchInputCheckedEvent(el, options) {\n  const {\n    checked,\n    bubbles = true\n  } = options;\n  if (!el) return;\n  const win = getWindow(el);\n  if (!(el instanceof win.HTMLInputElement)) return;\n  setElementChecked(el, checked);\n  el.dispatchEvent(new win.Event(\"click\", {\n    bubbles\n  }));\n}\n\n// src/form.ts\nfunction getClosestForm(el) {\n  if (isFormElement(el)) return el.form;else return el.closest(\"form\");\n}\nfunction isFormElement(el) {\n  return el.matches(\"textarea, input, select, button\");\n}\nfunction trackFormReset(el, callback) {\n  if (!el) return;\n  const form = getClosestForm(el);\n  form?.addEventListener(\"reset\", callback, {\n    passive: true\n  });\n  return () => {\n    form?.removeEventListener(\"reset\", callback);\n  };\n}\nfunction trackFieldsetDisabled(el, callback) {\n  const fieldset = el?.closest(\"fieldset\");\n  if (!fieldset) return;\n  callback(fieldset.disabled);\n  const win = fieldset.ownerDocument.defaultView || window;\n  const obs = new win.MutationObserver(() => callback(fieldset.disabled));\n  obs.observe(fieldset, {\n    attributes: true,\n    attributeFilter: [\"disabled\"]\n  });\n  return () => obs.disconnect();\n}\nfunction isNativeDisabled(el) {\n  return el.matches(\":disabled\");\n}\nfunction trackFormControl(el, options) {\n  if (!el) return;\n  const {\n    onFieldsetDisabledChange,\n    onFormReset\n  } = options;\n  const cleanups = [trackFormReset(el, onFormReset), trackFieldsetDisabled(el, onFieldsetDisabledChange)];\n  return () => {\n    cleanups.forEach(cleanup => cleanup?.());\n  };\n}\nexport { dispatchInputCheckedEvent, dispatchInputValueEvent, getClosestForm, isNativeDisabled, setElementChecked, setElementValue, trackFormControl };","map":{"version":3,"names":["getWindow","el","ownerDocument","defaultView","window","getDescriptor","options","type","property","proto","prototype","Object","getOwnPropertyDescriptor","setElementValue","value","option","descriptor","set","call","setAttribute","setElementChecked","checked","removeAttribute","dispatchInputValueEvent","bubbles","win","HTMLInputElement","dispatchEvent","Event","dispatchInputCheckedEvent","getClosestForm","isFormElement","form","closest","matches","trackFormReset","callback","addEventListener","passive","removeEventListener","trackFieldsetDisabled","fieldset","disabled","obs","MutationObserver","observe","attributes","attributeFilter","disconnect","isNativeDisabled","trackFormControl","onFieldsetDisabledChange","onFormReset","cleanups","forEach","cleanup"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\form-utils\\src\\input-event.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\form-utils\\src\\form.ts"],"sourcesContent":["interface DescriptorOptions {\n  type?: \"HTMLInputElement\" | \"HTMLTextAreaElement\" | \"HTMLSelectElement\"\n  property?: \"value\" | \"checked\"\n}\n\nconst getWindow = (el: HTMLElement) => el.ownerDocument.defaultView || window\n\nfunction getDescriptor(el: HTMLElement, options: DescriptorOptions) {\n  const { type = \"HTMLInputElement\", property = \"value\" } = options\n  const proto = getWindow(el)[type].prototype\n  return Object.getOwnPropertyDescriptor(proto, property) ?? {}\n}\n\nexport function setElementValue(el: HTMLElement, value: string, option: DescriptorOptions = {}) {\n  const descriptor = getDescriptor(el, option)\n  descriptor.set?.call(el, value)\n  el.setAttribute(\"value\", value)\n}\n\nexport function setElementChecked(el: HTMLElement, checked: boolean) {\n  const descriptor = getDescriptor(el, { type: \"HTMLInputElement\", property: \"checked\" })\n  descriptor.set?.call(el, checked)\n  // react applies the `checked` automatically when we call the descriptor\n  // but for consistency with vanilla JS, we need to do it manually as well\n  if (checked) el.setAttribute(\"checked\", \"\")\n  else el.removeAttribute(\"checked\")\n}\n\nexport type InputEventOptions = {\n  value: string | number\n  bubbles?: boolean\n}\n\nexport function dispatchInputValueEvent(el: HTMLElement | null, options: InputEventOptions) {\n  const { value, bubbles = true } = options\n\n  if (!el) return\n\n  const win = getWindow(el)\n  if (!(el instanceof win.HTMLInputElement)) return\n\n  setElementValue(el, `${value}`)\n  el.dispatchEvent(new win.Event(\"input\", { bubbles }))\n}\n\nexport type CheckedEventOptions = {\n  checked: boolean\n  bubbles?: boolean\n}\n\nexport function dispatchInputCheckedEvent(el: HTMLElement | null, options: CheckedEventOptions) {\n  const { checked, bubbles = true } = options\n\n  if (!el) return\n\n  const win = getWindow(el)\n  if (!(el instanceof win.HTMLInputElement)) return\n\n  setElementChecked(el, checked)\n  el.dispatchEvent(new win.Event(\"click\", { bubbles }))\n}\n","export function getClosestForm(el: HTMLElement) {\n  if (isFormElement(el)) return el.form\n  else return el.closest(\"form\")\n}\n\nfunction isFormElement(el: HTMLElement): el is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\n  return el.matches(\"textarea, input, select, button\")\n}\n\nfunction trackFormReset(el: HTMLElement | null | undefined, callback: () => void) {\n  if (!el) return\n  const form = getClosestForm(el)\n  form?.addEventListener(\"reset\", callback, { passive: true })\n  return () => {\n    form?.removeEventListener(\"reset\", callback)\n  }\n}\n\nfunction trackFieldsetDisabled(el: HTMLElement | null | undefined, callback: (disabled: boolean) => void) {\n  const fieldset = el?.closest(\"fieldset\")\n  if (!fieldset) return\n  callback(fieldset.disabled)\n  const win = fieldset.ownerDocument.defaultView || window\n  const obs = new win.MutationObserver(() => callback(fieldset.disabled))\n  obs.observe(fieldset, {\n    attributes: true,\n    attributeFilter: [\"disabled\"],\n  })\n  return () => obs.disconnect()\n}\n\nexport function isNativeDisabled(el: HTMLElement) {\n  return el.matches(\":disabled\")\n}\n\nexport type FormControlOptions = {\n  onFieldsetDisabledChange: (disabled: boolean) => void\n  onFormReset: () => void\n}\n\nexport function trackFormControl(el: HTMLElement | null, options: FormControlOptions) {\n  if (!el) return\n\n  const { onFieldsetDisabledChange, onFormReset } = options\n\n  const cleanups = [trackFormReset(el, onFormReset), trackFieldsetDisabled(el, onFieldsetDisabledChange)]\n\n  return () => {\n    cleanups.forEach((cleanup) => cleanup?.())\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}