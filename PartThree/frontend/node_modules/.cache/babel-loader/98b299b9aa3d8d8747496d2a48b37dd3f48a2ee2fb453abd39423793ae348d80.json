{"ast":null,"code":"// src/number.ts\nfunction wrap(num, max) {\n  return (num % max + max) % max;\n}\nfunction round(num, t) {\n  const p = 10 ** (t ?? 10);\n  num = Math.round(num * p) / p;\n  return t ? num.toFixed(t) : num.toString();\n}\nfunction roundToDevicePixel(num) {\n  if (typeof window.devicePixelRatio !== \"number\") return Math.round(num);\n  const dp = window.devicePixelRatio;\n  return Math.floor(num * dp + 0.5) / dp;\n}\nvar valueToPercent = (v, r) => (nan(v) - r.min) * 100 / (r.max - r.min);\nvar percentToValue = (v, r) => r.min + (r.max - r.min) * nan(v);\nfunction clamp(v, o) {\n  return Math.min(Math.max(nan(v), o.min), o.max);\n}\nfunction countDecimals(value) {\n  if (!Number.isFinite(value)) return 0;\n  let e = 1,\n    p = 0;\n  while (Math.round(value * e) / e !== value) {\n    e *= 10;\n    p += 1;\n  }\n  return p;\n}\nvar increment = (v, s) => decimalOperation(nan(v), \"+\", s);\nvar decrement = (v, s) => decimalOperation(nan(v), \"-\", s);\nfunction snapToStep(num, step) {\n  const p = countDecimals(step);\n  const v = Math.round(nan(num) / step) * step;\n  return round(v, p);\n}\nfunction nan(v) {\n  return Number.isNaN(v) ? 0 : v;\n}\nfunction formatDecimal(v, o) {\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: false,\n    style: \"decimal\",\n    minimumFractionDigits: o.minFractionDigits,\n    maximumFractionDigits: o.maxFractionDigits\n  }).format(nan(v));\n}\nfunction isAtMax(val, o) {\n  return nan(val) >= o.max;\n}\nfunction isAtMin(val, o) {\n  return nan(val) <= o.min;\n}\nfunction isWithinRange(val, o) {\n  return nan(val) >= o.min && nan(val) <= o.max;\n}\nfunction decimalOperation(a, op, b) {\n  let result = op === \"+\" ? a + b : a - b;\n  if (a % 1 !== 0 || b % 1 !== 0) {\n    const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b));\n    a = Math.round(a * multiplier);\n    b = Math.round(b * multiplier);\n    result = op === \"+\" ? a + b : a - b;\n    result /= multiplier;\n  }\n  return result;\n}\n\n// src/number-format.ts\nvar nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  maximumFractionDigits: 20\n});\nfunction formatter(n) {\n  return parseFloat(nf.format(n));\n}\n\n// src/transform.ts\nvar transform = (a, b) => {\n  const i = {\n    min: a[0],\n    max: a[1]\n  };\n  const o = {\n    min: b[0],\n    max: b[1]\n  };\n  return v => {\n    if (i.min === i.max || o.min === o.max) return o.min;\n    const ratio = (o.max - o.min) / (i.max - i.min);\n    return o.min + ratio * (v - i.min);\n  };\n};\nfunction toRanges(o) {\n  const spacing = o.spacing ?? 0;\n  return o.value.map((v, i) => {\n    const min = i === 0 ? o.min : o.value[i - 1] + spacing;\n    const max = i === o.value.length - 1 ? o.max : o.value[i + 1] - spacing;\n    return {\n      min,\n      max,\n      value: v\n    };\n  });\n}\nfunction toRangeArray(o) {\n  let i = o.min;\n  const range = [];\n  while (i <= o.max) {\n    range.push(i);\n    i = formatter(i + o.step);\n  }\n  return range;\n}\nexport { clamp, countDecimals, decrement, formatDecimal, increment, isAtMax, isAtMin, isWithinRange, nan, percentToValue, round, roundToDevicePixel, snapToStep, toRangeArray, toRanges, transform, valueToPercent, wrap };","map":{"version":3,"names":["wrap","num","max","round","t","p","Math","toFixed","toString","roundToDevicePixel","window","devicePixelRatio","dp","floor","valueToPercent","v","r","nan","min","percentToValue","clamp","o","countDecimals","value","Number","isFinite","e","increment","s","decimalOperation","decrement","snapToStep","step","isNaN","formatDecimal","Intl","NumberFormat","useGrouping","style","minimumFractionDigits","minFractionDigits","maximumFractionDigits","maxFractionDigits","format","isAtMax","val","isAtMin","isWithinRange","a","op","b","result","multiplier","nf","formatter","n","parseFloat","transform","i","ratio","toRanges","spacing","map","length","toRangeArray","range","push"],"sources":["C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\number-utils\\src\\number.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\number-utils\\src\\number-format.ts","C:\\Users\\lab_services_student\\Desktop\\PartThree\\frontend\\node_modules\\@zag-js\\number-utils\\src\\transform.ts"],"sourcesContent":["export type Num<T extends string> = Record<T, number>\n\nexport function wrap(num: number, max: number): number {\n  return ((num % max) + max) % max\n}\n\nexport function round(num: number, t?: number) {\n  const p = 10 ** (t ?? 10)\n  num = Math.round(num * p) / p\n  return t ? num.toFixed(t) : num.toString()\n}\n\nexport function roundToDevicePixel(num: number) {\n  if (typeof window.devicePixelRatio !== \"number\") return Math.round(num)\n  const dp = window.devicePixelRatio\n  return Math.floor(num * dp + 0.5) / dp\n}\n\nexport const valueToPercent = (v: number, r: Num<\"step\" | \"min\" | \"max\">) => ((nan(v) - r.min) * 100) / (r.max - r.min)\n\nexport const percentToValue = (v: number, r: Num<\"min\" | \"max\">) => r.min + (r.max - r.min) * nan(v)\n\nexport function clamp(v: number, o: Num<\"min\" | \"max\">) {\n  return Math.min(Math.max(nan(v), o.min), o.max)\n}\n\nexport function countDecimals(value: number) {\n  if (!Number.isFinite(value)) return 0\n  let e = 1,\n    p = 0\n  while (Math.round(value * e) / e !== value) {\n    e *= 10\n    p += 1\n  }\n  return p\n}\n\nexport const increment = (v: number, s: number) => decimalOperation(nan(v), \"+\", s)\n\nexport const decrement = (v: number, s: number) => decimalOperation(nan(v), \"-\", s)\n\nexport function snapToStep(num: number, step: number) {\n  const p = countDecimals(step)\n  const v = Math.round(nan(num) / step) * step\n  return round(v, p)\n}\n\nexport function nan(v: number) {\n  return Number.isNaN(v) ? 0 : v\n}\n\nexport type FormatDecimalOptions = {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20\n   */\n  minFractionDigits?: number\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   */\n  maxFractionDigits?: number\n}\n\nexport function formatDecimal(v: number, o: Omit<FormatDecimalOptions, \"value\">) {\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: false,\n    style: \"decimal\",\n    minimumFractionDigits: o.minFractionDigits,\n    maximumFractionDigits: o.maxFractionDigits,\n  }).format(nan(v))\n}\n\nexport function isAtMax(val: number, o: Num<\"max\">) {\n  return nan(val) >= o.max\n}\n\nexport function isAtMin(val: number, o: Num<\"min\">) {\n  return nan(val) <= o.min\n}\n\nexport function isWithinRange(val: number, o: Num<\"min\" | \"max\">) {\n  return nan(val) >= o.min && nan(val) <= o.max\n}\n\nfunction decimalOperation(a: number, op: \"-\" | \"+\", b: number): number {\n  let result = op === \"+\" ? a + b : a - b\n\n  // Check if we have decimals\n  if (a % 1 !== 0 || b % 1 !== 0) {\n    const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b))\n\n    // Transform the decimals to integers based on the precision\n    a = Math.round(a * multiplier)\n    b = Math.round(b * multiplier)\n\n    // Perform the operation on integers values to make sure we don't get a fancy decimal value\n    result = op === \"+\" ? a + b : a - b\n\n    // Transform the integer result back to decimal\n    result /= multiplier\n  }\n\n  return result\n}\n","export const nf = new Intl.NumberFormat(\"en-US\", { style: \"decimal\", maximumFractionDigits: 20 })\n\nexport function formatter(n: number) {\n  return parseFloat(nf.format(n))\n}\n","import { formatter } from \"./number-format\"\n\ntype Num<T extends string> = Record<T, number>\n\nexport const transform = (a: [number, number], b: [number, number]) => {\n  const i = { min: a[0], max: a[1] }\n  const o = { min: b[0], max: b[1] }\n  return (v: number) => {\n    if (i.min === i.max || o.min === o.max) return o.min\n    const ratio = (o.max - o.min) / (i.max - i.min)\n    return o.min + ratio * (v - i.min)\n  }\n}\n\nexport function toRanges(o: Num<\"min\" | \"max\"> & { value: number[]; spacing: number }) {\n  const spacing = o.spacing ?? 0\n  return o.value.map((v, i) => {\n    const min = i === 0 ? o.min : o.value[i - 1] + spacing\n    const max = i === o.value.length - 1 ? o.max : o.value[i + 1] - spacing\n    return { min, max, value: v }\n  })\n}\n\nexport function toRangeArray(o: Num<\"min\" | \"max\" | \"step\">): number[] {\n  let i = o.min\n  const range: number[] = []\n  while (i <= o.max) {\n    range.push(i)\n    i = formatter(i + o.step)\n  }\n  return range\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}